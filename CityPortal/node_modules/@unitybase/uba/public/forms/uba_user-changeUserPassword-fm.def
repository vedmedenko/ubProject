// @! "do not remove comments below unless you know what you do!"
// @isDefault "false"
// @entity "uba_user"
// @model "UBA"
// @formType "custom"
// @caption "EnterNewPassword"
// @description "New used password dialog"
Ext.define('UBA.changeUserPassword', {
 /**
  * This is parameters enter form. Must be called using $App.showModal
  */
  extend: 'Ext.form.Panel',
  items: [{
    xtype: 'textfield',
    inputType: 'password',
    listeners: {
      keyup: {
        fn: UB.passwordKeyUpHandler
      }
    },
    enableKeyEvents: true,
    emptyText: UB.i18n('EnterOldPassword'),
    fieldLabel: UB.i18n('OldPassword'),
    labelWidth: 130,
    name: 'oldPwd',
    margins: 10,
    width: '95%',
    allowBlank: false
  }, {
    xtype: 'textfield',
    inputType: 'password',
    listeners: {
      keyup: {
        fn: UB.passwordKeyUpHandler
      }
    },
    enableKeyEvents: true,
    emptyText: UB.i18n('EnterNewPassword'),
    fieldLabel: UB.i18n('NewPassword'),
    labelWidth: 130,
    name: 'newPwd',
    margins: 10,
    width: '95%',
    allowBlank: false,
    afterLabelTextTpl: [
      '<b data-qtitle="', UB.i18n('HowToCreatePassword'),
      '" data-qtip="', UB.i18n('passwordRecommendation'),
      '" style="color: red;">?</b>'
    ]
  }, {
    xtype: 'textfield',
    inputType: 'password',
    listeners: {
      keyup: {
        fn: UB.passwordKeyUpHandler
      }
    },
    enableKeyEvents: true,
    emptyText: UB.i18n('RetypePassword'),
    fieldLabel: UB.i18n('RetypePassword'),
    name: 'newPwdRetyped',
    labelWidth: 130,
    margins: 10,
    width: '95%',
    allowBlank: false,
    validator: function (value) {
      return (this.up('panel').getForm().findField('newPwd').getValue() === value)
    }
  }, {
    xtype: 'checkbox',
    name: 'needChangePassword',
    boxLabel: UB.i18n('needChangePassword')
  }],

  buttons: [{
    ubID: 'btnOK',
    text: UB.i18n('Change'),
    glyph: UB.core.UBUtil.glyphs.faSave,
    formBind: true
  }, {
    ubID: 'btnCancel',
    text: UB.i18n('cancel'),
    glyph: UB.core.UBUtil.glyphs.faTimes
  }],

  initComponent: function () {
    var me = this // inside handler this is not a form, so memorize it here
    me.callParent(arguments)

    me.down('textfield[name="oldPwd"]').setVisible(me.customParams !== 'admin')
    me.down('textfield[name="oldPwd"]').setAllowBlank(me.customParams === 'admin')
    me.down('checkbox[name="needChangePassword"]').setVisible(me.customParams !== 'self')

        // ok handler
    me.down('button[ubID="btnOK"]').handler = function () {
      me.commandConfig.deferred.resolve({
        action: 'ok',
        newPwd: me.getForm().findField('newPwd').getValue(),
        pwd: $App.connection.SHA256('salt' + me.getForm().findField('oldPwd').getValue()).toString(),
        needChangePassword: me.getForm().findField('needChangePassword').getValue()
      })
      me.up('window').close()
    }

        // cancel handler
    me.down('button[ubID="btnCancel"]').handler = function () {
      me.commandConfig.deferred.resolve({
        action: 'cancel'
      })
      me.up('window').close()
    }

    me.on('afterrender', function () {
      me.up('window').setWidth(400)
    })
  }
})
