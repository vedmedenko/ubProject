{"version":3,"sources":["../src/PKCS8ShroudedKeyBag.js"],"names":["asn1js","PKCS8ShroudedKeyBag","parameters","encryptionAlgorithm","defaultValues","encryptedData","parsedValue","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","Sequence","value","toSchema","toJSON","sequence","Promise","resolve","cmsEncrypted","encryptedContentInfo","contentEncryptionAlgorithm","encryptedContent","then","decrypt","reject","error","fromBER","offset","contentToEncrypt","toBER","encrypt","memberName","OctetString","memberValue","compareWithDefault","algorithmId","isEqual","Object","keys","length","name","Choice","idBlock","isConstructed"],"mappings":"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","file":"PKCS8ShroudedKeyBag.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncryptedData from \"./EncryptedData.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class PKCS8ShroudedKeyBag \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PKCS8ShroudedKeyBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description encryptionAlgorithm\r\n\t\t */\r\n\t\tthis.encryptionAlgorithm = getParametersValue(parameters, \"encryptionAlgorithm\", PKCS8ShroudedKeyBag.defaultValues(\"encryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description encryptedData\r\n\t\t */\r\n\t\tthis.encryptedData = getParametersValue(parameters, \"encryptedData\", PKCS8ShroudedKeyBag.defaultValues(\"encryptedData\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @description parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", PKCS8ShroudedKeyBag.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"encryptionAlgorithm\":\r\n\t\t\t\treturn (new AlgorithmIdentifier());\r\n\t\t\tcase \"encryptedData\":\r\n\t\t\t\treturn (new asn1js.OctetString());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKCS8ShroudedKeyBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"encryptionAlgorithm\":\r\n\t\t\t\treturn ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\r\n\t\t\t\t((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedData\":\r\n\t\t\t\treturn (memberValue.isEqual(PKCS8ShroudedKeyBag.defaultValues(memberName)));\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKCS8ShroudedKeyBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//PKCS8ShroudedKeyBag ::= EncryptedPrivateKeyInfo\r\n\t\t\r\n\t\t//EncryptedPrivateKeyInfo ::= SEQUENCE {\r\n\t\t//    encryptionAlgorithm AlgorithmIdentifier {{KeyEncryptionAlgorithms}},\r\n\t\t//    encryptedData EncryptedData\r\n\t\t//}\r\n\t\t\r\n\t\t//EncryptedData ::= OCTET STRING\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [encryptionAlgorithm]\r\n\t\t * @property {string} [encryptedData]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.encryptionAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"encryptionAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedData || \"encryptedData\") }),\r\n\t\t\t\t\t\tnew asn1js.OctetString({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tname: (names.encryptedData || \"encryptedData\")\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPKCS8ShroudedKeyBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tencryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedData: \"encryptedData\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PKCS8ShroudedKeyBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.encryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.encryptionAlgorithm });\r\n\t\tthis.encryptedData = asn1.result.encryptedData;\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.encryptionAlgorithm.toSchema(),\r\n\t\t\t\tthis.encryptedData\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tencryptionAlgorithm: this.encryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedData: this.encryptedData.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst cmsEncrypted = new EncryptedData({\r\n\t\t\tencryptedContentInfo: new EncryptedContentInfo({\r\n\t\t\t\tcontentEncryptionAlgorithm: this.encryptionAlgorithm,\r\n\t\t\t\tencryptedContent: this.encryptedData\r\n\t\t\t})\r\n\t\t});\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Decrypt internal data \r\n\t\tsequence = sequence.then(\r\n\t\t\t() => cmsEncrypted.decrypt(parameters),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize \"parsedValue\" with decrypted PKCS#8 private key \r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(result);\r\n\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\treturn Promise.reject(\"Error during parsing ASN.1 data\");\r\n\t\t\t\t\r\n\t\t\t\tthis.parsedValue = new PrivateKeyInfo({ schema: asn1.result });\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\tmakeInternalValues(parameters)\r\n\t{\r\n\t\t//region Check that we do have \"parsedValue\" \r\n\t\tif((\"parsedValue\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Please initialize \\\"parsedValue\\\" first\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst cmsEncrypted = new EncryptedData();\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Encrypt internal data \r\n\t\tsequence = sequence.then(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tparameters.contentToEncrypt = this.parsedValue.toSchema().toBER(false);\r\n\t\t\t\t\r\n\t\t\t\treturn cmsEncrypted.encrypt(parameters);\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize internal values \r\n\t\tsequence = sequence.then(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tthis.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;\r\n\t\t\t\tthis.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;\r\n\t\t\t}\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}