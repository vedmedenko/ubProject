{"version":3,"sources":["../src/PublicKeyInfo.js"],"names":["asn1js","PublicKeyInfo","parameters","algorithm","defaultValues","subjectPublicKey","parsedKey","fromSchema","schema","fromJSON","json","asn1","compareSchema","names","blockName","verified","Error","result","algorithmId","algorithmParams","ObjectIdentifier","namedCurve","valueBlock","toString","valueHex","ex","publicKeyASN1","fromBER","offset","Sequence","value","toSchema","toJSON","jwk","kty","publicKeyJWK","Object","keys","key","toUpperCase","Null","BitString","toBER","publicKey","sequence","Promise","resolve","_this","reject","crypto","then","exportKey","exportedKey","exception","undefined","error","memberName","name"],"mappings":";;;;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AACA;AACA;;;IAGqBC,a;AAEpB;AACA;;;;;AAKA,0BACA;AAAA,MADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;AACA;;;;AAIA,OAAKC,SAAL,GAAiB,iCAAmBD,UAAnB,EAA+B,WAA/B,EAA4CD,cAAcG,aAAd,CAA4B,WAA5B,CAA5C,CAAjB;AACA;;;;AAIA,OAAKC,gBAAL,GAAwB,iCAAmBH,UAAnB,EAA+B,kBAA/B,EAAmDD,cAAcG,aAAd,CAA4B,kBAA5B,CAAnD,CAAxB;;AAEA,MAAG,eAAeF,UAAlB;AACC;;;;AAIA,QAAKI,SAAL,GAAiB,iCAAmBJ,UAAnB,EAA+B,WAA/B,EAA4CD,cAAcG,aAAd,CAA4B,WAA5B,CAA5C,CAAjB;AACD;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKK,UAAL,CAAgBL,WAAWM,MAA3B;AACD;AACA;AACA,MAAG,UAAUN,UAAb,EACC,KAAKO,QAAL,CAAcP,WAAWQ,IAAzB;AACD;AACA;;AAED;AACA;;;;;;;;;;AA8CA;AACA;;;;6BAIWF,M,EACX;AACC;AACA,OAAMG,OAAOX,OAAOY,aAAP,CAAqBJ,MAArB,EACZA,MADY,EAEZP,cAAcO,MAAd,CAAqB;AACpBK,WAAO;AACNV,gBAAW;AACVU,aAAO;AACNC,kBAAW;AADL;AADG,MADL;AAMNT,uBAAkB;AANZ;AADa,IAArB,CAFY,CAAb;;AAcA,OAAGM,KAAKI,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,yEAAV,CAAN;AACD;;AAEA;AACA,QAAKb,SAAL,GAAiB,kCAAwB,EAAEK,QAAQG,KAAKM,MAAL,CAAYd,SAAtB,EAAxB,CAAjB;AACA,QAAKE,gBAAL,GAAwBM,KAAKM,MAAL,CAAYZ,gBAApC;;AAEA,WAAO,KAAKF,SAAL,CAAee,WAAtB;AAEC,SAAK,mBAAL;AAA0B;AACzB,SAAG,qBAAqB,KAAKf,SAA7B,EACA;AACC,UAAG,KAAKA,SAAL,CAAegB,eAAf,YAA0CnB,OAAOoB,gBAApD,EACA;AACC,WACA;AACC,aAAKd,SAAL,GAAiB,0BAAgB;AAChCe,qBAAY,KAAKlB,SAAL,CAAegB,eAAf,CAA+BG,UAA/B,CAA0CC,QAA1C,EADoB;AAEhCf,iBAAQ,KAAKH,gBAAL,CAAsBiB,UAAtB,CAAiCE;AAFT,SAAhB,CAAjB;AAIA,QAND,CAOA,OAAMC,EAAN,EAAS,CAAE,CARZ,CAQa;AACZ;AACD;AACD;AACD,SAAK,sBAAL;AAA6B;AAC5B;AACC,UAAMC,gBAAgB1B,OAAO2B,OAAP,CAAe,KAAKtB,gBAAL,CAAsBiB,UAAtB,CAAiCE,QAAhD,CAAtB;AACA,UAAGE,cAAcE,MAAd,KAA0B,CAAC,CAA9B,EACA;AACC,WACA;AACC,aAAKtB,SAAL,GAAiB,2BAAiB,EAAEE,QAAQkB,cAAcT,MAAxB,EAAjB,CAAjB;AACA,QAHD,CAIA,OAAMQ,EAAN,EAAS,CAAE,CALZ,CAKa;AACZ;AACD;AACD;AACD;AA/BD;AAiCA;AACA;;AAED;AACA;;;;;;;6BAKA;AACC;AACA,UAAQ,IAAIzB,OAAO6B,QAAX,CAAoB;AAC3BC,WAAO,CACN,KAAK3B,SAAL,CAAe4B,QAAf,EADM,EAEN,KAAK1B,gBAFC;AADoB,IAApB,CAAR;AAMA;AACA;;AAED;AACA;;;;;;;2BAKA;AACC;AACA,OAAI,eAAe,IAAhB,KAA0B,KAA7B,EACA;AACC,WAAO;AACNF,gBAAW,KAAKA,SAAL,CAAe6B,MAAf,EADL;AAEN3B,uBAAkB,KAAKA,gBAAL,CAAsB2B,MAAtB;AAFZ,KAAP;AAIA;AACD;;AAEA;AACA,OAAMC,MAAM,EAAZ;;AAEA,WAAO,KAAK9B,SAAL,CAAee,WAAtB;AAEC,SAAK,mBAAL;AAA0B;AACzBe,SAAIC,GAAJ,GAAU,IAAV;AACA;AACD,SAAK,sBAAL;AAA6B;AAC5BD,SAAIC,GAAJ,GAAU,KAAV;AACA;AACD;AARD;;AAWA,OAAMC,eAAe,KAAK7B,SAAL,CAAe0B,MAAf,EAArB;;AAzBD;AAAA;AAAA;;AAAA;AA2BC,yBAAiBI,OAAOC,IAAP,CAAYF,YAAZ,CAAjB;AAAA,SAAUG,GAAV;;AACCL,SAAIK,GAAJ,IAAWH,aAAaG,GAAb,CAAX;AADD;AA3BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8BC,UAAOL,GAAP;AACA;AACA;;AAED;AACA;;;;;;;2BAISvB,I,EACT;AACC,OAAG,SAASA,IAAZ,EACA;AACC,YAAOA,KAAKwB,GAAL,CAASK,WAAT,EAAP;AAEC,UAAK,IAAL;AACC,WAAKjC,SAAL,GAAiB,0BAAgB,EAAEI,UAAF,EAAhB,CAAjB;;AAEA,WAAKP,SAAL,GAAiB,kCAAwB;AACxCe,oBAAa,mBAD2B;AAExCC,wBAAiB,IAAInB,OAAOoB,gBAAX,CAA4B,EAAEU,OAAO,KAAKxB,SAAL,CAAee,UAAxB,EAA5B;AAFuB,OAAxB,CAAjB;AAIA;AACD,UAAK,KAAL;AACC,WAAKf,SAAL,GAAiB,2BAAiB,EAAEI,UAAF,EAAjB,CAAjB;;AAEA,WAAKP,SAAL,GAAiB,kCAAwB;AACxCe,oBAAa,sBAD2B;AAExCC,wBAAiB,IAAInB,OAAOwC,IAAX;AAFuB,OAAxB,CAAjB;AAIA;AACD;AACC,YAAM,IAAIxB,KAAJ,2CAAkDN,KAAKwB,GAAvD,CAAN;AAnBF;;AAsBA,SAAK7B,gBAAL,GAAwB,IAAIL,OAAOyC,SAAX,CAAqB,EAAEjB,UAAU,KAAKlB,SAAL,CAAeyB,QAAf,GAA0BW,KAA1B,CAAgC,KAAhC,CAAZ,EAArB,CAAxB;AACA;AACD;;AAED;;;;4BACUC,S,EACV;AACC;AACA,OAAIC,WAAWC,QAAQC,OAAR,EAAf;AACA,OAAMC,QAAQ,IAAd;AACA;;AAEA;AACA,OAAG,OAAOJ,SAAP,KAAqB,WAAxB,EACC,OAAOE,QAAQG,MAAR,CAAe,2CAAf,CAAP;AACD;;AAEA;AACA,OAAMC,SAAS,wBAAf;AACA,OAAG,OAAOA,MAAP,KAAkB,WAArB,EACC,OAAOJ,QAAQG,MAAR,CAAe,mCAAf,CAAP;AACD;;AAEA;AACAJ,cAAWA,SAASM,IAAT,CAAc;AAAA,WACxBD,OAAOE,SAAP,CAAiB,MAAjB,EAAyBR,SAAzB,CADwB;AAAA,IAAd,CAAX;AAEA;;AAEA;AACAC,cAAWA,SAASM,IAAT,CAAc,uBACzB;AACC,QAAMvC,OAAOX,OAAO2B,OAAP,CAAeyB,WAAf,CAAb;AACA,QACC;AACCL,WAAMxC,UAAN,CAAiBI,KAAKM,MAAtB;AACA,KAHF,CAIC,OAAMoC,SAAN,EACA;AACC,YAAOR,QAAQG,MAAR,CAAe,8CAAf,CAAP;AACA;;AAEF,WAAOM,SAAP;AACA,IAbU,EAaR;AAAA,WAAST,QAAQG,MAAR,yCAAqDO,KAArD,CAAT;AAAA,IAbQ,CAAX;AAeA;;AAEA,UAAOX,QAAP;AACA;;AAED;;;;gCArPqBY,U,EACrB;AACC,WAAOA,UAAP;AAEC,SAAK,WAAL;AACC,YAAO,mCAAP;AACD,SAAK,kBAAL;AACC,YAAO,IAAIxD,OAAOyC,SAAX,EAAP;AACD;AACC,WAAM,IAAIzB,KAAJ,mDAA0DwC,UAA1D,CAAN;AAPF;AASA;;AAED;AACA;;;;;;;;2BAMA;AAAA,OADctD,UACd,uEAD2B,EAC3B;;AACC;AACA;AACA;;AAEA;;;;;;AAMA,OAAMW,QAAQ,iCAAmBX,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAIF,OAAO6B,QAAX,CAAoB;AAC3B4B,UAAO5C,MAAMC,SAAN,IAAmB,EADC;AAE3BgB,WAAO,CACN,8BAAoBtB,MAApB,CAA2BK,MAAMV,SAAN,IAAmB,EAA9C,CADM,EAEN,IAAIH,OAAOyC,SAAX,CAAqB,EAAEgB,MAAO5C,MAAMR,gBAAN,IAA0B,EAAnC,EAArB,CAFM;AAFoB,IAApB,CAAR;AAOA;;;;;AA+MF;;;kBApSqBJ,a","file":"PublicKeyInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport { getCrypto } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport ECPublicKey from \"./ECPublicKey.js\";\r\nimport RSAPublicKey from \"./RSAPublicKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PublicKeyInfo \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PublicKeyInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description Algorithm identifier\r\n\t\t */\r\n\t\tthis.algorithm = getParametersValue(parameters, \"algorithm\", PublicKeyInfo.defaultValues(\"algorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description Subject public key value\r\n\t\t */\r\n\t\tthis.subjectPublicKey = getParametersValue(parameters, \"subjectPublicKey\", PublicKeyInfo.defaultValues(\"subjectPublicKey\"));\r\n\t\t\r\n\t\tif(\"parsedKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPublicKey|RSAPublicKey}\r\n\t\t\t * @description Parsed public key value\r\n\t\t\t */\r\n\t\t\tthis.parsedKey = getParametersValue(parameters, \"parsedKey\", PublicKeyInfo.defaultValues(\"parsedKey\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"subjectPublicKey\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PublicKeyInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//SubjectPublicKeyInfo  ::=  Sequence  {\r\n\t\t//    algorithm            AlgorithmIdentifier,\r\n\t\t//    subjectPublicKey     BIT STRING  }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [algorithm]\r\n\t\t * @property {string} [subjectPublicKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.algorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.subjectPublicKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPublicKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"algorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsubjectPublicKey: \"subjectPublicKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PUBLIC_KEY_INFO\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\r\n\t\tthis.subjectPublicKey = asn1.result.subjectPublicKey;\r\n\t\t\r\n\t\tswitch(this.algorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tif(\"algorithmParams\" in this.algorithm)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.algorithm.algorithmParams instanceof asn1js.ObjectIdentifier)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.parsedKey = new ECPublicKey({\r\n\t\t\t\t\t\t\t\tnamedCurve: this.algorithm.algorithmParams.valueBlock.toString(),\r\n\t\t\t\t\t\t\t\tschema: this.subjectPublicKey.valueBlock.valueHex\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(ex){} // Could be a problems during recognision of internal public key data here. Let's ignore them.\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\t{\r\n\t\t\t\t\tconst publicKeyASN1 = asn1js.fromBER(this.subjectPublicKey.valueBlock.valueHex);\r\n\t\t\t\t\tif(publicKeyASN1.offset !== (-1))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.parsedKey = new RSAPublicKey({ schema: publicKeyASN1.result });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(ex){} // Could be a problems during recognision of internal public key data here. Let's ignore them.\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.algorithm.toSchema(),\r\n\t\t\t\tthis.subjectPublicKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\t//region Return common value in case we do not have enough info fo making JWK\r\n\t\tif((\"parsedKey\" in this) === false)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\talgorithm: this.algorithm.toJSON(),\r\n\t\t\t\tsubjectPublicKey: this.subjectPublicKey.toJSON()\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Making JWK\r\n\t\tconst jwk = {};\r\n\t\t\r\n\t\tswitch(this.algorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tjwk.kty = \"EC\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\tconst publicKeyJWK = this.parsedKey.toJSON();\r\n\t\t\r\n\t\tfor(const key of Object.keys(publicKeyJWK))\r\n\t\t\tjwk[key] = publicKeyJWK[key];\r\n\t\t\r\n\t\treturn jwk;\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"kty\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.kty.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"EC\":\r\n\t\t\t\t\tthis.parsedKey = new ECPublicKey({ json });\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.algorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.10045.2.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"RSA\":\r\n\t\t\t\t\tthis.parsedKey = new RSAPublicKey({ json });\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.algorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Invalid value for \\\"kty\\\" parameter: ${json.kty}`);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.subjectPublicKey = new asn1js.BitString({ valueHex: this.parsedKey.toSchema().toBER(false) });\r\n\t\t}\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\timportKey(publicKey)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial check\r\n\t\tif(typeof publicKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide publicKey input parameter\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Export public key\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.exportKey(\"spki\", publicKey));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize internal variables by parsing exported value\r\n\t\tsequence = sequence.then(exportedKey =>\r\n\t\t{\r\n\t\t\tconst asn1 = asn1js.fromBER(exportedKey);\r\n\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\t_this.fromSchema(asn1.result);\r\n\t\t\t\t}\r\n\t\t\t\tcatch(exception)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Error during initializing object from schema\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\treturn undefined;\r\n\t\t}, error => Promise.reject(`Error during exporting public key: ${error}`)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}