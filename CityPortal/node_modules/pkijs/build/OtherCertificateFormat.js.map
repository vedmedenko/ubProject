{"version":3,"sources":["../src/OtherCertificateFormat.js"],"names":["asn1js","OtherCertificateFormat","parameters","otherCertFormat","defaultValues","otherCert","fromSchema","schema","asn1","compareSchema","verified","Error","result","valueBlock","toString","Sequence","value","ObjectIdentifier","object","Any","toJSON","memberName","names","name","blockName"],"mappings":";;;;;;;;AAAA;;IAAYA,M;;AACZ;;;;;;AACA;AACA;;;IAGqBC,sB;AAEpB;AACA;;;;;AAKA,mCACA;AAAA,MADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;AACA;;;;AAIA,OAAKC,eAAL,GAAuB,iCAAmBD,UAAnB,EAA+B,iBAA/B,EAAkDD,uBAAuBG,aAAvB,CAAqC,iBAArC,CAAlD,CAAvB;AACA;;;;AAIA,OAAKC,SAAL,GAAiB,iCAAmBH,UAAnB,EAA+B,WAA/B,EAA4CD,uBAAuBG,aAAvB,CAAqC,WAArC,CAA5C,CAAjB;AACA;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKI,UAAL,CAAgBJ,WAAWK,MAA3B;AACD;AACA;AACD;AACA;;;;;;;;;AA4CA;AACA;;;;6BAIWA,M,EACX;AACC;AACA,OAAMC,OAAOR,OAAOS,aAAP,CAAqBF,MAArB,EACZA,MADY,EAEZN,uBAAuBM,MAAvB,EAFY,CAAb;;AAKA,OAAGC,KAAKE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,gFAAV,CAAN;AACD;;AAEA;AACA,QAAKR,eAAL,GAAuBK,KAAKI,MAAL,CAAYT,eAAZ,CAA4BU,UAA5B,CAAuCC,QAAvC,EAAvB;AACA,QAAKT,SAAL,GAAiBG,KAAKI,MAAL,CAAYP,SAA7B;AACA;AACA;AACD;AACA;;;;;;;6BAKA;AACC;AACA,UAAQ,IAAIL,OAAOe,QAAX,CAAoB;AAC3BC,WAAO,CACN,IAAIhB,OAAOiB,gBAAX,CAA4B,EAAED,OAAO,KAAKb,eAAd,EAA5B,CADM,EAEN,KAAKE,SAFC;AADoB,IAApB,CAAR;AAMA;AACA;AACD;AACA;;;;;;;2BAKA;AACC,OAAMa,SAAS;AACdf,qBAAiB,KAAKA;AADR,IAAf;;AAIA,OAAG,EAAE,KAAKE,SAAL,YAA0BL,OAAOmB,GAAnC,CAAH,EACCD,OAAOb,SAAP,GAAmB,KAAKA,SAAL,CAAee,MAAf,EAAnB;;AAED,UAAOF,MAAP;AACA;AACD;;;;gCA9FqBG,U,EACrB;AACC,WAAOA,UAAP;AAEC,SAAK,iBAAL;AACC,YAAO,EAAP;AACD,SAAK,WAAL;AACC,YAAO,IAAIrB,OAAOmB,GAAX,EAAP;AACD;AACC,WAAM,IAAIR,KAAJ,4DAAmEU,UAAnE,CAAN;AAPF;AASA;AACD;AACA;;;;;;;;2BAMA;AAAA,OADcnB,UACd,uEAD2B,EAC3B;;AACC;AACA;AACA;;AAEA;;;;;;AAMA,OAAMoB,QAAQ,iCAAmBpB,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAIF,OAAOe,QAAX,CAAoB;AAC3BQ,UAAOD,MAAME,SAAN,IAAmB,EADC;AAE3BR,WAAO,CACN,IAAIhB,OAAOiB,gBAAX,CAA4B,EAAEM,MAAOD,MAAMnB,eAAN,IAAyB,iBAAlC,EAA5B,CADM,EAEN,IAAIH,OAAOmB,GAAX,CAAe,EAAEI,MAAOD,MAAMjB,SAAN,IAAmB,WAA5B,EAAf,CAFM;AAFoB,IAApB,CAAR;AAOA;;;;;AAyDF;;;kBAjIqBJ,sB","file":"OtherCertificateFormat.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OtherCertificateFormat\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherCertificateFormat class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description otherCertFormat\r\n\t\t */\r\n\t\tthis.otherCertFormat = getParametersValue(parameters, \"otherCertFormat\", OtherCertificateFormat.defaultValues(\"otherCertFormat\"));\r\n\t\t/**\r\n\t\t * @type {Any}\r\n\t\t * @description otherCert\r\n\t\t */\r\n\t\tthis.otherCert = getParametersValue(parameters, \"otherCert\", OtherCertificateFormat.defaultValues(\"otherCert\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"otherCertFormat\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"otherCert\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherCertificateFormat class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//OtherCertificateFormat ::= SEQUENCE {\r\n\t\t//    otherCertFormat OBJECT IDENTIFIER,\r\n\t\t//    otherCert ANY DEFINED BY otherCertFormat }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [otherCertFormat]\r\n\t\t * @property {string} [otherCert]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.otherCertFormat || \"otherCertFormat\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.otherCert || \"otherCert\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherCertificateFormat.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherCertificateFormat\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.otherCertFormat = asn1.result.otherCertFormat.valueBlock.toString();\r\n\t\tthis.otherCert = asn1.result.otherCert;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.otherCertFormat }),\r\n\t\t\t\tthis.otherCert\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\totherCertFormat: this.otherCertFormat\r\n\t\t};\r\n\r\n\t\tif(!(this.otherCert instanceof asn1js.Any))\r\n\t\t\tobject.otherCert = this.otherCert.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}