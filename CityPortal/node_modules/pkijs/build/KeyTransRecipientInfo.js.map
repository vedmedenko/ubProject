{"version":3,"sources":["../src/KeyTransRecipientInfo.js"],"names":["asn1js","KeyTransRecipientInfo","parameters","version","defaultValues","rid","keyEncryptionAlgorithm","encryptedKey","recipientCertificate","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","idBlock","tagClass","value","outputArray","push","Integer","toSchema","Constructed","tagNumber","Sequence","toJSON","memberName","OctetString","memberValue","Object","keys","length","isEqual","name"],"mappings":"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","file":"KeyTransRecipientInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport RecipientIdentifier from \"./RecipientIdentifier.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class KeyTransRecipientInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KeyTransRecipientInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", KeyTransRecipientInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {RecipientIdentifier}\r\n\t\t * @description rid\r\n\t\t */\r\n\t\tthis.rid = getParametersValue(parameters, \"rid\", KeyTransRecipientInfo.defaultValues(\"rid\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KeyTransRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", KeyTransRecipientInfo.defaultValues(\"encryptedKey\"));\r\n\t\t/**\r\n\t\t * @type {Certificate}\r\n\t\t * @description recipientCertificate For some reasons we need to store recipient's certificate here\r\n\t\t */\r\n\t\tthis.recipientCertificate = getParametersValue(parameters, \"recipientCertificate\", KeyTransRecipientInfo.defaultValues(\"recipientCertificate\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"rid\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"recipientCertificate\":\r\n\t\t\t\treturn new Certificate();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyTransRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === KeyTransRecipientInfo.defaultValues(\"version\"));\r\n\t\t\tcase \"rid\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn memberValue.isEqual(KeyTransRecipientInfo.defaultValues(memberName));\r\n\t\t\tcase \"recipientCertificate\":\r\n\t\t\t\treturn false; // For now we do not need to compare any values with the \"recipientCertificate\"\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyTransRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//KeyTransRecipientInfo ::= SEQUENCE {\r\n\t\t//    version CMSVersion,  -- always set to 0 or 2\r\n\t\t//    rid RecipientIdentifier,\r\n\t\t//    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t\t//    encryptedKey EncryptedKey }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [rid]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tRecipientIdentifier.schema(names.rid || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKeyTransRecipientInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\trid: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"rid\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KeyTransRecipientInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\r\n\t\tif(asn1.result.rid.idBlock.tagClass === 3)\r\n\t\t\tthis.rid = asn1.result.rid.valueBlock.value[0]; // SubjectKeyIdentifier\r\n\t\telse\r\n\t\t\tthis.rid = new IssuerAndSerialNumber({ schema: asn1.result.rid });\r\n\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(this.rid instanceof IssuerAndSerialNumber)\r\n\t\t{\r\n\t\t\tthis.version = 0;\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\toutputArray.push(this.rid.toSchema());\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.version = 2;\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.rid]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(this.keyEncryptionAlgorithm.toSchema());\r\n\t\toutputArray.push(this.encryptedKey);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tversion: this.version,\r\n\t\t\trid: this.rid.toJSON(),\r\n\t\t\tkeyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}