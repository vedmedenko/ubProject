{"version":3,"sources":["../src/EncapsulatedContentInfo.js"],"names":["asn1js","EncapsulatedContentInfo","parameters","eContentType","defaultValues","eContent","idBlock","tagClass","tagNumber","isConstructed","constrString","OctetString","offset","length","valueBlock","valueHex","byteLength","pieceView","Uint8Array","_array","ArrayBuffer","_view","i","value","push","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","toString","outputArray","ObjectIdentifier","compareWithDefault","Constructed","optional","Sequence","_object","toJSON","memberName","memberValue","isEqual","name","blockName","Any"],"mappings":"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","file":"EncapsulatedContentInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EncapsulatedContentInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncapsulatedContentInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description eContentType\r\n\t\t */\r\n\t\tthis.eContentType = getParametersValue(parameters, \"eContentType\", EncapsulatedContentInfo.defaultValues(\"eContentType\"));\r\n\r\n\t\tif(\"eContent\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @description eContent\r\n\t\t\t */\r\n\t\t\tthis.eContent = getParametersValue(parameters, \"eContent\", EncapsulatedContentInfo.defaultValues(\"eContent\"));\r\n\t\t\tif((this.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t(this.eContent.idBlock.tagNumber === 4))\r\n\t\t\t{\r\n\t\t\t\t//region Divide OCTETSTRING value down to small pieces\r\n\t\t\t\tif(this.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst constrString = new asn1js.OctetString({\r\n\t\t\t\t\t\tidBlock: { isConstructed: true },\r\n\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet offset = 0;\r\n\t\t\t\t\tlet length = this.eContent.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\twhile(length > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst pieceView = new Uint8Array(this.eContent.valueBlock.valueHex, offset, ((offset + 65536) > this.eContent.valueBlock.valueHex.byteLength) ? (this.eContent.valueBlock.valueHex.byteLength - offset) : 65536);\r\n\t\t\t\t\t\tconst _array = new ArrayBuffer(pieceView.length);\r\n\t\t\t\t\t\tconst _view = new Uint8Array(_array);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(let i = 0; i < _view.length; i++)\r\n\t\t\t\t\t\t\t_view[i] = pieceView[i];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconstrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlength -= pieceView.length;\r\n\t\t\t\t\t\toffset += pieceView.length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.eContent = constrString;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"eContentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"eContent\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncapsulatedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"eContentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"eContent\":\r\n\t\t\t\t{\r\n\t\t\t\t\tif((memberValue.idBlock.tagClass === 1) && (memberValue.idBlock.tagNumber === 4))\r\n\t\t\t\t\t\treturn (memberValue.isEqual(EncapsulatedContentInfo.defaultValues(\"eContent\")));\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncapsulatedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//EncapsulatedContentInfo ::= SEQUENCE {\r\n\t\t//    eContentType ContentType,\r\n\t\t//    eContent [0] EXPLICIT OCTET STRING OPTIONAL } // Changed it to ANY, as in PKCS#7\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.eContentType || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Any({ name: (names.eContent || \"\") }) // In order to aling this with PKCS#7 and CMS as well\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncapsulatedContentInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\teContentType: \"eContentType\",\r\n\t\t\t\t\teContent: \"eContent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EncapsulatedContentInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.eContentType = asn1.result.eContentType.valueBlock.toString();\r\n\t\tif(\"eContent\" in asn1.result)\r\n\t\t\tthis.eContent = asn1.result.eContent;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.eContentType }));\r\n\t\tif(\"eContent\" in this)\r\n\t\t{\r\n\t\t\tif(EncapsulatedContentInfo.compareWithDefault(\"eContent\", this.eContent) === false)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.eContent]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\teContentType: this.eContentType\r\n\t\t};\r\n\r\n\t\tif(\"eContent\" in this)\r\n\t\t{\r\n\t\t\tif(EncapsulatedContentInfo.compareWithDefault(\"eContent\", this.eContent) === false)\r\n\t\t\t\t_object.eContent = this.eContent.toJSON();\r\n\t\t}\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}