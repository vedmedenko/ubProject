{"version":3,"sources":["../src/PasswordRecipientinfo.js"],"names":["asn1js","PasswordRecipientinfo","parameters","version","defaultValues","keyDerivationAlgorithm","keyEncryptionAlgorithm","encryptedKey","password","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","idBlock","tagClass","tagNumber","outputArray","push","Integer","value","Constructed","toSchema","Sequence","toJSON","memberName","OctetString","ArrayBuffer","memberValue","algorithmId","isEqual","byteLength","name","optional"],"mappings":"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","file":"PasswordRecipientinfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class PasswordRecipientinfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PasswordRecipientinfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PasswordRecipientinfo.defaultValues(\"version\"));\r\n\r\n\t\tif(\"keyDerivationAlgorithm\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {AlgorithmIdentifier}\r\n\t\t\t * @description keyDerivationAlgorithm\r\n\t\t\t */\r\n\t\t\tthis.keyDerivationAlgorithm = getParametersValue(parameters, \"keyDerivationAlgorithm\", PasswordRecipientinfo.defaultValues(\"keyDerivationAlgorithm\"));\r\n\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", PasswordRecipientinfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", PasswordRecipientinfo.defaultValues(\"encryptedKey\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description password Password to derive key from\r\n\t\t */\r\n\t\tthis.password = getParametersValue(parameters, \"password\", PasswordRecipientinfo.defaultValues(\"password\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"keyDerivationAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"password\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PasswordRecipientinfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === (-1));\r\n\t\t\tcase \"keyDerivationAlgorithm\":\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn (memberValue.isEqual(PasswordRecipientinfo.defaultValues(\"encryptedKey\")));\r\n\t\t\tcase \"password\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PasswordRecipientinfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//PasswordRecipientInfo ::= SEQUENCE {\r\n\t\t//    version CMSVersion,   -- Always set to 0\r\n\t\t//    keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier OPTIONAL,\r\n\t\t//    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t\t//    encryptedKey EncryptedKey }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyDerivationAlgorithm]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.keyDerivationAlgorithm || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: AlgorithmIdentifier.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPasswordRecipientinfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tkeyDerivationAlgorithm: \"keyDerivationAlgorithm\",\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PasswordRecipientinfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\r\n\t\tif(\"keyDerivationAlgorithm\" in asn1.result)\r\n\t\t{\r\n\t\t\tasn1.result.keyDerivationAlgorithm.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\tasn1.result.keyDerivationAlgorithm.idBlock.tagNumber = 16; // SEQUENCE\r\n\r\n\t\t\tthis.keyDerivationAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyDerivationAlgorithm });\r\n\t\t}\r\n\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create output array for sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\r\n\t\tif(\"keyDerivationAlgorithm\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.keyDerivationAlgorithm.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\toutputArray.push(this.keyEncryptionAlgorithm.toSchema());\r\n\t\toutputArray.push(this.encryptedKey);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tversion: this.version,\r\n\t\t\tkeyDerivationAlgorithm: this.keyDerivationAlgorithm.toJSON(),\r\n\t\t\tkeyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}