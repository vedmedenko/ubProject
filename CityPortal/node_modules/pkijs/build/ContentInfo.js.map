{"version":3,"sources":["../src/ContentInfo.js"],"names":["asn1js","ContentInfo","parameters","contentType","defaultValues","content","fromSchema","schema","asn1","compareSchema","verified","Error","result","valueBlock","toString","Sequence","value","ObjectIdentifier","Constructed","idBlock","tagClass","tagNumber","object","Any","toJSON","memberName","memberValue","names","optional","name","blockName"],"mappings":"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","file":"ContentInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class ContentInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ContentInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description contentType\r\n\t\t */\r\n\t\tthis.contentType = getParametersValue(parameters, \"contentType\", ContentInfo.defaultValues(\"contentType\"));\r\n\t\t/**\r\n\t\t * @type {Any}\r\n\t\t * @description content\r\n\t\t */\r\n\t\tthis.content = getParametersValue(parameters, \"content\", ContentInfo.defaultValues(\"content\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"content\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"content\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//ContentInfo ::= SEQUENCE {\r\n\t\t//    contentType ContentType,\r\n\t\t//    content [0] EXPLICIT ANY DEFINED BY contentType }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentType]\r\n\t\t * @property {string} [content]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\tif((\"optional\" in names) === false)\r\n\t\t\tnames.optional = false;\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"ContentInfo\"),\r\n\t\t\toptional: names.optional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.contentType || \"contentType\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.content || \"content\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tContentInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CMS_CONTENT_INFO\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.contentType = asn1.result.contentType.valueBlock.toString();\r\n\t\tthis.content = asn1.result.content;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.contentType }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.content] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tcontentType: this.contentType\r\n\t\t};\r\n\r\n\t\tif(!(this.content instanceof asn1js.Any))\r\n\t\t\tobject.content = this.content.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}