{"version":3,"sources":["../src/AuthorityKeyIdentifier.js"],"names":["asn1js","AuthorityKeyIdentifier","parameters","keyIdentifier","defaultValues","authorityCertIssuer","authorityCertSerialNumber","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","OctetString","valueHex","valueBlock","Array","from","element","Integer","outputArray","value","idBlock","tagClass","tagNumber","push","Constructed","optional","toSchema","Sequence","object","toJSON","memberName","name","blockName","Primitive","Repeated"],"mappings":"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","file":"AuthorityKeyIdentifier.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AuthorityKeyIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AuthorityKeyIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"keyIdentifier\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @description keyIdentifier\r\n\t\t\t */\r\n\t\t\tthis.keyIdentifier = getParametersValue(parameters, \"keyIdentifier\", AuthorityKeyIdentifier.defaultValues(\"keyIdentifier\"));\r\n\r\n\t\tif(\"authorityCertIssuer\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralName>}\r\n\t\t\t * @description authorityCertIssuer\r\n\t\t\t */\r\n\t\t\tthis.authorityCertIssuer = getParametersValue(parameters, \"authorityCertIssuer\", AuthorityKeyIdentifier.defaultValues(\"authorityCertIssuer\"));\r\n\r\n\t\tif(\"authorityCertSerialNumber\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Integer}\r\n\t\t\t * @description authorityCertIssuer\r\n\t\t\t */\r\n\t\t\tthis.authorityCertSerialNumber = getParametersValue(parameters, \"authorityCertSerialNumber\", AuthorityKeyIdentifier.defaultValues(\"authorityCertSerialNumber\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyIdentifier\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"authorityCertIssuer\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"authorityCertSerialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AuthorityKeyIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// AuthorityKeyIdentifier OID ::= 2.5.29.35\r\n\t\t//\r\n\t\t//AuthorityKeyIdentifier ::= SEQUENCE {\r\n\t\t//    keyIdentifier             [0] KeyIdentifier           OPTIONAL,\r\n\t\t//    authorityCertIssuer       [1] GeneralNames            OPTIONAL,\r\n\t\t//    authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }\r\n\t\t//\r\n\t\t//KeyIdentifier ::= OCTET STRING\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyIdentifier]\r\n\t\t * @property {string} [authorityCertIssuer]\r\n\t\t * @property {string} [authorityCertSerialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.keyIdentifier || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.authorityCertIssuer || \"\"),\r\n\t\t\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.authorityCertSerialNumber || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAuthorityKeyIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyIdentifier: \"keyIdentifier\",\r\n\t\t\t\t\tauthorityCertIssuer: \"authorityCertIssuer\",\r\n\t\t\t\t\tauthorityCertSerialNumber: \"authorityCertSerialNumber\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AuthorityKeyIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"keyIdentifier\" in asn1.result)\r\n\t\t\tthis.keyIdentifier = new asn1js.OctetString({ valueHex: asn1.result.keyIdentifier.valueBlock.valueHex });\r\n\r\n\t\tif(\"authorityCertIssuer\" in asn1.result)\r\n\t\t\tthis.authorityCertIssuer = Array.from(asn1.result.authorityCertIssuer, element => new GeneralName({ schema: element }));\r\n\r\n\t\tif(\"authorityCertSerialNumber\" in asn1.result)\r\n\t\t\tthis.authorityCertSerialNumber = new asn1js.Integer({ valueHex: asn1.result.authorityCertSerialNumber.valueBlock.valueHex });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"keyIdentifier\" in this)\r\n\t\t{\r\n\t\t\tconst value = this.keyIdentifier;\r\n\t\t\t\r\n\t\t\tvalue.idBlock.tagClass = 3; // CONTEXT-SPECIFIC\r\n\t\t\tvalue.idBlock.tagNumber = 0; // [0]\r\n\t\t\t\r\n\t\t\toutputArray.push(value);\r\n\t\t}\r\n\t\t\r\n\t\tif(\"authorityCertIssuer\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.authorityCertIssuer, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"authorityCertSerialNumber\" in this)\r\n\t\t{\r\n\t\t\tconst value = this.authorityCertSerialNumber;\r\n\t\t\t\r\n\t\t\tvalue.idBlock.tagClass = 3; // CONTEXT-SPECIFIC\r\n\t\t\tvalue.idBlock.tagNumber = 2; // [2]\r\n\t\t\t\r\n\t\t\toutputArray.push(value);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(\"keyIdentifier\" in this)\r\n\t\t\tobject.keyIdentifier = this.keyIdentifier.toJSON();\r\n\r\n\t\tif(\"authorityCertIssuer\" in this)\r\n\t\t\tobject.authorityCertIssuer = Array.from(this.authorityCertIssuer, element => element.toJSON());\r\n\r\n\t\tif(\"authorityCertSerialNumber\" in this)\r\n\t\t\tobject.authorityCertSerialNumber = this.authorityCertSerialNumber.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}