{"version":3,"sources":["../src/MacData.js"],"names":["asn1js","MacData","parameters","mac","defaultValues","macSalt","iterations","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","outputArray","toSchema","push","Integer","value","Sequence","output","toJSON","memberName","OctetString","memberValue","compareWithDefault","digestAlgorithm","digest","isEqual","name","optional"],"mappings":"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","file":"MacData.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport DigestInfo from \"./DigestInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class MacData \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for MacData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {DigestInfo}\r\n\t\t * @description mac\r\n\t\t */\r\n\t\tthis.mac = getParametersValue(parameters, \"mac\", MacData.defaultValues(\"mac\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description macSalt\r\n\t\t */\r\n\t\tthis.macSalt = getParametersValue(parameters, \"macSalt\", MacData.defaultValues(\"macSalt\"));\r\n\t\t\r\n\t\tif(\"iterations\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @description iterations\r\n\t\t\t */\r\n\t\t\tthis.iterations = getParametersValue(parameters, \"iterations\", MacData.defaultValues(\"iterations\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"mac\":\r\n\t\t\t\treturn new DigestInfo();\r\n\t\t\tcase \"macSalt\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"iterations\":\r\n\t\t\t\treturn 1;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for MacData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"mac\":\r\n\t\t\t\treturn ((DigestInfo.compareWithDefault(\"digestAlgorithm\", memberValue.digestAlgorithm)) &&\r\n\t\t\t\t(DigestInfo.compareWithDefault(\"digest\", memberValue.digest)));\r\n\t\t\tcase \"macSalt\":\r\n\t\t\t\treturn (memberValue.isEqual(MacData.defaultValues(memberName)));\r\n\t\t\tcase \"iterations\":\r\n\t\t\t\treturn (memberValue === MacData.defaultValues(memberName));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for MacData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//MacData ::= SEQUENCE {\r\n\t\t//    mac \t\tDigestInfo,\r\n\t\t//    macSalt       OCTET STRING,\r\n\t\t//    iterations\tINTEGER DEFAULT 1\r\n\t\t//    -- Note: The default is for historical reasons and its use is\r\n\t\t//    -- deprecated. A higher value, like 1024 is recommended.\r\n\t\t//    }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [mac]\r\n\t\t * @property {string} [macSalt]\r\n\t\t * @property {string} [iterations]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || true),\r\n\t\t\tvalue: [\r\n\t\t\t\tDigestInfo.schema(names.mac || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"mac\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.macSalt || \"macSalt\") }),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.iterations || \"iterations\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tMacData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tmac: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"mac\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmacSalt: \"macSalt\",\r\n\t\t\t\t\titerations: \"iterations\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for MacData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.mac = new DigestInfo({ schema: asn1.result.mac });\r\n\t\tthis.macSalt = asn1.result.macSalt;\r\n\t\t\r\n\t\tif(\"iterations\" in asn1.result)\r\n\t\t\tthis.iterations = asn1.result.iterations.valueBlock.valueDec;\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tconst outputArray = [\r\n\t\t\tthis.mac.toSchema(),\r\n\t\t\tthis.macSalt\r\n\t\t];\r\n\t\t\r\n\t\tif(\"iterations\" in this)\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.iterations }));\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst output = {\r\n\t\t\tmac: this.mac.toJSON(),\r\n\t\t\tmacSalt: this.macSalt.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"iterations\" in this)\r\n\t\t\toutput.iterations = this.iterations.toJSON();\r\n\t\t\r\n\t\treturn output;\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}