{"version":3,"sources":["../src/TSTInfo.js"],"names":["asn1js","TSTInfo","parameters","version","defaultValues","policy","messageImprint","serialNumber","genTime","accuracy","ordering","nonce","tsa","extensions","fromSchema","schema","asn1","compareSchema","verified","Error","result","valueBlock","valueDec","toString","toDate","value","Array","from","element","outputArray","push","Integer","ObjectIdentifier","toSchema","GeneralizedTime","valueDate","Boolean","Constructed","optional","idBlock","tagClass","tagNumber","Sequence","_object","toJSON","sequence","Promise","resolve","data","notBefore","notAfter","crypto","reject","shaAlgorithm","hashAlgorithm","algorithmId","then","digest","name","Uint8Array","hashedMessage","valueHex","memberName","Date","memberValue","compareWithDefault","isEqual","seconds","millis","micros","type","length","names","blockName","Repeated","extension"],"mappings":"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","file":"TSTInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer } from \"pvutils\";\r\nimport { getCrypto, getAlgorithmByOID } from \"./common.js\";\r\nimport MessageImprint from \"./MessageImprint.js\";\r\nimport Accuracy from \"./Accuracy.js\";\r\nimport GeneralName from \"./GeneralName.js\";\r\nimport Extension from \"./Extension.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class TSTInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TSTInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", TSTInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description policy\r\n\t\t */\r\n\t\tthis.policy = getParametersValue(parameters, \"policy\", TSTInfo.defaultValues(\"policy\"));\r\n\t\t/**\r\n\t\t * @type {MessageImprint}\r\n\t\t * @description messageImprint\r\n\t\t */\r\n\t\tthis.messageImprint = getParametersValue(parameters, \"messageImprint\", TSTInfo.defaultValues(\"messageImprint\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", TSTInfo.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @description genTime\r\n\t\t */\r\n\t\tthis.genTime = getParametersValue(parameters, \"genTime\", TSTInfo.defaultValues(\"genTime\"));\r\n\r\n\t\tif(\"accuracy\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Accuracy}\r\n\t\t\t * @description accuracy\r\n\t\t\t */\r\n\t\t\tthis.accuracy = getParametersValue(parameters, \"accuracy\", TSTInfo.defaultValues(\"accuracy\"));\r\n\r\n\t\tif(\"ordering\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {boolean}\r\n\t\t\t * @description ordering\r\n\t\t\t */\r\n\t\t\tthis.ordering = getParametersValue(parameters, \"ordering\", TSTInfo.defaultValues(\"ordering\"));\r\n\r\n\t\tif(\"nonce\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Integer}\r\n\t\t\t * @description nonce\r\n\t\t\t */\r\n\t\t\tthis.nonce = getParametersValue(parameters, \"nonce\", TSTInfo.defaultValues(\"nonce\"));\r\n\r\n\t\tif(\"tsa\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralName}\r\n\t\t\t * @description tsa\r\n\t\t\t */\r\n\t\t\tthis.tsa = getParametersValue(parameters, \"tsa\", TSTInfo.defaultValues(\"tsa\"));\r\n\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @description extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", TSTInfo.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"policy\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn new MessageImprint();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"genTime\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tcase \"accuracy\":\r\n\t\t\t\treturn new Accuracy();\r\n\t\t\tcase \"ordering\":\r\n\t\t\t\treturn false;\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"tsa\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TSTInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\tcase \"policy\":\r\n\t\t\tcase \"genTime\":\r\n\t\t\tcase \"ordering\":\r\n\t\t\t\treturn (memberValue === TSTInfo.defaultValues(memberName));\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn ((MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n\t\t\t\t\t\t(MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage)));\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn (memberValue.isEqual(TSTInfo.defaultValues(memberName)));\r\n\t\t\tcase \"accuracy\":\r\n\t\t\t\treturn ((Accuracy.compareWithDefault(\"seconds\", memberValue.seconds)) &&\r\n\t\t\t\t\t\t(Accuracy.compareWithDefault(\"millis\", memberValue.millis)) &&\r\n\t\t\t\t\t\t(Accuracy.compareWithDefault(\"micros\", memberValue.micros)));\r\n\t\t\tcase \"tsa\":\r\n\t\t\t\treturn ((GeneralName.compareWithDefault(\"type\", memberValue.type)) &&\r\n\t\t\t\t\t\t(GeneralName.compareWithDefault(\"value\", memberValue.value)));\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TSTInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//TSTInfo ::= SEQUENCE  {\r\n\t\t//   version                      INTEGER  { v1(1) },\r\n\t\t//   policy                       TSAPolicyId,\r\n\t\t//   messageImprint               MessageImprint,\r\n\t\t//   serialNumber                 INTEGER,\r\n\t\t//   genTime                      GeneralizedTime,\r\n\t\t//   accuracy                     Accuracy                 OPTIONAL,\r\n\t\t//   ordering                     BOOLEAN             DEFAULT FALSE,\r\n\t\t//   nonce                        INTEGER                  OPTIONAL,\r\n\t\t//   tsa                          [0] GeneralName          OPTIONAL,\r\n\t\t//   extensions                   [1] IMPLICIT Extensions  OPTIONAL  }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [policy]\r\n\t\t * @property {string} [messageImprint]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t * @property {string} [genTime]\r\n\t\t * @property {string} [accuracy]\r\n\t\t * @property {string} [ordering]\r\n\t\t * @property {string} [nonce]\r\n\t\t * @property {string} [tsa]\r\n\t\t * @property {string} [extensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TSTInfo\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"TSTInfo.version\") }),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.policy || \"TSTInfo.policy\") }),\r\n\t\t\t\tMessageImprint.schema(names.messageImprint || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TSTInfo.messageImprint\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"TSTInfo.serialNumber\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.genTime || \"TSTInfo.genTime\") }),\r\n\t\t\t\tAccuracy.schema(names.accuracy || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TSTInfo.accuracy\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Boolean({\r\n\t\t\t\t\tname: (names.ordering || \"TSTInfo.ordering\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\tname: (names.nonce || \"TSTInfo.nonce\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [GeneralName.schema(names.tsa || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"TSTInfo.tsa\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.extensions || \"TSTInfo.extensions\"),\r\n\t\t\t\t\t\t\tvalue: Extension.schema(names.extension || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}) // IMPLICIT Extensions\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTSTInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TST_INFO\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"TSTInfo.version\"].valueBlock.valueDec;\r\n\t\tthis.policy = asn1.result[\"TSTInfo.policy\"].valueBlock.toString();\r\n\t\tthis.messageImprint = new MessageImprint({ schema: asn1.result[\"TSTInfo.messageImprint\"] });\r\n\t\tthis.serialNumber = asn1.result[\"TSTInfo.serialNumber\"];\r\n\t\tthis.genTime = asn1.result[\"TSTInfo.genTime\"].toDate();\r\n\t\tif(\"TSTInfo.accuracy\" in asn1.result)\r\n\t\t\tthis.accuracy = new Accuracy({ schema: asn1.result[\"TSTInfo.accuracy\"] });\r\n\t\tif(\"TSTInfo.ordering\" in asn1.result)\r\n\t\t\tthis.ordering = asn1.result[\"TSTInfo.ordering\"].valueBlock.value;\r\n\t\tif(\"TSTInfo.nonce\" in asn1.result)\r\n\t\t\tthis.nonce = asn1.result[\"TSTInfo.nonce\"];\r\n\t\tif(\"TSTInfo.tsa\" in asn1.result)\r\n\t\t\tthis.tsa = new GeneralName({ schema: asn1.result[\"TSTInfo.tsa\"] });\r\n\t\tif(\"TSTInfo.extensions\" in asn1.result)\r\n\t\t\tthis.extensions = Array.from(asn1.result[\"TSTInfo.extensions\"], element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.policy }));\r\n\t\toutputArray.push(this.messageImprint.toSchema());\r\n\t\toutputArray.push(this.serialNumber);\r\n\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.genTime }));\r\n\t\tif(\"accuracy\" in this)\r\n\t\t\toutputArray.push(this.accuracy.toSchema());\r\n\t\tif(\"ordering\" in this)\r\n\t\t\toutputArray.push(new asn1js.Boolean({ value: this.ordering }));\r\n\t\tif(\"nonce\" in this)\r\n\t\t\toutputArray.push(this.nonce);\r\n\t\tif(\"tsa\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.tsa.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\t//region Create array of extensions\r\n\t\tif(\"extensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tpolicy: this.policy,\r\n\t\t\tmessageImprint: this.messageImprint.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON(),\r\n\t\t\tgenTime: this.genTime\r\n\t\t};\r\n\r\n\t\tif(\"accuracy\" in this)\r\n\t\t\t_object.accuracy = this.accuracy.toJSON();\r\n\r\n\t\tif(\"ordering\" in this)\r\n\t\t\t_object.ordering = this.ordering;\r\n\r\n\t\tif(\"nonce\" in this)\r\n\t\t\t_object.nonce = this.nonce.toJSON();\r\n\r\n\t\tif(\"tsa\" in this)\r\n\t\t\t_object.tsa = this.tsa.toJSON();\r\n\r\n\t\tif(\"extensions\" in this)\r\n\t\t\t_object.extensions = Array.from(this.extensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current TST Info value\r\n\t * @param {{data: ArrayBuffer, notBefore: Date, notAfter: Date}} parameters Input parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tlet data;\r\n\r\n\t\tlet notBefore;\r\n\t\tlet notAfter;\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get initial parameters\r\n\t\tif(\"data\" in parameters)\r\n\t\t\tdata = parameters.data;\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"\\\"data\\\" is a mandatory attribute for TST_INFO verification\");\r\n\r\n\t\tif(\"notBefore\" in parameters)\r\n\t\t\tnotBefore = parameters.notBefore;\r\n\r\n\t\tif(\"notAfter\" in parameters)\r\n\t\t\tnotAfter = parameters.notAfter;\r\n\t\t//endregion\r\n\r\n\t\t//region Find hashing algorithm\r\n\t\tconst shaAlgorithm = getAlgorithmByOID(this.messageImprint.hashAlgorithm.algorithmId);\r\n\t\tif((\"name\" in shaAlgorithm) === false)\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.messageImprint.hashAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Calculate message digest for input \"data\" buffer\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.digest(shaAlgorithm.name, new Uint8Array(data))\r\n\t\t).then(result =>\r\n\t\t\tisEqualBuffer(result, this.messageImprint.hashedMessage.valueBlock.valueHex)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}