{"version":3,"sources":["../src/CryptoEngine.js"],"names":["asn1js","makePKCS12B2Key","cryptoEngine","hashAlgorithm","keyLength","password","salt","iterationCount","u","v","result","toUpperCase","Error","passwordViewInitial","Uint8Array","passwordTransformed","ArrayBuffer","byteLength","passwordTransformedView","i","length","slice","D","dView","saltLength","sLen","Math","ceil","S","sView","saltView","passwordLength","pLen","P","pView","passwordView","sPlusPLength","I","iView","set","c","internalSequence","Promise","resolve","then","dAndI","_I","dAndIView","j","digest","name","roundBuffer","B","bView","k","iRound","sliceStart","sliceLength","chunk","Array","from","x","l","push","resultBuffer","resultView","CryptoEngine","parameters","crypto","subtle","format","keyData","algorithm","extractable","keyUsages","jwk","buffer","toLowerCase","importKey","asn1","fromBER","offset","reject","publicKeyInfo","fromSchema","ex","hash","alg","kty","ext","key_ops","algorithmId","publicKeyJSON","toJSON","Object","keys","key","privateKeyInfo","privateKeyAlgorithm","privateKeyJSON","JSON","stringify","sequence","exportKey","parse","fromJSON","toSchema","toBER","inputFormat","outputFormat","encrypt","decrypt","sign","verify","generateKey","deriveKey","deriveBits","wrapKey","unwrapKey","view","getRandomValues","oid","kdf","algorithmName","operation","usages","modulusLength","publicExponent","namedCurve","public","counter","iv","info","iterations","signatureAlgorithm","params","schema","algorithmParams","getAlgorithmByOID","contentEncryptionOID","getOIDByAlgorithm","contentEncryptionAlgorithm","pbkdf2OID","hmacOID","hmacHashAlgorithm","ivBuffer","ivView","saltBuffer","contentView","contentToEncrypt","pbkdf2Params","OctetString","valueHex","prf","Null","error","pbes2Parameters","keyDerivationFunc","encryptionScheme","contentType","encryptedContent","encryptedContentInfo","valueBlock","dataBuffer","idBlock","isConstructed","value","content","hmacAlgorithm","contentToStamp","signatureToVerify","contentToVerify","privateKey","getAlgorithmParameters","paramsObject","hashAlgorithmOID","maskGenAlgorithm","pssParameters","data","shaAlgorithm","getHashAlgorithm","algorithmObject","algorithmParamsChecked","tagClass","tagNumber","curveObject","toString","fillPublicKeyParameters","publicKeyInfoSchema","publicKeyInfoBuffer","publicKeyInfoView","signature","getPublicKey","publicKey","signatureValue","hashAlgo"],"mappings":";;;;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AACA;AACA;;;AAGA,SAASC,eAAT,CAAyBC,YAAzB,EAAuCC,aAAvC,EAAsDC,SAAtD,EAAiEC,QAAjE,EAA2EC,IAA3E,EAAiFC,cAAjF,EACA;AACC;AACA,KAAIC,UAAJ;AACA,KAAIC,UAAJ;;AAEA,KAAMC,SAAS,EAAf;AACA;;AAEA;AACA,SAAOP,cAAcQ,WAAd,EAAP;AAEC,OAAK,OAAL;AACCH,OAAI,EAAJ,CADD,CACS;AACRC,OAAI,EAAJ,CAFD,CAES;AACR;AACD,OAAK,SAAL;AACCD,OAAI,EAAJ,CADD,CACS;AACRC,OAAI,EAAJ,CAFD,CAES;AACR;AACD,OAAK,SAAL;AACCD,OAAI,EAAJ,CADD,CACS;AACRC,OAAI,GAAJ,CAFD,CAEU;AACT;AACD,OAAK,SAAL;AACCD,OAAI,EAAJ,CADD,CACS;AACRC,OAAI,GAAJ,CAFD,CAEU;AACT;AACD;AACC,SAAM,IAAIG,KAAJ,CAAU,+BAAV,CAAN;AAnBF;AAqBA;;AAEA;AACA;AACA,KAAMC,sBAAsB,IAAIC,UAAJ,CAAeT,QAAf,CAA5B;;AAEA,KAAMU,sBAAsB,IAAIC,WAAJ,CAAiBX,SAASY,UAAT,GAAsB,CAAvB,GAA4B,CAA5C,CAA5B;AACA,KAAMC,0BAA0B,IAAIJ,UAAJ,CAAeC,mBAAf,CAAhC;;AAEA,MAAI,IAAII,IAAI,CAAZ,EAAeA,IAAIN,oBAAoBO,MAAvC,EAA+CD,GAA/C,EACA;AACCD,0BAAwBC,IAAI,CAA5B,IAAiC,IAAjC;AACAD,0BAAwBC,IAAI,CAAJ,GAAQ,CAAhC,IAAqCN,oBAAoBM,CAApB,CAArC;AACA;;AAEDD,yBAAwBA,wBAAwBE,MAAxB,GAAiC,CAAzD,IAA8D,IAA9D;AACAF,yBAAwBA,wBAAwBE,MAAxB,GAAiC,CAAzD,IAA8D,IAA9D;;AAEAf,YAAWU,oBAAoBM,KAApB,CAA0B,CAA1B,CAAX;AACA;;AAEA;AACA,KAAMC,IAAI,IAAIN,WAAJ,CAAgBP,CAAhB,CAAV;AACA,KAAMc,QAAQ,IAAIT,UAAJ,CAAeQ,CAAf,CAAd;;AAEA,MAAI,IAAIH,KAAI,CAAZ,EAAeA,KAAIG,EAAEL,UAArB,EAAiCE,IAAjC;AACCI,QAAMJ,EAAN,IAAW,CAAX;AADD,EAvDD,CAwDgB;AACf;;AAEA;AACA,KAAMK,aAAalB,KAAKW,UAAxB;;AAEA,KAAMQ,OAAOhB,IAAIiB,KAAKC,IAAL,CAAUH,aAAaf,CAAvB,CAAjB;AACA,KAAMmB,IAAI,IAAIZ,WAAJ,CAAgBS,IAAhB,CAAV;AACA,KAAMI,QAAQ,IAAIf,UAAJ,CAAec,CAAf,CAAd;;AAEA,KAAME,WAAW,IAAIhB,UAAJ,CAAeR,IAAf,CAAjB;;AAEA,MAAI,IAAIa,MAAI,CAAZ,EAAeA,MAAIM,IAAnB,EAAyBN,KAAzB;AACCU,QAAMV,GAAN,IAAWW,SAASX,MAAIK,UAAb,CAAX;AADD,EApED,CAsEC;;AAEA;AACA,KAAMO,iBAAiB1B,SAASY,UAAhC;;AAEA,KAAMe,OAAOvB,IAAIiB,KAAKC,IAAL,CAAUI,iBAAiBtB,CAA3B,CAAjB;AACA,KAAMwB,IAAI,IAAIjB,WAAJ,CAAgBgB,IAAhB,CAAV;AACA,KAAME,QAAQ,IAAIpB,UAAJ,CAAemB,CAAf,CAAd;;AAEA,KAAME,eAAe,IAAIrB,UAAJ,CAAeT,QAAf,CAArB;;AAEA,MAAI,IAAIc,MAAI,CAAZ,EAAeA,MAAIa,IAAnB,EAAyBb,KAAzB;AACCe,QAAMf,GAAN,IAAWgB,aAAahB,MAAIY,cAAjB,CAAX;AADD,EAjFD,CAmFC;;AAEA;AACA,KAAMK,eAAeR,EAAEX,UAAF,GAAegB,EAAEhB,UAAtC;;AAEA,KAAIoB,IAAI,IAAIrB,WAAJ,CAAgBoB,YAAhB,CAAR;AACA,KAAIE,QAAQ,IAAIxB,UAAJ,CAAeuB,CAAf,CAAZ;;AAEAC,OAAMC,GAAN,CAAUV,KAAV;AACAS,OAAMC,GAAN,CAAUL,KAAV,EAAiBL,MAAMT,MAAvB;AACA;;AAEA;AACA,KAAMoB,IAAId,KAAKC,IAAL,CAAU,CAACvB,aAAa,CAAd,IAAmBI,CAA7B,CAAV;AACA;;AAEA;AACA,KAAIiC,mBAAmBC,QAAQC,OAAR,CAAgBN,CAAhB,CAAvB;AACA;;AAEA;AACA,MAAI,IAAIlB,MAAI,CAAZ,EAAeA,OAAKqB,CAApB,EAAuBrB,KAAvB,EACA;AACCsB,qBAAmBA,iBAAiBG,IAAjB,CAAsB,cACzC;AACC;AACA,OAAMC,QAAQ,IAAI7B,WAAJ,CAAgBM,EAAEL,UAAF,GAAe6B,GAAG7B,UAAlC,CAAd;AACA,OAAM8B,YAAY,IAAIjC,UAAJ,CAAe+B,KAAf,CAAlB;;AAEAE,aAAUR,GAAV,CAAchB,KAAd;AACAwB,aAAUR,GAAV,CAAcD,KAAd,EAAqBf,MAAMH,MAA3B;AACA;;AAEA,UAAOyB,KAAP;AACA,GAXkB,CAAnB;;AAaA;AACA,OAAI,IAAIG,IAAI,CAAZ,EAAeA,IAAIzC,cAAnB,EAAmCyC,GAAnC;AACCP,sBAAmBA,iBAAiBG,IAAjB,CAAsB;AAAA,WAAe1C,aAAa+C,MAAb,CAAoB,EAAEC,MAAM/C,aAAR,EAApB,EAA6C,IAAIW,UAAJ,CAAeqC,WAAf,CAA7C,CAAf;AAAA,IAAtB,CAAnB;AADD,GAfD,CAiBC;;AAEAV,qBAAmBA,iBAAiBG,IAAjB,CAAsB,uBACzC;AACC;AACA,OAAMQ,IAAI,IAAIpC,WAAJ,CAAgBP,CAAhB,CAAV;AACA,OAAM4C,QAAQ,IAAIvC,UAAJ,CAAesC,CAAf,CAAd;;AAEA,QAAI,IAAIJ,KAAI,CAAZ,EAAeA,KAAII,EAAEnC,UAArB,EAAiC+B,IAAjC;AACCK,UAAML,EAAN,IAAWG,YAAYH,KAAIG,YAAY/B,MAA5B,CAAX;AADD,IALD,CAOC;;AAEA;AACA,OAAMkC,IAAI5B,KAAKC,IAAL,CAAUH,aAAaf,CAAvB,IAA4BiB,KAAKC,IAAL,CAAUI,iBAAiBtB,CAA3B,CAAtC;AACA,OAAM8C,SAAS,EAAf;;AAEA,OAAIC,aAAa,CAAjB;AACA,OAAIC,cAAchD,CAAlB;;AAEA,QAAI,IAAIuC,MAAI,CAAZ,EAAeA,MAAIM,CAAnB,EAAsBN,KAAtB,EACA;AACC,QAAMU,QAAQC,MAAMC,IAAN,CAAW,IAAI9C,UAAJ,CAAeuB,EAAEhB,KAAF,CAAQmC,UAAR,EAAoBA,aAAaC,WAAjC,CAAf,CAAX,CAAd;AACAD,kBAAc/C,CAAd;AACA,QAAI+C,aAAa/C,CAAd,GAAmB4B,EAAEpB,UAAxB,EACCwC,cAAcpB,EAAEpB,UAAF,GAAeuC,UAA7B;;AAED,QAAIK,IAAI,KAAR;;AAEA,SAAI,IAAIC,IAAKV,EAAEnC,UAAF,GAAe,CAA5B,EAAgC6C,KAAK,CAArC,EAAwCA,GAAxC,EACA;AACCD,WAAM,CAAN;AACAA,UAAKR,MAAMS,CAAN,IAAWJ,MAAMI,CAAN,CAAhB;AACAJ,WAAMI,CAAN,IAAYD,IAAI,IAAhB;AACA;;AAEDN,WAAOQ,IAAP,kCAAeL,KAAf;AACA;;AAEDrB,OAAI,IAAIrB,WAAJ,CAAgBuC,OAAOnC,MAAvB,CAAJ;AACAkB,WAAQ,IAAIxB,UAAJ,CAAeuB,CAAf,CAAR;;AAEAC,SAAMC,GAAN,CAAUgB,MAAV;AACA;;AAEA7C,UAAOqD,IAAP,kCAAgB,IAAIjD,UAAJ,CAAeqC,WAAf,CAAhB;;AAEA,UAAOd,CAAP;AACA,GA7CkB,CAAnB;AA8CA;AACD;;AAEA;AACAI,oBAAmBA,iBAAiBG,IAAjB,CAAsB,YACzC;AACC,MAAMoB,eAAe,IAAIhD,WAAJ,CAAgBZ,aAAa,CAA7B,CAArB;AACA,MAAM6D,aAAa,IAAInD,UAAJ,CAAekD,YAAf,CAAnB;;AAEAC,aAAW1B,GAAX,CAAgB,IAAIzB,UAAJ,CAAeJ,MAAf,CAAD,CAAyBW,KAAzB,CAA+B,CAA/B,EAAkCjB,aAAa,CAA/C,CAAf;;AAEA,SAAO4D,YAAP;AACA,EARkB,CAAnB;AASA;AACA;;AAEA,QAAOvB,gBAAP;AACA;AACD;AACA;;;;IAGqByB,Y;AAEpB;AACA;;;;;AAKA,yBACA;AAAA,MADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;AACA;;;;AAIA,OAAKC,MAAL,GAAc,iCAAmBD,UAAnB,EAA+B,QAA/B,EAAyC,EAAzC,CAAd;AACA;;;;AAIA,OAAKE,MAAL,GAAc,iCAAmBF,UAAnB,EAA+B,QAA/B,EAAyC,EAAzC,CAAd;AACA;;;;AAIA,OAAKjB,IAAL,GAAY,iCAAmBiB,UAAnB,EAA+B,MAA/B,EAAuC,EAAvC,CAAZ;AACA;AACA;AACD;AACA;;;;;;;;;;;;;4BASUG,M,EAAQC,O,EAASC,S,EAAWC,W,EAAaC,S,EACnD;AAAA;;AACC;AACA,OAAIC,MAAM,EAAV;AACA;;AAEA;AACA,OAAGJ,mBAAmBzD,UAAtB,EACCyD,UAAUA,QAAQK,MAAlB;AACD;;AAEA,WAAON,OAAOO,WAAP,EAAP;AAEC,SAAK,KAAL;AACC,YAAO,KAAKR,MAAL,CAAYS,SAAZ,CAAsB,KAAtB,EAA6BP,OAA7B,EAAsCC,SAAtC,EAAiDC,WAAjD,EAA8DC,SAA9D,CAAP;AACD,SAAK,MAAL;AACC;AACC,UAAMK,OAAO/E,OAAOgF,OAAP,CAAeT,OAAf,CAAb;AACA,UAAGQ,KAAKE,MAAL,KAAiB,CAAC,CAArB,EACC,OAAOvC,QAAQwC,MAAR,CAAe,mBAAf,CAAP;;AAED,UAAMC,gBAAgB,6BAAtB;AACA,UACA;AACCA,qBAAcC,UAAd,CAAyBL,KAAKrE,MAA9B;AACA,OAHD,CAIA,OAAM2E,EAAN,EACA;AACC,cAAO3C,QAAQwC,MAAR,CAAe,mBAAf,CAAP;AACA;;AAGD,cAAOV,UAAUtB,IAAV,CAAevC,WAAf,EAAP;AAEC,YAAK,SAAL;AACC;AACC;AACA,iBAAO6D,UAAUc,IAAV,CAAepC,IAAf,CAAoBvC,WAApB,EAAP;AAEC,eAAK,OAAL;AACCgE,eAAIY,GAAJ,GAAU,KAAV;AACA;AACD,eAAK,SAAL;AACCZ,eAAIY,GAAJ,GAAU,OAAV;AACA;AACD,eAAK,SAAL;AACCZ,eAAIY,GAAJ,GAAU,OAAV;AACA;AACD,eAAK,SAAL;AACCZ,eAAIY,GAAJ,GAAU,OAAV;AACA;AACD;AACC,kBAAO7C,QAAQwC,MAAR,gCAA4CV,UAAUc,IAAV,CAAepC,IAAf,CAAoBvC,WAApB,EAA5C,CAAP;AAfF;AAiBA;AACA;AACF,YAAK,mBAAL;AACC;AACC+D,qBAAY,CAAC,QAAD,CAAZ,CADD,CACyB;;AAExBC,aAAIa,GAAJ,GAAU,KAAV;AACAb,aAAIc,GAAJ,GAAUhB,WAAV;AACAE,aAAIe,OAAJ,GAAchB,SAAd;;AAEA,aAAGS,cAAcX,SAAd,CAAwBmB,WAAxB,KAAwC,sBAA3C,EACC,OAAOjD,QAAQwC,MAAR,sCAAkDC,cAAcX,SAAd,CAAwBmB,WAA1E,CAAP;;AAED;AACA,aAAI,SAAShB,GAAV,KAAmB,KAAtB,EACA;AACC,kBAAOH,UAAUc,IAAV,CAAepC,IAAf,CAAoBvC,WAApB,EAAP;AAEC,gBAAK,OAAL;AACCgE,gBAAIY,GAAJ,GAAU,KAAV;AACA;AACD,gBAAK,SAAL;AACCZ,gBAAIY,GAAJ,GAAU,OAAV;AACA;AACD,gBAAK,SAAL;AACCZ,gBAAIY,GAAJ,GAAU,OAAV;AACA;AACD,gBAAK,SAAL;AACCZ,gBAAIY,GAAJ,GAAU,OAAV;AACA;AACD;AACC,mBAAO7C,QAAQwC,MAAR,sCAAkDC,cAAcX,SAAd,CAAwBmB,WAA1E,CAAP;AAfF;AAiBA;AACD;;AAEA;AACA,aAAMC,gBAAgBT,cAAcU,MAAd,EAAtB;;AAlCD;AAAA;AAAA;;AAAA;AAoCC,+BAAiBC,OAAOC,IAAP,CAAYH,aAAZ,CAAjB;AAAA,eAAUI,GAAV;;AACCrB,eAAIqB,GAAJ,IAAWJ,cAAcI,GAAd,CAAX;AADD,WApCD,CAsCC;AAtCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuCC;AACD;AACD,YAAK,OAAL;AACCtB,oBAAY,CAAC,QAAD,CAAZ,CAnEF,CAmE0B;AACzB,YAAK,MAAL;AACC;AACC;AACAC,eAAM;AACLa,eAAK,IADA;AAELC,eAAKhB,WAFA;AAGLiB,mBAAShB;AAHJ,UAAN;AAKA;;AAEA;AACA,aAAGS,cAAcX,SAAd,CAAwBmB,WAAxB,KAAwC,mBAA3C,EACC,OAAOjD,QAAQwC,MAAR,sCAAkDC,cAAcX,SAAd,CAAwBmB,WAA1E,CAAP;AACD;;AAEA;AACA,aAAMC,iBAAgBT,cAAcU,MAAd,EAAtB;;AAfD;AAAA;AAAA;;AAAA;AAiBC,gCAAiBC,OAAOC,IAAP,CAAYH,cAAZ,CAAjB;AAAA,eAAUI,IAAV;;AACCrB,eAAIqB,IAAJ,IAAWJ,eAAcI,IAAd,CAAX;AADD,WAjBD,CAmBC;AAnBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBC;AACD;AACD,YAAK,UAAL;AACC;AACCrB,aAAIa,GAAJ,GAAU,KAAV;AACAb,aAAIc,GAAJ,GAAUhB,WAAV;AACAE,aAAIe,OAAJ,GAAchB,SAAd;;AAEA,aAAG,KAAKxB,IAAL,CAAU2B,WAAV,OAA4B,QAA/B,EACCF,IAAIY,GAAJ,GAAU,UAAV,CADD,KAGA;AACC,kBAAOf,UAAUc,IAAV,CAAepC,IAAf,CAAoBvC,WAApB,EAAP;AAEC,gBAAK,OAAL;AACCgE,gBAAIY,GAAJ,GAAU,YAAV;AACA;AACD,gBAAK,SAAL;AACCZ,gBAAIY,GAAJ,GAAU,cAAV;AACA;AACD,gBAAK,SAAL;AACCZ,gBAAIY,GAAJ,GAAU,cAAV;AACA;AACD,gBAAK,SAAL;AACCZ,gBAAIY,GAAJ,GAAU,cAAV;AACA;AACD;AACC,mBAAO7C,QAAQwC,MAAR,sCAAkDC,cAAcX,SAAd,CAAwBmB,WAA1E,CAAP;AAfF;AAiBA;;AAED;AACA,aAAMC,kBAAgBT,cAAcU,MAAd,EAAtB;;AA7BD;AAAA;AAAA;;AAAA;AA+BC,gCAAiBC,OAAOC,IAAP,CAAYH,eAAZ,CAAjB;AAAA,eAAUI,KAAV;;AACCrB,eAAIqB,KAAJ,IAAWJ,gBAAcI,KAAd,CAAX;AADD,WA/BD,CAiCC;AAjCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCC;AACD;AACD;AACC,eAAOtD,QAAQwC,MAAR,gCAA4CV,UAAUtB,IAAV,CAAevC,WAAf,EAA5C,CAAP;AAjIF;AAmIA;AACD;AACD,SAAK,OAAL;AACC;AACC,UAAMsF,iBAAiB,8BAAvB;;AAEA;AACA,UAAMlB,OAAO/E,OAAOgF,OAAP,CAAeT,OAAf,CAAb;AACA,UAAGQ,KAAKE,MAAL,KAAiB,CAAC,CAArB,EACC,OAAOvC,QAAQwC,MAAR,CAAe,mBAAf,CAAP;;AAED,UACA;AACCe,sBAAeb,UAAf,CAA0BL,KAAKrE,MAA/B;AACA,OAHD,CAIA,OAAM2E,EAAN,EACA;AACC,cAAO3C,QAAQwC,MAAR,CAAe,mBAAf,CAAP;AACA;;AAED,UAAI,eAAee,cAAhB,KAAoC,KAAvC,EACC,OAAOvD,QAAQwC,MAAR,CAAe,mBAAf,CAAP;AACD;;AAEA,cAAOV,UAAUtB,IAAV,CAAevC,WAAf,EAAP;AAEC,YAAK,SAAL;AACC;AACC;AACA,iBAAO6D,UAAUc,IAAV,CAAepC,IAAf,CAAoBvC,WAApB,EAAP;AAEC,eAAK,OAAL;AACCgE,eAAIY,GAAJ,GAAU,KAAV;AACA;AACD,eAAK,SAAL;AACCZ,eAAIY,GAAJ,GAAU,OAAV;AACA;AACD,eAAK,SAAL;AACCZ,eAAIY,GAAJ,GAAU,OAAV;AACA;AACD,eAAK,SAAL;AACCZ,eAAIY,GAAJ,GAAU,OAAV;AACA;AACD;AACC,kBAAO7C,QAAQwC,MAAR,gCAA4CV,UAAUc,IAAV,CAAepC,IAAf,CAAoBvC,WAApB,EAA5C,CAAP;AAfF;AAiBA;AACA;AACF,YAAK,mBAAL;AACC;AACC+D,qBAAY,CAAC,MAAD,CAAZ,CADD,CACuB;;AAEtBC,aAAIa,GAAJ,GAAU,KAAV;AACAb,aAAIc,GAAJ,GAAUhB,WAAV;AACAE,aAAIe,OAAJ,GAAchB,SAAd;;AAEA;AACA,aAAGuB,eAAeC,mBAAf,CAAmCP,WAAnC,KAAmD,sBAAtD,EACC,OAAOjD,QAAQwC,MAAR,uCAAmDe,eAAeC,mBAAf,CAAmCP,WAAtF,CAAP;AACD;;AAEA;AACA,aAAI,SAAShB,GAAV,KAAmB,KAAtB,EACA;AACC,kBAAOH,UAAUc,IAAV,CAAepC,IAAf,CAAoBvC,WAApB,EAAP;AAEC,gBAAK,OAAL;AACCgE,gBAAIY,GAAJ,GAAU,KAAV;AACA;AACD,gBAAK,SAAL;AACCZ,gBAAIY,GAAJ,GAAU,OAAV;AACA;AACD,gBAAK,SAAL;AACCZ,gBAAIY,GAAJ,GAAU,OAAV;AACA;AACD,gBAAK,SAAL;AACCZ,gBAAIY,GAAJ,GAAU,OAAV;AACA;AACD;AACC,mBAAO7C,QAAQwC,MAAR,gCAA4CV,UAAUc,IAAV,CAAepC,IAAf,CAAoBvC,WAApB,EAA5C,CAAP;AAfF;AAiBA;AACD;;AAEA;AACA,aAAMwF,iBAAiBF,eAAeJ,MAAf,EAAvB;;AApCD;AAAA;AAAA;;AAAA;AAsCC,gCAAiBC,OAAOC,IAAP,CAAYI,cAAZ,CAAjB;AAAA,eAAUH,KAAV;;AACCrB,eAAIqB,KAAJ,IAAWG,eAAeH,KAAf,CAAX;AADD,WAtCD,CAwCC;AAxCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyCC;AACD;AACD,YAAK,OAAL;AACCtB,oBAAY,CAAC,MAAD,CAAZ,CArEF,CAqEwB;AACvB,YAAK,MAAL;AACC;AACC;AACAC,eAAM;AACLa,eAAK,IADA;AAELC,eAAKhB,WAFA;AAGLiB,mBAAShB;AAHJ,UAAN;AAKA;;AAEA;AACA,aAAGuB,eAAeC,mBAAf,CAAmCP,WAAnC,KAAmD,mBAAtD,EACC,OAAOjD,QAAQwC,MAAR,2BAAuCe,eAAeC,mBAAf,CAAmCP,WAA1E,CAAP;AACD;;AAEA;AACA,aAAMQ,kBAAiBF,eAAeJ,MAAf,EAAvB;;AAfD;AAAA;AAAA;;AAAA;AAiBC,gCAAiBC,OAAOC,IAAP,CAAYI,eAAZ,CAAjB;AAAA,eAAUH,KAAV;;AACCrB,eAAIqB,KAAJ,IAAWG,gBAAeH,KAAf,CAAX;AADD,WAjBD,CAmBC;AAnBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBC;AACD;AACD,YAAK,UAAL;AACC;AACCrB,aAAIa,GAAJ,GAAU,KAAV;AACAb,aAAIc,GAAJ,GAAUhB,WAAV;AACAE,aAAIe,OAAJ,GAAchB,SAAd;;AAEA;AACA,aAAG,KAAKxB,IAAL,CAAU2B,WAAV,OAA4B,QAA/B,EACCF,IAAIY,GAAJ,GAAU,UAAV,CADD,KAGA;AACC,kBAAOf,UAAUc,IAAV,CAAepC,IAAf,CAAoBvC,WAApB,EAAP;AAEC,gBAAK,OAAL;AACCgE,gBAAIY,GAAJ,GAAU,YAAV;AACA;AACD,gBAAK,SAAL;AACCZ,gBAAIY,GAAJ,GAAU,cAAV;AACA;AACD,gBAAK,SAAL;AACCZ,gBAAIY,GAAJ,GAAU,cAAV;AACA;AACD,gBAAK,SAAL;AACCZ,gBAAIY,GAAJ,GAAU,cAAV;AACA;AACD;AACC,mBAAO7C,QAAQwC,MAAR,gCAA4CV,UAAUc,IAAV,CAAepC,IAAf,CAAoBvC,WAApB,EAA5C,CAAP;AAfF;AAiBA;AACD;;AAEA;AACA,aAAMwF,mBAAiBF,eAAeJ,MAAf,EAAvB;;AA/BD;AAAA;AAAA;;AAAA;AAiCC,gCAAiBC,OAAOC,IAAP,CAAYI,gBAAZ,CAAjB;AAAA,eAAUH,KAAV;;AACCrB,eAAIqB,KAAJ,IAAWG,iBAAeH,KAAf,CAAX;AADD,WAjCD,CAmCC;AAnCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoCC;AACD;AACD;AACC,eAAOtD,QAAQwC,MAAR,gCAA4CV,UAAUtB,IAAV,CAAevC,WAAf,EAA5C,CAAP;AArIF;AAuIA;AACD;AACD,SAAK,KAAL;AACCgE,WAAMJ,OAAN;AACA;AACD;AACC,YAAO7B,QAAQwC,MAAR,wBAAoCZ,MAApC,CAAP;AA7TF;;AAgUA;AACA,OAAG,KAAKpB,IAAL,CAAU2B,WAAV,OAA4B,QAA/B,EACA;AACC;AACA,WAAOnC,QAAQC,OAAR,GAAkBC,IAAlB,CAAuB;AAAA,YAAM,MAAKyB,MAAL,CAAYS,SAAZ,CAAsB,KAAtB,EAA6B,kCAAoBsB,KAAKC,SAAL,CAAe1B,GAAf,CAApB,CAA7B,EAAuEH,SAAvE,EAAkFC,WAAlF,EAA+FC,SAA/F,CAAN;AAAA,KAAvB,EACL9B,IADK,CACA;AAAA,YAAUlC,MAAV;AAAA,KADA,EACkB;AAAA,YAAS,MAAK2D,MAAL,CAAYS,SAAZ,CAAsB,KAAtB,EAA6BH,GAA7B,EAAkCH,SAAlC,EAA6CC,WAA7C,EAA0DC,SAA1D,CAAT;AAAA,KADlB,CAAP;AAEA;AACD;;AAEA,UAAO,KAAKL,MAAL,CAAYS,SAAZ,CAAsB,KAAtB,EAA6BH,GAA7B,EAAkCH,SAAlC,EAA6CC,WAA7C,EAA0DC,SAA1D,CAAP;AACA;AACD;AACA;;;;;;;;;4BAMUJ,M,EAAQ0B,G,EAClB;AACC,OAAIM,WAAW,KAAKjC,MAAL,CAAYkC,SAAZ,CAAsB,KAAtB,EAA6BP,GAA7B,CAAf;;AAEA;AACA,OAAG,KAAK9C,IAAL,CAAU2B,WAAV,OAA4B,QAA/B,EACA;AACCyB,eAAWA,SAAS1D,IAAT,CAAc,kBACzB;AACC;AACA,SAAGlC,kBAAkBM,WAArB,EACC,OAAOoF,KAAKI,KAAL,CAAW,kCAAoB9F,MAApB,CAAX,CAAP;;AAED,YAAOA,MAAP;AACA,KAPU,CAAX;AAQA;AACD;;AAEA,WAAO4D,OAAOO,WAAP,EAAP;AAEC,SAAK,KAAL;AACC,YAAO,KAAKR,MAAL,CAAYkC,SAAZ,CAAsB,KAAtB,EAA6BP,GAA7B,CAAP;AACD,SAAK,MAAL;AACCM,gBAAWA,SAAS1D,IAAT,CAAc,kBACzB;AACC,UAAMuC,gBAAgB,6BAAtB;;AAEA,UACA;AACCA,qBAAcsB,QAAd,CAAuB/F,MAAvB;AACA,OAHD,CAIA,OAAM2E,EAAN,EACA;AACC,cAAO3C,QAAQwC,MAAR,CAAe,oBAAf,CAAP;AACA;;AAED,aAAOC,cAAcuB,QAAd,GAAyBC,KAAzB,CAA+B,KAA/B,CAAP;AACA,MAdU,CAAX;AAeA;AACD,SAAK,OAAL;AACCL,gBAAWA,SAAS1D,IAAT,CAAc,kBACzB;AACC,UAAMqD,iBAAiB,8BAAvB;;AAEA,UACA;AACCA,sBAAeQ,QAAf,CAAwB/F,MAAxB;AACA,OAHD,CAIA,OAAM2E,EAAN,EACA;AACC,cAAO3C,QAAQwC,MAAR,CAAe,oBAAf,CAAP;AACA;;AAED,aAAOe,eAAeS,QAAf,GAA0BC,KAA1B,CAAgC,KAAhC,CAAP;AACA,MAdU,CAAX;AAeA;AACD,SAAK,KAAL;AACC;AACD;AACC,YAAOjE,QAAQwC,MAAR,wBAAoCZ,MAApC,CAAP;AAzCF;;AA4CA,UAAOgC,QAAP;AACA;AACD;AACA;;;;;;;;;;;;;0BAUQM,W,EAAaC,Y,EAActC,O,EAASC,S,EAAWC,W,EAAaC,S,EACpE;AAAA;;AACC,WAAOkC,YAAY/B,WAAZ,EAAP;AAEC,SAAK,KAAL;AACC,aAAOgC,aAAahC,WAAb,EAAP;AAEC,WAAK,KAAL;AACC,cAAOnC,QAAQC,OAAR,CAAgB4B,OAAhB,CAAP;AACD,WAAK,MAAL;AACC,cAAO7B,QAAQC,OAAR,GACLC,IADK,CACA;AAAA,eAAM,OAAKkC,SAAL,CAAe,KAAf,EAAsBP,OAAtB,EAA+BC,SAA/B,EAA0CC,WAA1C,EAAuDC,SAAvD,CAAN;AAAA,QADA,EAEL9B,IAFK,CAEA;AAAA,eAAU,OAAK2D,SAAL,CAAe,MAAf,EAAuB7F,MAAvB,CAAV;AAAA,QAFA,CAAP;AAGD,WAAK,OAAL;AACC,cAAOgC,QAAQC,OAAR,GACLC,IADK,CACA;AAAA,eAAM,OAAKkC,SAAL,CAAe,KAAf,EAAsBP,OAAtB,EAA+BC,SAA/B,EAA0CC,WAA1C,EAAuDC,SAAvD,CAAN;AAAA,QADA,EAEL9B,IAFK,CAEA;AAAA,eAAU,OAAK2D,SAAL,CAAe,OAAf,EAAwB7F,MAAxB,CAAV;AAAA,QAFA,CAAP;AAGD,WAAK,KAAL;AACC,cAAOgC,QAAQC,OAAR,GACLC,IADK,CACA;AAAA,eAAM,OAAKkC,SAAL,CAAe,KAAf,EAAsBP,OAAtB,EAA+BC,SAA/B,EAA0CC,WAA1C,EAAuDC,SAAvD,CAAN;AAAA,QADA,EAEL9B,IAFK,CAEA;AAAA,eAAU,OAAK2D,SAAL,CAAe,KAAf,EAAsB7F,MAAtB,CAAV;AAAA,QAFA,CAAP;AAGD;AACC,cAAOgC,QAAQwC,MAAR,8BAA0C2B,YAA1C,CAAP;AAjBF;AAmBD,SAAK,MAAL;AACC,aAAOA,aAAahC,WAAb,EAAP;AAEC,WAAK,KAAL;AACC,cAAOnC,QAAQC,OAAR,GACLC,IADK,CACA;AAAA,eAAM,OAAKkC,SAAL,CAAe,MAAf,EAAuBP,OAAvB,EAAgCC,SAAhC,EAA2CC,WAA3C,EAAwDC,SAAxD,CAAN;AAAA,QADA,EAEL9B,IAFK,CAEA;AAAA,eAAU,OAAK2D,SAAL,CAAe,KAAf,EAAsB7F,MAAtB,CAAV;AAAA,QAFA,CAAP;AAGD,WAAK,MAAL;AACC,cAAOgC,QAAQC,OAAR,CAAgB4B,OAAhB,CAAP;AACD,WAAK,OAAL;AACC,cAAO7B,QAAQwC,MAAR,CAAe,0CAAf,CAAP;AACD,WAAK,KAAL;AACC,cAAOxC,QAAQC,OAAR,GACLC,IADK,CACA;AAAA,eAAM,OAAKkC,SAAL,CAAe,MAAf,EAAuBP,OAAvB,EAAgCC,SAAhC,EAA2CC,WAA3C,EAAwDC,SAAxD,CAAN;AAAA,QADA,EAEL9B,IAFK,CAEA;AAAA,eAAU,OAAK2D,SAAL,CAAe,KAAf,EAAsB7F,MAAtB,CAAV;AAAA,QAFA,CAAP;AAGD;AACC,cAAOgC,QAAQwC,MAAR,8BAA0C2B,YAA1C,CAAP;AAfF;AAiBD,SAAK,OAAL;AACC,aAAOA,aAAahC,WAAb,EAAP;AAEC,WAAK,KAAL;AACC,cAAOnC,QAAQC,OAAR,GACLC,IADK,CACA;AAAA,eAAM,OAAKkC,SAAL,CAAe,OAAf,EAAwBP,OAAxB,EAAiCC,SAAjC,EAA4CC,WAA5C,EAAyDC,SAAzD,CAAN;AAAA,QADA,EAEL9B,IAFK,CAEA;AAAA,eAAU,OAAK2D,SAAL,CAAe,KAAf,EAAsB7F,MAAtB,CAAV;AAAA,QAFA,CAAP;AAGD,WAAK,MAAL;AACC,cAAOgC,QAAQwC,MAAR,CAAe,0CAAf,CAAP;AACD,WAAK,OAAL;AACC,cAAOxC,QAAQC,OAAR,CAAgB4B,OAAhB,CAAP;AACD,WAAK,KAAL;AACC,cAAO7B,QAAQC,OAAR,GACLC,IADK,CACA;AAAA,eAAM,OAAKkC,SAAL,CAAe,OAAf,EAAwBP,OAAxB,EAAiCC,SAAjC,EAA4CC,WAA5C,EAAyDC,SAAzD,CAAN;AAAA,QADA,EAEL9B,IAFK,CAEA;AAAA,eAAU,OAAK2D,SAAL,CAAe,KAAf,EAAsB7F,MAAtB,CAAV;AAAA,QAFA,CAAP;AAGD;AACC,cAAOgC,QAAQwC,MAAR,8BAA0C2B,YAA1C,CAAP;AAfF;AAiBD,SAAK,KAAL;AACC,aAAOA,aAAahC,WAAb,EAAP;AAEC,WAAK,KAAL;AACC,cAAOnC,QAAQC,OAAR,GACLC,IADK,CACA;AAAA,eAAM,OAAKkC,SAAL,CAAe,KAAf,EAAsBP,OAAtB,EAA+BC,SAA/B,EAA0CC,WAA1C,EAAuDC,SAAvD,CAAN;AAAA,QADA,EAEL9B,IAFK,CAEA;AAAA,eAAU,OAAK2D,SAAL,CAAe,KAAf,EAAsB7F,MAAtB,CAAV;AAAA,QAFA,CAAP;AAGD,WAAK,MAAL;AACC,cAAOgC,QAAQC,OAAR,GACLC,IADK,CACA;AAAA,eAAM,OAAKkC,SAAL,CAAe,KAAf,EAAsBP,OAAtB,EAA+BC,SAA/B,EAA0CC,WAA1C,EAAuDC,SAAvD,CAAN;AAAA,QADA,EAEL9B,IAFK,CAEA;AAAA,eAAU,OAAK2D,SAAL,CAAe,MAAf,EAAuB7F,MAAvB,CAAV;AAAA,QAFA,CAAP;AAGD,WAAK,OAAL;AACC,cAAOgC,QAAQC,OAAR,GACLC,IADK,CACA;AAAA,eAAM,OAAKkC,SAAL,CAAe,KAAf,EAAsBP,OAAtB,EAA+BC,SAA/B,EAA0CC,WAA1C,EAAuDC,SAAvD,CAAN;AAAA,QADA,EAEL9B,IAFK,CAEA;AAAA,eAAU,OAAK2D,SAAL,CAAe,OAAf,EAAwB7F,MAAxB,CAAV;AAAA,QAFA,CAAP;AAGD,WAAK,KAAL;AACC,cAAOgC,QAAQC,OAAR,CAAgB4B,OAAhB,CAAP;AACD;AACC,cAAO7B,QAAQwC,MAAR,8BAA0C2B,YAA1C,CAAP;AAjBF;AAmBD;AACC,YAAOnE,QAAQwC,MAAR,6BAAyC0B,WAAzC,CAAP;AA/EF;AAiFA;AACD;AACA;;;;;;;;4BAMA;AAAA;;AACC,UAAO,gBAAKvC,MAAL,EAAYyC,OAAZ,0BAAP;AACA;AACD;AACA;;;;;;;;4BAMA;AAAA;;AACC,UAAO,iBAAKzC,MAAL,EAAY0C,OAAZ,2BAAP;AACA;AACD;AACA;;;;;;;;yBAMA;AAAA;;AACC,UAAO,iBAAK1C,MAAL,EAAY2C,IAAZ,2BAAP;AACA;AACD;AACA;;;;;;;;2BAMA;AAAA;;AACC,UAAO,iBAAK3C,MAAL,EAAY4C,MAAZ,2BAAP;AACA;AACD;AACA;;;;;;;;2BAMA;AAAA;;AACC,UAAO,iBAAK5C,MAAL,EAAYpB,MAAZ,2BAAP;AACA;AACD;AACA;;;;;;;;gCAMA;AAAA;;AACC,UAAO,iBAAKoB,MAAL,EAAY6C,WAAZ,2BAAP;AACA;AACD;AACA;;;;;;;;8BAMA;AAAA;;AACC,UAAO,iBAAK7C,MAAL,EAAY8C,SAAZ,2BAAP;AACA;AACD;AACA;;;;;;;;+BAMA;AAAA;;AACC,UAAO,iBAAK9C,MAAL,EAAY+C,UAAZ,2BAAP;AACA;AACD;AACA;;;;;;;;4BAMA;AAAA;;AACC,UAAO,iBAAK/C,MAAL,EAAYgD,OAAZ,2BAAP;AACA;AACD;AACA;;;;;;;;8BAMA;AAAA;;AACC,UAAO,kBAAKhD,MAAL,EAAYiD,SAAZ,4BAAP;AACA;AACD;AACA;;;;;;;;kCAKgBC,I,EAChB;AACC,OAAI,qBAAqB,KAAKnD,MAA3B,KAAuC,KAA1C,EACC,MAAM,IAAIxD,KAAJ,CAAU,gCAAV,CAAN;;AAED,UAAO,KAAKwD,MAAL,CAAYoD,eAAZ,CAA4BD,IAA5B,CAAP;AACA;AACD;AACA;;;;;;;;oCAKkBE,G,EAClB;AACC,WAAOA,GAAP;AAEC,SAAK,sBAAL;AACA,SAAK,sBAAL;AACC,YAAO;AACNvE,YAAM,mBADA;AAENoC,YAAM;AACLpC,aAAM;AADD;AAFA,MAAP;AAMD,SAAK,uBAAL;AACC,YAAO;AACNA,YAAM,mBADA;AAENoC,YAAM;AACLpC,aAAM;AADD;AAFA,MAAP;AAMD,SAAK,uBAAL;AACC,YAAO;AACNA,YAAM,mBADA;AAENoC,YAAM;AACLpC,aAAM;AADD;AAFA,MAAP;AAMD,SAAK,uBAAL;AACC,YAAO;AACNA,YAAM,mBADA;AAENoC,YAAM;AACLpC,aAAM;AADD;AAFA,MAAP;AAMD,SAAK,uBAAL;AACC,YAAO;AACNA,YAAM;AADA,MAAP;AAGD,SAAK,sBAAL;AACC,YAAO;AACNA,YAAM;AADA,MAAP;AAGD,SAAK,mBAAL;AACA,SAAK,mBAAL;AACC,YAAO;AACNA,YAAM,OADA;AAENoC,YAAM;AACLpC,aAAM;AADD;AAFA,MAAP;AAMD,SAAK,qBAAL;AACC,YAAO;AACNA,YAAM,OADA;AAENoC,YAAM;AACLpC,aAAM;AADD;AAFA,MAAP;AAMD,SAAK,qBAAL;AACC,YAAO;AACNA,YAAM,OADA;AAENoC,YAAM;AACLpC,aAAM;AADD;AAFA,MAAP;AAMD,SAAK,qBAAL;AACC,YAAO;AACNA,YAAM,OADA;AAENoC,YAAM;AACLpC,aAAM;AADD;AAFA,MAAP;AAMD,SAAK,uBAAL;AACC,YAAO;AACNA,YAAM,MADA;AAENwE,WAAK;AAFC,MAAP;AAID,SAAK,gBAAL;AACC,YAAO;AACNxE,YAAM,MADA;AAENwE,WAAK;AAFC,MAAP;AAID,SAAK,gBAAL;AACC,YAAO;AACNxE,YAAM,MADA;AAENwE,WAAK;AAFC,MAAP;AAID,SAAK,gBAAL;AACC,YAAO;AACNxE,YAAM,MADA;AAENwE,WAAK;AAFC,MAAP;AAID,SAAK,wBAAL;AACC,YAAO;AACNxE,YAAM,SADA;AAEN9B,cAAQ;AAFF,MAAP;AAID,SAAK,yBAAL;AACC,YAAO;AACN8B,YAAM,SADA;AAEN9B,cAAQ;AAFF,MAAP;AAID,SAAK,yBAAL;AACC,YAAO;AACN8B,YAAM,SADA;AAEN9B,cAAQ;AAFF,MAAP;AAID,SAAK,wBAAL;AACC,YAAO;AACN8B,YAAM,SADA;AAEN9B,cAAQ;AAFF,MAAP;AAID,SAAK,yBAAL;AACC,YAAO;AACN8B,YAAM,SADA;AAEN9B,cAAQ;AAFF,MAAP;AAID,SAAK,yBAAL;AACC,YAAO;AACN8B,YAAM,SADA;AAEN9B,cAAQ;AAFF,MAAP;AAID,SAAK,wBAAL;AACC,YAAO;AACN8B,YAAM,SADA;AAEN9B,cAAQ;AAFF,MAAP;AAID,SAAK,yBAAL;AACC,YAAO;AACN8B,YAAM,SADA;AAEN9B,cAAQ;AAFF,MAAP;AAID,SAAK,yBAAL;AACC,YAAO;AACN8B,YAAM,SADA;AAEN9B,cAAQ;AAFF,MAAP;AAID,SAAK,wBAAL;AACC,YAAO;AACN8B,YAAM,QADA;AAEN9B,cAAQ;AAFF,MAAP;AAID,SAAK,yBAAL;AACC,YAAO;AACN8B,YAAM,QADA;AAEN9B,cAAQ;AAFF,MAAP;AAID,SAAK,yBAAL;AACC,YAAO;AACN8B,YAAM,QADA;AAEN9B,cAAQ;AAFF,MAAP;AAID,SAAK,oBAAL;AACC,YAAO;AACN8B,YAAM,MADA;AAENoC,YAAM;AACLpC,aAAM;AADD;AAFA,MAAP;AAMD,SAAK,oBAAL;AACC,YAAO;AACNA,YAAM,MADA;AAENoC,YAAM;AACLpC,aAAM;AADD;AAFA,MAAP;AAMD,SAAK,qBAAL;AACC,YAAO;AACNA,YAAM,MADA;AAENoC,YAAM;AACLpC,aAAM;AADD;AAFA,MAAP;AAMD,SAAK,qBAAL;AACC,YAAO;AACNA,YAAM,MADA;AAENoC,YAAM;AACLpC,aAAM;AADD;AAFA,MAAP;AAMD,SAAK,2BAAL;AACC,YAAO;AACNA,YAAM;AADA,MAAP;AAGD,SAAK,eAAL;AACC,YAAO;AACNA,YAAM;AADA,MAAP;AAGD,SAAK,wBAAL;AACC,YAAO;AACNA,YAAM;AADA,MAAP;AAGD,SAAK,wBAAL;AACC,YAAO;AACNA,YAAM;AADA,MAAP;AAGD,SAAK,wBAAL;AACC,YAAO;AACNA,YAAM;AADA,MAAP;AAGD,SAAK,uBAAL;AACC,YAAO;AACNA,YAAM;AADA,MAAP;AAGD;AACA,SAAK,qBAAL;AACC,YAAO;AACNA,YAAM;AADA,MAAP;AAGD,SAAK,cAAL;AACC,YAAO;AACNA,YAAM;AADA,MAAP;AAGD,SAAK,cAAL;AACC,YAAO;AACNA,YAAM;AADA,MAAP;AAGD;AACA;AAtND;;AAyNA,UAAO,EAAP;AACA;AACD;AACA;;;;;;;;oCAKkBsB,S,EAClB;AACC,OAAI9D,SAAS,EAAb;;AAEA,WAAO8D,UAAUtB,IAAV,CAAevC,WAAf,EAAP;AAEC,SAAK,mBAAL;AACC,aAAO6D,UAAUc,IAAV,CAAepC,IAAf,CAAoBvC,WAApB,EAAP;AAEC,WAAK,OAAL;AACCD,gBAAS,sBAAT;AACA;AACD,WAAK,SAAL;AACCA,gBAAS,uBAAT;AACA;AACD,WAAK,SAAL;AACCA,gBAAS,uBAAT;AACA;AACD,WAAK,SAAL;AACCA,gBAAS,uBAAT;AACA;AACD;AAdD;AAgBA;AACD,SAAK,SAAL;AACCA,cAAS,uBAAT;AACA;AACD,SAAK,UAAL;AACCA,cAAS,sBAAT;AACA;AACD,SAAK,OAAL;AACC,aAAO8D,UAAUc,IAAV,CAAepC,IAAf,CAAoBvC,WAApB,EAAP;AAEC,WAAK,OAAL;AACCD,gBAAS,mBAAT;AACA;AACD,WAAK,SAAL;AACCA,gBAAS,qBAAT;AACA;AACD,WAAK,SAAL;AACCA,gBAAS,qBAAT;AACA;AACD,WAAK,SAAL;AACCA,gBAAS,qBAAT;AACA;AACD;AAdD;AAgBA;AACD,SAAK,MAAL;AACC,aAAO8D,UAAUkD,GAAV,CAAc/G,WAAd,EAAP,GAAoC;AAEnC,WAAK,OAAL;AACCD,gBAAS,uBAAT,CADD,CACmC;AAClC;AACD,WAAK,SAAL;AACCA,gBAAS,gBAAT,CADD,CAC4B;AAC3B;AACD,WAAK,SAAL;AACCA,gBAAS,gBAAT,CADD,CAC4B;AAC3B;AACD,WAAK,SAAL;AACCA,gBAAS,gBAAT,CADD,CAC4B;AAC3B;AACD;AAdD;AAgBA;AACD,SAAK,SAAL;AACC;AACD,SAAK,SAAL;AACC,aAAO8D,UAAUpD,MAAjB;AAEC,WAAK,GAAL;AACCV,gBAAS,wBAAT;AACA;AACD,WAAK,GAAL;AACCA,gBAAS,yBAAT;AACA;AACD,WAAK,GAAL;AACCA,gBAAS,yBAAT;AACA;AACD;AAXD;AAaA;AACD,SAAK,UAAL;AACC;AACD,SAAK,SAAL;AACC,aAAO8D,UAAUpD,MAAjB;AAEC,WAAK,GAAL;AACCV,gBAAS,wBAAT;AACA;AACD,WAAK,GAAL;AACCA,gBAAS,yBAAT;AACA;AACD,WAAK,GAAL;AACCA,gBAAS,yBAAT;AACA;AACD;AAXD;AAaA;AACD,SAAK,SAAL;AACC,aAAO8D,UAAUpD,MAAjB;AAEC,WAAK,GAAL;AACCV,gBAAS,wBAAT;AACA;AACD,WAAK,GAAL;AACCA,gBAAS,yBAAT;AACA;AACD,WAAK,GAAL;AACCA,gBAAS,yBAAT;AACA;AACD;AAXD;AAaA;AACD,SAAK,QAAL;AACC,aAAO8D,UAAUpD,MAAjB;AAEC,WAAK,GAAL;AACCV,gBAAS,wBAAT;AACA;AACD,WAAK,GAAL;AACCA,gBAAS,yBAAT;AACA;AACD,WAAK,GAAL;AACCA,gBAAS,yBAAT;AACA;AACD;AAXD;AAaA;AACD,SAAK,MAAL;AACC,aAAO8D,UAAUc,IAAV,CAAepC,IAAf,CAAoBvC,WAApB,EAAP;AAEC,WAAK,OAAL;AACCD,gBAAS,oBAAT;AACA;AACD,WAAK,SAAL;AACCA,gBAAS,oBAAT;AACA;AACD,WAAK,SAAL;AACCA,gBAAS,qBAAT;AACA;AACD,WAAK,SAAL;AACCA,gBAAS,qBAAT;AACA;AACD;AAdD;AAgBA;AACD,SAAK,IAAL;AACCA,cAAS,2BAAT;AACA;AACD,SAAK,OAAL;AACCA,cAAS,eAAT;AACA;AACD,SAAK,SAAL;AACCA,cAAS,wBAAT;AACA;AACD,SAAK,SAAL;AACCA,cAAS,wBAAT;AACA;AACD,SAAK,SAAL;AACCA,cAAS,wBAAT;AACA;AACD,SAAK,QAAL;AACC;AACD,SAAK,MAAL;AACC;AACD,SAAK,QAAL;AACCA,cAAS,uBAAT;AACA;AACD;AACA,SAAK,OAAL;AACCA,cAAS,qBAAT;AACA;AACD,SAAK,OAAL;AACCA,cAAS,cAAT;AACA;AACD,SAAK,OAAL;AACCA,cAAS,cAAT;AACA;AACD;AACA;AAjLD;;AAoLA,UAAOA,MAAP;AACA;AACD;AACA;;;;;;;;;yCAMuBiH,a,EAAeC,S,EACtC;AACC,OAAIlH,SAAS;AACZ8D,eAAW,EADC;AAEZqD,YAAQ;AAFI,IAAb;;AAKA,WAAOF,cAAchH,WAAd,EAAP;AAEC,SAAK,mBAAL;AACC,aAAOiH,UAAU/C,WAAV,EAAP;AAEC,WAAK,aAAL;AACCnE,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,mBADI;AAEV4E,wBAAe,IAFL;AAGVC,yBAAgB,IAAIjH,UAAJ,CAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAf,CAHN;AAIVwE,eAAM;AACLpC,gBAAM;AADD;AAJI,SADH;AASR2E,gBAAQ,CAAC,MAAD,EAAS,QAAT;AATA,QAAT;AAWA;AACD,WAAK,QAAL;AACA,WAAK,MAAL;AACA,WAAK,WAAL;AACCnH,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,mBADI;AAEVoC,eAAM;AACLpC,gBAAM;AADD;AAFI,SADH;AAOR2E,gBAAQ,CAAC,QAAD,CAPA,CAOW;AAPX,QAAT;AASA;AACD,WAAK,WAAL;AACA;AACC,cAAO;AACNrD,mBAAW;AACVtB,eAAM;AADI,SADL;AAIN2E,gBAAQ;AAJF,QAAP;AA9BF;AAqCA;AACD,SAAK,SAAL;AACC,aAAOD,UAAU/C,WAAV,EAAP;AAEC,WAAK,MAAL;AACA,WAAK,QAAL;AACCnE,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,SADI;AAEVoC,eAAM;AACLpC,gBAAM;AADD,UAFI;AAKV1B,qBAAY;AALF,SADH;AAQRqG,gBAAQ,CAAC,MAAD,EAAS,QAAT;AARA,QAAT;AAUA;AACD,WAAK,aAAL;AACCnH,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,SADI;AAEV4E,wBAAe,IAFL;AAGVC,yBAAgB,IAAIjH,UAAJ,CAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAf,CAHN;AAIVwE,eAAM;AACLpC,gBAAM;AADD;AAJI,SADH;AASR2E,gBAAQ,CAAC,MAAD,EAAS,QAAT;AATA,QAAT;AAWA;AACD,WAAK,WAAL;AACCnH,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,SADI;AAEVoC,eAAM;AACLpC,gBAAM;AADD;AAFI,SADH;AAOR2E,gBAAQ,CAAC,QAAD,CAPA,CAOW;AAPX,QAAT;AASA;AACD,WAAK,WAAL;AACA;AACC,cAAO;AACNrD,mBAAW;AACVtB,eAAM;AADI,SADL;AAIN2E,gBAAQ;AAJF,QAAP;AAzCF;AAgDA;AACD,SAAK,UAAL;AACC,aAAOD,UAAU/C,WAAV,EAAP;AAEC,WAAK,SAAL;AACA,WAAK,SAAL;AACCnE,gBAAS;AACR8D,mBAAW;AACVtB,eAAM;AADI,SADH;AAIR2E,gBAAQ,CAAC,SAAD,EAAY,SAAZ;AAJA,QAAT;AAMA;AACD,WAAK,aAAL;AACCnH,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,UADI;AAEV4E,wBAAe,IAFL;AAGVC,yBAAgB,IAAIjH,UAAJ,CAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAf,CAHN;AAIVwE,eAAM;AACLpC,gBAAM;AADD;AAJI,SADH;AASR2E,gBAAQ,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,WAAlC;AATA,QAAT;AAWA;AACD,WAAK,WAAL;AACCnH,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,UADI;AAEVoC,eAAM;AACLpC,gBAAM;AADD;AAFI,SADH;AAOR2E,gBAAQ,CAAC,SAAD,CAPA,CAOY;AAPZ,QAAT;AASA;AACD,WAAK,WAAL;AACA;AACC,cAAO;AACNrD,mBAAW;AACVtB,eAAM;AADI,SADL;AAIN2E,gBAAQ;AAJF,QAAP;AArCF;AA4CA;AACD,SAAK,OAAL;AACC,aAAOD,UAAU/C,WAAV,EAAP;AAEC,WAAK,aAAL;AACCnE,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,OADI;AAEV8E,qBAAY;AAFF,SADH;AAKRH,gBAAQ,CAAC,MAAD,EAAS,QAAT;AALA,QAAT;AAOA;AACD,WAAK,WAAL;AACCnH,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,OADI;AAEV8E,qBAAY;AAFF,SADH;AAKRH,gBAAQ,CAAC,QAAD,CALA,CAKW;AALX,QAAT;AAOA;AACD,WAAK,QAAL;AACA,WAAK,MAAL;AACCnH,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,OADI;AAEVoC,eAAM;AACLpC,gBAAM;AADD;AAFI,SADH;AAOR2E,gBAAQ,CAAC,MAAD;AAPA,QAAT;AASA;AACD;AACC,cAAO;AACNrD,mBAAW;AACVtB,eAAM;AADI,SADL;AAIN2E,gBAAQ;AAJF,QAAP;AAjCF;AAwCA;AACD,SAAK,MAAL;AACC,aAAOD,UAAU/C,WAAV,EAAP;AAEC,WAAK,WAAL;AACA,WAAK,WAAL;AACA,WAAK,aAAL;AACCnE,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,MADI;AAEV8E,qBAAY;AAFF,SADH;AAKRH,gBAAQ,CAAC,WAAD,EAAc,YAAd;AALA,QAAT;AAOA;AACD,WAAK,WAAL;AACA,WAAK,YAAL;AACCnH,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,MADI;AAEV8E,qBAAY,OAFF;AAGVC,iBAAQ,EAHE,CAGC;AAHD,SADH;AAMRJ,gBAAQ,CAAC,SAAD,EAAY,SAAZ;AANA,QAAT;AAQA;AACD;AACC,cAAO;AACNrD,mBAAW;AACVtB,eAAM;AADI,SADL;AAIN2E,gBAAQ;AAJF,QAAP;AAzBF;AAgCA;AACD,SAAK,SAAL;AACC,aAAOD,UAAU/C,WAAV,EAAP;AAEC,WAAK,WAAL;AACA,WAAK,WAAL;AACA,WAAK,aAAL;AACCnE,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,SADI;AAEV9B,iBAAQ;AAFE,SADH;AAKRyG,gBAAQ,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,WAAlC;AALA,QAAT;AAOA;AACD,WAAK,SAAL;AACA,WAAK,SAAL;AACCnH,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,SADI;AAEVgF,kBAAS,IAAIpH,UAAJ,CAAe,EAAf,CAFC;AAGVM,iBAAQ;AAHE,SADH;AAMRyG,gBAAQ,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,WAAlC;AANA,QAAT;AAQA;AACD;AACC,cAAO;AACNrD,mBAAW;AACVtB,eAAM;AADI,SADL;AAIN2E,gBAAQ;AAJF,QAAP;AAzBF;AAgCA;AACD,SAAK,SAAL;AACC,aAAOD,UAAU/C,WAAV,EAAP;AAEC,WAAK,WAAL;AACA,WAAK,WAAL;AACA,WAAK,aAAL;AACCnE,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,SADI;AAEV9B,iBAAQ;AAFE,SADH;AAKRyG,gBAAQ,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,WAAlC;AALA,QAAT;AAOA;AACD,WAAK,SAAL;AACA,WAAK,SAAL;AACCnH,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,SADI;AAEViF,aAAI,KAAKX,eAAL,CAAqB,IAAI1G,UAAJ,CAAe,EAAf,CAArB,CAFM,CAEmC;AAFnC,SADH;AAKR+G,gBAAQ,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,WAAlC;AALA,QAAT;AAOA;AACD;AACC,cAAO;AACNrD,mBAAW;AACVtB,eAAM;AADI,SADL;AAIN2E,gBAAQ;AAJF,QAAP;AAxBF;AA+BA;AACD,SAAK,SAAL;AACC,aAAOD,UAAU/C,WAAV,EAAP;AAEC,WAAK,WAAL;AACA,WAAK,WAAL;AACA,WAAK,aAAL;AACCnE,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,SADI;AAEV9B,iBAAQ;AAFE,SADH;AAKRyG,gBAAQ,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,WAAlC;AALA,QAAT;AAOA;AACD,WAAK,SAAL;AACA,WAAK,SAAL;AACCnH,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,SADI;AAEViF,aAAI,KAAKX,eAAL,CAAqB,IAAI1G,UAAJ,CAAe,EAAf,CAArB,CAFM,CAEmC;AAFnC,SADH;AAKR+G,gBAAQ,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,WAAlC;AALA,QAAT;AAOA;AACD;AACC,cAAO;AACNrD,mBAAW;AACVtB,eAAM;AADI,SADL;AAIN2E,gBAAQ;AAJF,QAAP;AAxBF;AA+BA;AACD,SAAK,QAAL;AACC,aAAOD,UAAU/C,WAAV,EAAP;AAEC,WAAK,WAAL;AACA,WAAK,WAAL;AACA,WAAK,aAAL;AACA,WAAK,SAAL;AACA,WAAK,WAAL;AACCnE,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,QADI;AAEV9B,iBAAQ;AAFE,SADH;AAKRyG,gBAAQ,CAAC,SAAD,EAAY,WAAZ;AALA,QAAT;AAOA;AACD;AACC,cAAO;AACNrD,mBAAW;AACVtB,eAAM;AADI,SADL;AAIN2E,gBAAQ;AAJF,QAAP;AAhBF;AAuBA;AACD,SAAK,MAAL;AACC,aAAOD,UAAU/C,WAAV,EAAP;AAEC,WAAK,MAAL;AACA,WAAK,QAAL;AACCnE,gBAAS;AACR8D,mBAAW;AACVtB,eAAM;AADI,SADH;AAIR2E,gBAAQ,CAAC,MAAD,EAAS,QAAT;AAJA,QAAT;AAMA;AACD,WAAK,WAAL;AACA,WAAK,WAAL;AACA,WAAK,aAAL;AACCnH,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,MADI;AAEV9B,iBAAQ,EAFE;AAGVkE,eAAM;AACLpC,gBAAM;AADD;AAHI,SADH;AAQR2E,gBAAQ,CAAC,MAAD,EAAS,QAAT;AARA,QAAT;AAUA;AACD;AACC,cAAO;AACNrD,mBAAW;AACVtB,eAAM;AADI,SADL;AAIN2E,gBAAQ;AAJF,QAAP;AA1BF;AAiCA;AACD,SAAK,MAAL;AACC,aAAOD,UAAU/C,WAAV,EAAP;AAEC,WAAK,WAAL;AACCnE,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,MADI;AAEVoC,eAAM,SAFI;AAGVhF,eAAM,IAAIQ,UAAJ,CAAe,EAAf,CAHI;AAIVsH,eAAM,IAAItH,UAAJ,CAAe,EAAf;AAJI,SADH;AAOR+G,gBAAQ,CAAC,SAAD,EAAY,SAAZ;AAPA,QAAT;AASA;AACD;AACC,cAAO;AACNrD,mBAAW;AACVtB,eAAM;AADI,SADL;AAIN2E,gBAAQ;AAJF,QAAP;AAdF;AAqBA;AACD,SAAK,QAAL;AACC,aAAOD,UAAU/C,WAAV,EAAP;AAEC,WAAK,WAAL;AACCnE,gBAAS;AACR8D,mBAAW;AACVtB,eAAM,QADI;AAEVoC,eAAM,EAAEpC,MAAM,SAAR,EAFI;AAGV5C,eAAM,IAAIQ,UAAJ,CAAe,EAAf,CAHI;AAIVuH,qBAAY;AAJF,SADH;AAORR,gBAAQ,CAAC,SAAD,EAAY,SAAZ;AAPA,QAAT;AASA;AACD;AACC,cAAO;AACNrD,mBAAW;AACVtB,eAAM;AADI,SADL;AAIN2E,gBAAQ;AAJF,QAAP;AAdF;AAqBA;AACD;AAnaD;;AAsaA,UAAOnH,MAAP;AACA;AACD;AACA;;;;;;;;mCAKiB4H,kB,EACjB;AACC,OAAI5H,SAAS,EAAb;;AAEA,WAAO4H,mBAAmB3C,WAA1B;AAEC,SAAK,mBAAL,CAFD,CAE2B;AAC1B,SAAK,sBAAL;AACCjF,cAAS,OAAT;AACA;AACD,SAAK,qBAAL,CAND,CAM6B;AAC5B,SAAK,uBAAL;AACCA,cAAS,SAAT;AACA;AACD,SAAK,qBAAL,CAVD,CAU6B;AAC5B,SAAK,uBAAL;AACCA,cAAS,SAAT;AACA;AACD,SAAK,qBAAL,CAdD,CAc6B;AAC5B,SAAK,uBAAL;AACCA,cAAS,SAAT;AACA;AACD,SAAK,uBAAL;AAA8B;AAC7B;AACC,UACA;AACC,WAAM6H,SAAS,8BAAoB,EAAEC,QAAQF,mBAAmBG,eAA7B,EAApB,CAAf;AACA,WAAG,mBAAmBF,MAAtB,EACA;AACC,YAAM/D,YAAY,KAAKkE,iBAAL,CAAuBH,OAAOpI,aAAP,CAAqBwF,WAA5C,CAAlB;AACA,YAAI,UAAUnB,SAAX,KAA0B,KAA7B,EACC,OAAO,EAAP;;AAED9D,iBAAS8D,UAAUtB,IAAnB;AACA,QAPD,MASCxC,SAAS,OAAT;AACD,OAbD,CAcA,OAAM2E,EAAN,EACA,CACC;AACD;AACD;AACD;AAvCD;;AA0CA,UAAO3E,MAAP;AACA;AACD;AACA;;;;;;;;8CAK4ByD,U,EAC5B;AAAA;;AACC;AACA,OAAIA,sBAAsB2B,MAAvB,KAAmC,KAAtC,EACC,OAAOpD,QAAQwC,MAAR,CAAe,sCAAf,CAAP;;AAED,OAAI,cAAcf,UAAf,KAA+B,KAAlC,EACC,OAAOzB,QAAQwC,MAAR,CAAe,yCAAf,CAAP;;AAED,OAAI,gCAAgCf,UAAjC,KAAiD,KAApD,EACC,OAAOzB,QAAQwC,MAAR,CAAe,2DAAf,CAAP;;AAED,OAAI,uBAAuBf,UAAxB,KAAwC,KAA3C,EACC,OAAOzB,QAAQwC,MAAR,CAAe,kDAAf,CAAP;;AAED,OAAI,oBAAoBf,UAArB,KAAqC,KAAxC,EACC,OAAOzB,QAAQwC,MAAR,CAAe,+CAAf,CAAP;;AAED,OAAI,sBAAsBf,UAAvB,KAAuC,KAA1C,EACC,OAAOzB,QAAQwC,MAAR,CAAe,iDAAf,CAAP;;AAED,OAAI,iBAAiBf,UAAlB,KAAkC,KAArC,EACC,OAAOzB,QAAQwC,MAAR,CAAe,4CAAf,CAAP;;AAED,OAAMyD,uBAAuB,KAAKC,iBAAL,CAAuBzE,WAAW0E,0BAAlC,CAA7B;AACA,OAAGF,yBAAyB,EAA5B,EACC,OAAOjG,QAAQwC,MAAR,CAAe,4CAAf,CAAP;;AAED,OAAM4D,YAAY,KAAKF,iBAAL,CAAuB;AACxC1F,UAAM;AADkC,IAAvB,CAAlB;AAGA,OAAG4F,cAAc,EAAjB,EACC,OAAOpG,QAAQwC,MAAR,CAAe,6BAAf,CAAP;;AAED,OAAM6D,UAAU,KAAKH,iBAAL,CAAuB;AACtC1F,UAAM,MADgC;AAEtCoC,UAAM;AACLpC,WAAMiB,WAAW6E;AADZ;AAFgC,IAAvB,CAAhB;AAMA,OAAGD,YAAY,EAAf,EACC,OAAOrG,QAAQwC,MAAR,iDAA6Df,WAAW6E,iBAAxE,CAAP;AACD;;AAEA;AACA,OAAI1C,WAAW5D,QAAQC,OAAR,EAAf;;AAEA,OAAMsG,WAAW,IAAIjI,WAAJ,CAAgB,EAAhB,CAAjB,CA9CD,CA8CuC;AACtC,OAAMkI,SAAS,IAAIpI,UAAJ,CAAemI,QAAf,CAAf;AACA,QAAKzB,eAAL,CAAqB0B,MAArB;;AAEA,OAAMC,aAAa,IAAInI,WAAJ,CAAgB,EAAhB,CAAnB;AACA,OAAMc,WAAW,IAAIhB,UAAJ,CAAeqI,UAAf,CAAjB;AACA,QAAK3B,eAAL,CAAqB1F,QAArB;;AAEA,OAAMsH,cAAc,IAAItI,UAAJ,CAAeqD,WAAWkF,gBAA1B,CAApB;;AAEA,OAAMC,eAAe,2BAAiB;AACrChJ,UAAM,IAAIN,OAAOuJ,WAAX,CAAuB,EAAEC,UAAUL,UAAZ,EAAvB,CAD+B;AAErC5I,oBAAgB4D,WAAW5D,cAFU;AAGrCkJ,SAAK,kCAAwB;AAC5B9D,kBAAaoD,OADe;AAE5BN,sBAAiB,IAAIzI,OAAO0J,IAAX;AAFW,KAAxB;AAHgC,IAAjB,CAArB;AAQA;;AAEA;AACApD,cAAWA,SAAS1D,IAAT,CAAc,YACzB;AACC,QAAMT,eAAe,IAAIrB,UAAJ,CAAeqD,WAAW9D,QAA1B,CAArB;;AAEA,WAAO,OAAKyE,SAAL,CAAe,KAAf,EACN3C,YADM,EAEN,QAFM,EAGN,KAHM,EAIN,CAAC,WAAD,CAJM,CAAP;AAKA,IATU,EASR;AAAA,WACFO,QAAQwC,MAAR,CAAeyE,KAAf,CADE;AAAA,IATQ,CAAX;AAYA;;AAEA;AACArD,cAAWA,SAAS1D,IAAT,CAAc;AAAA,WACxB,OAAKuE,SAAL,CAAe;AACdjE,WAAM,QADQ;AAEdoC,WAAM;AACLpC,YAAMiB,WAAW6E;AADZ,MAFQ;AAKd1I,WAAMwB,QALQ;AAMduG,iBAAYlE,WAAW5D;AANT,KAAf,EAQAG,MARA,EASAyD,WAAW0E,0BATX,EAUA,KAVA,EAWA,CAAC,SAAD,CAXA,CADwB;AAAA,IAAd,EAaV;AAAA,WACCnG,QAAQwC,MAAR,CAAeyE,KAAf,CADD;AAAA,IAbU,CAAX;AAgBA;;AAEA;AACArD,cAAWA,SAAS1D,IAAT,CAAc;AAAA,WACxB,OAAKkE,OAAL,CAAa;AACZ5D,WAAMiB,WAAW0E,0BAAX,CAAsC3F,IADhC;AAEZiF,SAAIe;AAFQ,KAAb,EAIAxI,MAJA,EAKA0I,WALA,CADwB;AAAA,IAAd,EAOV;AAAA,WACC1G,QAAQwC,MAAR,CAAeyE,KAAf,CADD;AAAA,IAPU,CAAX;AAUA;;AAEA;AACArD,cAAWA,SAAS1D,IAAT,CAAc,kBACzB;AACC,QAAMgH,kBAAkB,0BAAgB;AACvCC,wBAAmB,kCAAwB;AAC1ClE,mBAAamD,SAD6B;AAE1CL,uBAAiBa,aAAa5C,QAAb;AAFyB,MAAxB,CADoB;AAKvCoD,uBAAkB,kCAAwB;AACzCnE,mBAAagD,oBAD4B;AAEzCF,uBAAiB,IAAIzI,OAAOuJ,WAAX,CAAuB,EAAEC,UAAUP,QAAZ,EAAvB;AAFwB,MAAxB;AALqB,KAAhB,CAAxB;;AAWA,WAAO,mCAAyB;AAC/Bc,kBAAa5F,WAAW4F,WADO;AAE/BlB,iCAA4B,kCAAwB;AACnDlD,mBAAa,uBADsC,EACb;AACtC8C,uBAAiBmB,gBAAgBlD,QAAhB;AAFkC,MAAxB,CAFG;AAM/BsD,uBAAkB,IAAIhK,OAAOuJ,WAAX,CAAuB,EAAEC,UAAU9I,MAAZ,EAAvB;AANa,KAAzB,CAAP;AAQA,IArBU,EAqBR;AAAA,WACFgC,QAAQwC,MAAR,CAAeyE,KAAf,CADE;AAAA,IArBQ,CAAX;AAwBA;;AAEA,UAAOrD,QAAP;AACA;AACD;AACA;;;;;;;;8CAK4BnC,U,EAC5B;AAAA;;AACC;AACA,OAAIA,sBAAsB2B,MAAvB,KAAmC,KAAtC,EACC,OAAOpD,QAAQwC,MAAR,CAAe,sCAAf,CAAP;;AAED,OAAI,cAAcf,UAAf,KAA+B,KAAlC,EACC,OAAOzB,QAAQwC,MAAR,CAAe,yCAAf,CAAP;;AAED,OAAI,0BAA0Bf,UAA3B,KAA2C,KAA9C,EACC,OAAOzB,QAAQwC,MAAR,CAAe,qDAAf,CAAP;;AAED,OAAGf,WAAW8F,oBAAX,CAAgCpB,0BAAhC,CAA2DlD,WAA3D,KAA2E,uBAA9E,EAAuG;AACtG,WAAOjD,QAAQwC,MAAR,8CAA0Df,WAAW8F,oBAAX,CAAgCpB,0BAAhC,CAA2DlD,WAArH,CAAP;AACD;;AAEA;AACA,OAAIW,WAAW5D,QAAQC,OAAR,EAAf;;AAEA,OAAIiH,wBAAJ;;AAEA,OACA;AACCA,sBAAkB,0BAAgB,EAAEpB,QAAQrE,WAAW8F,oBAAX,CAAgCpB,0BAAhC,CAA2DJ,eAArE,EAAhB,CAAlB;AACA,IAHD,CAIA,OAAMpD,EAAN,EACA;AACC,WAAO3C,QAAQwC,MAAR,CAAe,yCAAf,CAAP;AACA;;AAED,OAAIoE,qBAAJ;;AAEA,OACA;AACCA,mBAAe,2BAAiB,EAAEd,QAAQoB,gBAAgBC,iBAAhB,CAAkCpB,eAA5C,EAAjB,CAAf;AACA,IAHD,CAIA,OAAMpD,EAAN,EACA;AACC,WAAO3C,QAAQwC,MAAR,CAAe,sCAAf,CAAP;AACA;;AAED,OAAM2D,6BAA6B,KAAKH,iBAAL,CAAuBkB,gBAAgBE,gBAAhB,CAAiCnE,WAAxD,CAAnC;AACA,OAAI,UAAUkD,0BAAX,KAA2C,KAA9C,EACC,OAAOnG,QAAQwC,MAAR,wDAAoE0E,gBAAgBE,gBAAhB,CAAiCnE,WAArG,CAAP;;AAED,OAAMsD,WAAWW,gBAAgBE,gBAAhB,CAAiCrB,eAAjC,CAAiDyB,UAAjD,CAA4DV,QAA7E;AACA,OAAMN,SAAS,IAAIpI,UAAJ,CAAemI,QAAf,CAAf;;AAEA,OAAME,aAAaG,aAAahJ,IAAb,CAAkB4J,UAAlB,CAA6BV,QAAhD;AACA,OAAM1H,WAAW,IAAIhB,UAAJ,CAAeqI,UAAf,CAAjB;;AAEA,OAAM5I,iBAAiB+I,aAAa/I,cAApC;;AAEA,OAAIyI,oBAAoB,OAAxB;;AAEA,OAAG,SAASM,YAAZ,EACA;AACC,QAAM9E,YAAY,KAAKkE,iBAAL,CAAuBY,aAAaG,GAAb,CAAiB9D,WAAxC,CAAlB;AACA,QAAI,UAAUnB,SAAX,KAA0B,KAA7B,EACC,OAAO9B,QAAQwC,MAAR,CAAe,uCAAf,CAAP;;AAED8D,wBAAoBxE,UAAUc,IAAV,CAAepC,IAAnC;AACA;AACD;;AAEA;AACAoD,cAAWA,SAAS1D,IAAT,CAAc;AAAA,WACxB,OAAKkC,SAAL,CAAe,KAAf,EACCX,WAAW9D,QADZ,EAEC,QAFD,EAGC,KAHD,EAIC,CAAC,WAAD,CAJD,CADwB;AAAA,IAAd,EAMV;AAAA,WACCqC,QAAQwC,MAAR,CAAeyE,KAAf,CADD;AAAA,IANU,CAAX;AASA;;AAEA;AACArD,cAAWA,SAAS1D,IAAT,CAAc;AAAA,WACxB,OAAKuE,SAAL,CAAe;AACdjE,WAAM,QADQ;AAEdoC,WAAM;AACLpC,YAAM8F;AADD,MAFQ;AAKd1I,WAAMwB,QALQ;AAMduG,iBAAY9H;AANE,KAAf,EAQAG,MARA,EASAmI,0BATA,EAUA,KAVA,EAWA,CAAC,SAAD,CAXA,CADwB;AAAA,IAAd,EAaV;AAAA,WACCnG,QAAQwC,MAAR,CAAeyE,KAAf,CADD;AAAA,IAbU,CAAX;AAgBA;;AAEA;AACArD,cAAWA,SAAS1D,IAAT,CAAc,kBACzB;AACC;AACA,QAAIuH,aAAa,IAAInJ,WAAJ,CAAgB,CAAhB,CAAjB;;AAEA,QAAGmD,WAAW8F,oBAAX,CAAgCD,gBAAhC,CAAiDI,OAAjD,CAAyDC,aAAzD,KAA2E,KAA9E,EACCF,aAAahG,WAAW8F,oBAAX,CAAgCD,gBAAhC,CAAiDE,UAAjD,CAA4DV,QAAzE,CADD,KAGA;AAAA;AAAA;AAAA;;AAAA;AACC,4BAAqBrF,WAAW8F,oBAAX,CAAgCD,gBAAhC,CAAiDE,UAAjD,CAA4DI,KAAjF;AAAA,WAAUC,OAAV;;AACCJ,oBAAa,4BAAcA,UAAd,EAA0BI,QAAQL,UAAR,CAAmBV,QAA7C,CAAb;AADD;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGC;AACD;;AAEA,WAAO,OAAKzC,OAAL,CAAa;AACnB7D,WAAM2F,2BAA2B3F,IADd;AAEnBiF,SAAIe;AAFe,KAAb,EAIPxI,MAJO,EAKPyJ,UALO,CAAP;AAMA,IApBU,EAoBR;AAAA,WACFzH,QAAQwC,MAAR,CAAeyE,KAAf,CADE;AAAA,IApBQ,CAAX;AAuBA;;AAEA,UAAOrD,QAAP;AACA;AACD;AACA;;;;;;;;wCAKsBnC,U,EACtB;AAAA;;AACC;AACA,OAAIA,sBAAsB2B,MAAvB,KAAmC,KAAtC,EACC,OAAOpD,QAAQwC,MAAR,CAAe,sCAAf,CAAP;;AAED,OAAI,cAAcf,UAAf,KAA+B,KAAlC,EACC,OAAOzB,QAAQwC,MAAR,CAAe,yCAAf,CAAP;;AAED,OAAI,mBAAmBf,UAApB,KAAoC,KAAvC,EACC,OAAOzB,QAAQwC,MAAR,CAAe,8CAAf,CAAP;;AAED,OAAI,UAAUf,UAAX,KAA2B,KAA9B,EACC,OAAOzB,QAAQwC,MAAR,CAAe,+CAAf,CAAP;;AAED,OAAI,oBAAoBf,UAArB,KAAqC,KAAxC,EACC,OAAOzB,QAAQwC,MAAR,CAAe,qCAAf,CAAP;;AAED,OAAI,oBAAoBf,UAArB,KAAqC,KAAxC,EACC,OAAOzB,QAAQwC,MAAR,CAAe,+CAAf,CAAP;AACD;;AAEA;AACA,OAAI9D,eAAJ;;AAEA,WAAO+C,WAAWhE,aAAX,CAAyB0E,WAAzB,EAAP;AAEC,SAAK,OAAL;AACCzD,cAAS,GAAT;AACA;AACD,SAAK,SAAL;AACCA,cAAS,GAAT;AACA;AACD,SAAK,SAAL;AACCA,cAAS,GAAT;AACA;AACD,SAAK,SAAL;AACCA,cAAS,GAAT;AACA;AACD;AACC,YAAOsB,QAAQwC,MAAR,wDAAoEf,WAAWhE,aAA/E,CAAP;AAfF;AAiBA;;AAEA;AACA,OAAImG,WAAW5D,QAAQC,OAAR,EAAf;;AAEA,OAAM6H,gBAAgB;AACrBtH,UAAM,MADe;AAErB9B,kBAFqB;AAGrBkE,UAAM;AACLpC,WAAMiB,WAAWhE;AADZ;AAHe,IAAtB;AAOA;;AAEA;AACAmG,cAAWA,SAAS1D,IAAT,CAAc;AAAA,WAAM3C,wBAAsBkE,WAAWhE,aAAjC,EAAgDiB,MAAhD,EAAwD+C,WAAW9D,QAAnE,EAA6E8D,WAAW7D,IAAxF,EAA8F6D,WAAW5D,cAAzG,CAAN;AAAA,IAAd,CAAX;AACA;;AAEA;AACA+F,cAAWA,SAAS1D,IAAT,CAAc;AAAA,WACxB,OAAKkC,SAAL,CAAe,KAAf,EACC,IAAIhE,UAAJ,CAAeJ,MAAf,CADD,EAEC8J,aAFD,EAGC,KAHD,EAIC,CAAC,MAAD,CAJD,CADwB;AAAA,IAAd,CAAX;AAOA;;AAEA;AACAlE,cAAWA,SAAS1D,IAAT,CACV;AAAA,WACC,OAAKoE,IAAL,CAAUwD,aAAV,EAAyB9J,MAAzB,EAAiC,IAAII,UAAJ,CAAeqD,WAAWsG,cAA1B,CAAjC,CADD;AAAA,IADU,EAGV;AAAA,WAAS/H,QAAQwC,MAAR,CAAeyE,KAAf,CAAT;AAAA,IAHU,CAAX;AAKA;;AAEA,UAAOrD,QAAP;AACA;AACD;;;;gDAC8BnC,U,EAC9B;AAAA;;AACC;AACA,OAAIA,sBAAsB2B,MAAvB,KAAmC,KAAtC,EACC,OAAOpD,QAAQwC,MAAR,CAAe,sCAAf,CAAP;;AAED,OAAI,cAAcf,UAAf,KAA+B,KAAlC,EACC,OAAOzB,QAAQwC,MAAR,CAAe,yCAAf,CAAP;;AAED,OAAI,mBAAmBf,UAApB,KAAoC,KAAvC,EACC,OAAOzB,QAAQwC,MAAR,CAAe,8CAAf,CAAP;;AAED,OAAI,UAAUf,UAAX,KAA2B,KAA9B,EACC,OAAOzB,QAAQwC,MAAR,CAAe,+CAAf,CAAP;;AAED,OAAI,oBAAoBf,UAArB,KAAqC,KAAxC,EACC,OAAOzB,QAAQwC,MAAR,CAAe,qCAAf,CAAP;;AAED,OAAI,qBAAqBf,UAAtB,KAAsC,KAAzC,EACC,OAAOzB,QAAQwC,MAAR,CAAe,gDAAf,CAAP;;AAED,OAAI,uBAAuBf,UAAxB,KAAwC,KAA3C,EACC,OAAOzB,QAAQwC,MAAR,CAAe,kDAAf,CAAP;AACD;;AAEA;AACA,OAAI9D,eAAJ;;AAEA,WAAO+C,WAAWhE,aAAX,CAAyB0E,WAAzB,EAAP;AAEC,SAAK,OAAL;AACCzD,cAAS,GAAT;AACA;AACD,SAAK,SAAL;AACCA,cAAS,GAAT;AACA;AACD,SAAK,SAAL;AACCA,cAAS,GAAT;AACA;AACD,SAAK,SAAL;AACCA,cAAS,GAAT;AACA;AACD;AACC,YAAOsB,QAAQwC,MAAR,wDAAoEf,WAAWhE,aAA/E,CAAP;AAfF;AAiBA;;AAEA;AACA,OAAImG,WAAW5D,QAAQC,OAAR,EAAf;;AAEA,OAAM6H,gBAAgB;AACrBtH,UAAM,MADe;AAErB9B,kBAFqB;AAGrBkE,UAAM;AACLpC,WAAMiB,WAAWhE;AADZ;AAHe,IAAtB;AAOA;;AAEA;AACAmG,cAAWA,SAAS1D,IAAT,CAAc;AAAA,WAAM3C,wBAAsBkE,WAAWhE,aAAjC,EAAgDiB,MAAhD,EAAwD+C,WAAW9D,QAAnE,EAA6E8D,WAAW7D,IAAxF,EAA8F6D,WAAW5D,cAAzG,CAAN;AAAA,IAAd,CAAX;AACA;;AAEA;AACA+F,cAAWA,SAAS1D,IAAT,CAAc;AAAA,WACxB,OAAKkC,SAAL,CAAe,KAAf,EACC,IAAIhE,UAAJ,CAAeJ,MAAf,CADD,EAEC8J,aAFD,EAGC,KAHD,EAIC,CAAC,QAAD,CAJD,CADwB;AAAA,IAAd,CAAX;AAOA;;AAEA;AACAlE,cAAWA,SAAS1D,IAAT,CACV;AAAA,WACC,OAAKqE,MAAL,CAAYuD,aAAZ,EAA2B9J,MAA3B,EAAmC,IAAII,UAAJ,CAAeqD,WAAWuG,iBAA1B,CAAnC,EAAiF,IAAI5J,UAAJ,CAAeqD,WAAWwG,eAA1B,CAAjF,CADD;AAAA,IADU,EAGV;AAAA,WAASjI,QAAQwC,MAAR,CAAeyE,KAAf,CAAT;AAAA,IAHU,CAAX;AAKA;;AAEA,UAAOrD,QAAP;AACA;AACD;AACA;;;;;;;;;yCAMuBsE,U,EACvB;AAAA,OADmCzK,aACnC,uEADmD,OACnD;;AACC;AACA,OAAMsH,MAAM,KAAKmB,iBAAL,CAAuB,EAAE1F,MAAM/C,aAAR,EAAvB,CAAZ;AACA,OAAGsH,QAAQ,EAAX,EACC,OAAO/E,QAAQwC,MAAR,kCAA8C/E,aAA9C,CAAP;AACD;;AAEA;AACA,OAAMmI,qBAAqB,mCAA3B;AACA;;AAEA;AACA,OAAMnE,aAAa,KAAK0G,sBAAL,CAA4BD,WAAWpG,SAAX,CAAqBtB,IAAjD,EAAuD,MAAvD,CAAnB;AACAiB,cAAWK,SAAX,CAAqBc,IAArB,CAA0BpC,IAA1B,GAAiC/C,aAAjC;AACA;;AAEA;AACA,WAAOyK,WAAWpG,SAAX,CAAqBtB,IAArB,CAA0BvC,WAA1B,EAAP;AAEC,SAAK,mBAAL;AACA,SAAK,OAAL;AACC2H,wBAAmB3C,WAAnB,GAAiC,KAAKiD,iBAAL,CAAuBzE,WAAWK,SAAlC,CAAjC;AACA;AACD,SAAK,SAAL;AACC;AACC;AACA,cAAOrE,cAAcQ,WAAd,EAAP;AAEC,YAAK,SAAL;AACCwD,mBAAWK,SAAX,CAAqBhD,UAArB,GAAkC,EAAlC;AACA;AACD,YAAK,SAAL;AACC2C,mBAAWK,SAAX,CAAqBhD,UAArB,GAAkC,EAAlC;AACA;AACD,YAAK,SAAL;AACC2C,mBAAWK,SAAX,CAAqBhD,UAArB,GAAkC,EAAlC;AACA;AACD;AAXD;AAaA;;AAEA;AACA,UAAMsJ,eAAe,EAArB;;AAEA,UAAG3K,cAAcQ,WAAd,OAAgC,OAAnC,EACA;AACC,WAAMoK,mBAAmB,KAAKnC,iBAAL,CAAuB,EAAE1F,MAAM/C,aAAR,EAAvB,CAAzB;AACA,WAAG4K,qBAAqB,EAAxB,EACC,OAAOrI,QAAQwC,MAAR,kCAA8C/E,aAA9C,CAAP;;AAED2K,oBAAa3K,aAAb,GAA6B,kCAAwB;AACpDwF,qBAAaoF,gBADuC;AAEpDtC,yBAAiB,IAAIzI,OAAO0J,IAAX;AAFmC,QAAxB,CAA7B;;AAKAoB,oBAAaE,gBAAb,GAAgC,kCAAwB;AACvDrF,qBAAa,sBAD0C,EAClB;AACrC8C,yBAAiBqC,aAAa3K,aAAb,CAA2BuG,QAA3B;AAFsC,QAAxB,CAAhC;AAIA;;AAED,UAAGvC,WAAWK,SAAX,CAAqBhD,UAArB,KAAoC,EAAvC,EACCsJ,aAAatJ,UAAb,GAA0B2C,WAAWK,SAAX,CAAqBhD,UAA/C;;AAED,UAAMyJ,gBAAgB,8BAAoBH,YAApB,CAAtB;AACA;;AAEA;AACAxC,yBAAmB3C,WAAnB,GAAiC,uBAAjC;AACA2C,yBAAmBG,eAAnB,GAAqCwC,cAAcvE,QAAd,EAArC;AACA;AACA;AACD;AACD;AACC,YAAOhE,QAAQwC,MAAR,uCAAmD0F,WAAWpG,SAAX,CAAqBtB,IAAxE,CAAP;AAzDF;AA2DA;;AAEA,UAAOR,QAAQC,OAAR,GAAkBC,IAAlB,CAAuB;AAAA,WAAO;AACpC0F,2CADoC;AAEpCnE;AAFoC,KAAP;AAAA,IAAvB,CAAP;AAIA;AACD;AACA;;;;;;;;;;qCAOmB+G,I,EAAMN,U,EAAYzG,U,EACrC;AACC,UAAO,KAAK6C,IAAL,CAAU7C,WAAWK,SAArB,EACNoG,UADM,EAEN,IAAI9J,UAAJ,CAAeoK,IAAf,CAFM,EAGLtI,IAHK,CAGA,kBACN;AACC;AACA,QAAGuB,WAAWK,SAAX,CAAqBtB,IAArB,KAA8B,OAAjC,EACCxC,SAAS,qCAAwBA,MAAxB,CAAT;AACD;;AAEA,WAAOA,MAAP;AACA,IAXK,EAWH;AAAA,WACFgC,QAAQwC,MAAR,qBAAiCyE,KAAjC,CADE;AAAA,IAXG,CAAP;AAcA;AACD;;;;0CACwBxE,a,EAAemD,kB,EACvC;AACC,OAAMnE,aAAa,EAAnB;;AAEA;AACA,OAAMgH,eAAe,KAAKC,gBAAL,CAAsB9C,kBAAtB,CAArB;AACA,OAAG6C,iBAAiB,EAApB,EACC,OAAOzI,QAAQwC,MAAR,uCAAmDoD,mBAAmB3C,WAAtE,CAAP;AACD;;AAEA;AACA,OAAIA,oBAAJ;AACA,OAAG2C,mBAAmB3C,WAAnB,KAAmC,uBAAtC,EACCA,cAAc2C,mBAAmB3C,WAAjC,CADD,KAGCA,cAAcR,cAAcX,SAAd,CAAwBmB,WAAtC;;AAED,OAAM0F,kBAAkB,KAAK3C,iBAAL,CAAuB/C,WAAvB,CAAxB;AACA,OAAI,UAAU0F,eAAX,KAAgC,EAAnC,EACC,OAAO3I,QAAQwC,MAAR,wCAAoDoD,mBAAmB3C,WAAvE,CAAP;;AAEDxB,cAAWK,SAAX,GAAuB,KAAKqG,sBAAL,CAA4BQ,gBAAgBnI,IAA5C,EAAkD,WAAlD,CAAvB;AACA,OAAG,UAAUiB,WAAWK,SAAX,CAAqBA,SAAlC,EACCL,WAAWK,SAAX,CAAqBA,SAArB,CAA+Bc,IAA/B,CAAoCpC,IAApC,GAA2CiI,YAA3C;;AAED;AACA,OAAGE,gBAAgBnI,IAAhB,KAAyB,OAA5B,EACA;AACC;AACA,QAAIoI,yBAAyB,KAA7B;;AAEA,QAAI,qBAAqBnG,cAAcX,SAApC,KAAmD,IAAtD,EACA;AACC,SAAG,aAAaW,cAAcX,SAAd,CAAwBiE,eAAxC,EACA;AACC,UAAItD,cAAcX,SAAd,CAAwBiE,eAAxB,CAAwC2B,OAAxC,CAAgDmB,QAAhD,KAA6D,CAA9D,IAAqEpG,cAAcX,SAAd,CAAwBiE,eAAxB,CAAwC2B,OAAxC,CAAgDoB,SAAhD,KAA8D,CAAtI,EACCF,yBAAyB,IAAzB;AACD;AACD;;AAED,QAAGA,2BAA2B,KAA9B,EACC,OAAO5I,QAAQwC,MAAR,CAAe,gDAAf,CAAP;;AAED,QAAMuG,cAAc,KAAK/C,iBAAL,CAAuBvD,cAAcX,SAAd,CAAwBiE,eAAxB,CAAwCyB,UAAxC,CAAmDwB,QAAnD,EAAvB,CAApB;AACA,QAAI,UAAUD,WAAX,KAA4B,KAA/B,EACC,OAAO/I,QAAQwC,MAAR,yCAAqDC,cAAcX,SAAd,CAAwBiE,eAAxB,CAAwCyB,UAAxC,CAAmDwB,QAAnD,EAArD,CAAP;AACD;;AAEAvH,eAAWK,SAAX,CAAqBA,SAArB,CAA+BwD,UAA/B,GAA4CyD,YAAYvI,IAAxD;AACA;AACD;AACA;;AAEA,UAAOiB,UAAP;AACA;AACD;;;;+BACagB,a,EAAemD,kB,EAC5B;AAAA,OADgDnE,UAChD,uEAD6D,IAC7D;;AACC,OAAGA,eAAe,IAAlB,EACCA,aAAa,KAAKwH,uBAAL,CAA6BxG,aAA7B,EAA4CmD,kBAA5C,CAAb;;AAED,OAAMsD,sBAAsBzG,cAAcuB,QAAd,EAA5B;AACA,OAAMmF,sBAAsBD,oBAAoBjF,KAApB,CAA0B,KAA1B,CAA5B;AACA,OAAMmF,oBAAoB,IAAIhL,UAAJ,CAAe+K,mBAAf,CAA1B;;AAEA,UAAO,KAAK/G,SAAL,CAAe,MAAf,EACNgH,iBADM,EAEN3H,WAAWK,SAAX,CAAqBA,SAFf,EAGN,IAHM,EAINL,WAAWK,SAAX,CAAqBqD,MAJf,CAAP;AAMA;AACD;;;;sCACoBqD,I,EAAMa,S,EAAW5G,a,EAAemD,kB,EACpD;AAAA;;AACC;AACA,OAAIhC,WAAW5D,QAAQC,OAAR,EAAf;AACA;;AAEA;AACA,OAAMwI,eAAe,KAAKC,gBAAL,CAAsB9C,kBAAtB,CAArB;AACA,OAAG6C,iBAAiB,EAApB,EACC,OAAOzI,QAAQwC,MAAR,uCAAmDoD,mBAAmB3C,WAAtE,CAAP;AACD;;AAEA;AACAW,cAAWA,SAAS1D,IAAT,CAAc;AAAA,WACxB,OAAKoJ,YAAL,CAAkB7G,aAAlB,EAAiCmD,kBAAjC,CADwB;AAAA,IAAd,CAAX;AAEA;;AAEA;AACAhC,cAAWA,SAAS1D,IAAT,CAAc,qBACzB;AACC;AACA,QAAM4B,YAAY,OAAKqG,sBAAL,CAA4BoB,UAAUzH,SAAV,CAAoBtB,IAAhD,EAAsD,QAAtD,CAAlB;AACA,QAAG,UAAUsB,UAAUA,SAAvB,EACCA,UAAUA,SAAV,CAAoBc,IAApB,CAAyBpC,IAAzB,GAAgCiI,YAAhC;AACD;;AAEA;AACA,QAAIe,iBAAiBH,UAAU7B,UAAV,CAAqBV,QAA1C;;AAEA,QAAGyC,UAAUzH,SAAV,CAAoBtB,IAApB,KAA6B,OAAhC,EACA;AACC,SAAM6B,OAAO/E,OAAOgF,OAAP,CAAekH,cAAf,CAAb;AACAA,sBAAiB,yCAA4BnH,KAAKrE,MAAjC,CAAjB;AACA;AACD;;AAEA;AACA,QAAGuL,UAAUzH,SAAV,CAAoBtB,IAApB,KAA6B,SAAhC,EACA;AACC,SAAI+H,sBAAJ;;AAEA,SACA;AACCA,sBAAgB,8BAAoB,EAAEzC,QAAQF,mBAAmBG,eAA7B,EAApB,CAAhB;AACA,MAHD,CAIA,OAAMpD,EAAN,EACA;AACC,aAAO3C,QAAQwC,MAAR,CAAeG,EAAf,CAAP;AACA;;AAED,SAAG,gBAAgB4F,aAAnB,EACCzG,UAAUA,SAAV,CAAoBhD,UAApB,GAAiCyJ,cAAczJ,UAA/C,CADD,KAGCgD,UAAUA,SAAV,CAAoBhD,UAApB,GAAiC,EAAjC;;AAED,SAAI2K,WAAW,OAAf;;AAEA,SAAG,mBAAmBlB,aAAtB,EACA;AACC,UAAM9K,gBAAgB,OAAKuI,iBAAL,CAAuBuC,cAAc9K,aAAd,CAA4BwF,WAAnD,CAAtB;AACA,UAAI,UAAUxF,aAAX,KAA8B,KAAjC,EACC,OAAOuC,QAAQwC,MAAR,mCAA+C+F,cAAc9K,aAAd,CAA4BwF,WAA3E,CAAP;;AAEDwG,iBAAWhM,cAAc+C,IAAzB;AACA;;AAEDsB,eAAUA,SAAV,CAAoBc,IAApB,CAAyBpC,IAAzB,GAAgCiJ,QAAhC;AACA;AACD;;AAEA,WAAO,OAAKlF,MAAL,CAAYzC,UAAUA,SAAtB,EACNyH,SADM,EAEN,IAAInL,UAAJ,CAAeoL,cAAf,CAFM,EAGN,IAAIpL,UAAJ,CAAeoK,IAAf,CAHM,CAAP;AAKA,IAzDU,CAAX;AA0DA;;AAEA,UAAO5E,QAAP;AACA;AACD;;;;;;AAED;;;kBAnvEqBpC,Y","file":"CryptoEngine.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, stringToArrayBuffer, arrayBufferToString, utilConcatBuf } from \"pvutils\";\r\nimport { createCMSECDSASignature, createECDSASignatureFromCMS } from \"./common.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams.js\";\r\nimport PBKDF2Params from \"./PBKDF2Params.js\";\r\nimport PBES2Params from \"./PBES2Params.js\";\r\n//**************************************************************************************\r\n/**\r\n * Making MAC key using algorithm described in B.2 of PKCS#12 standard.\r\n */\r\nfunction makePKCS12B2Key(cryptoEngine, hashAlgorithm, keyLength, password, salt, iterationCount)\r\n{\r\n\t//region Initial variables\r\n\tlet u;\r\n\tlet v;\r\n\t\r\n\tconst result = [];\r\n\t//endregion\r\n\t\r\n\t//region Get \"u\" and \"v\" values\r\n\tswitch(hashAlgorithm.toUpperCase())\r\n\t{\r\n\t\tcase \"SHA-1\":\r\n\t\t\tu = 20; // 160\r\n\t\t\tv = 64; // 512\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-256\":\r\n\t\t\tu = 32; // 256\r\n\t\t\tv = 64; // 512\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-384\":\r\n\t\t\tu = 48; // 384\r\n\t\t\tv = 128; // 1024\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-512\":\r\n\t\t\tu = 64; // 512\r\n\t\t\tv = 128; // 1024\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(\"Unsupported hashing algorithm\");\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Main algorithm making key\r\n\t//region Transform password to UTF-8 like string\r\n\tconst passwordViewInitial = new Uint8Array(password);\r\n\t\r\n\tconst passwordTransformed = new ArrayBuffer((password.byteLength * 2) + 2);\r\n\tconst passwordTransformedView = new Uint8Array(passwordTransformed);\r\n\t\r\n\tfor(let i = 0; i < passwordViewInitial.length; i++)\r\n\t{\r\n\t\tpasswordTransformedView[i * 2] = 0x00;\r\n\t\tpasswordTransformedView[i * 2 + 1] = passwordViewInitial[i];\r\n\t}\r\n\t\r\n\tpasswordTransformedView[passwordTransformedView.length - 2] = 0x00;\r\n\tpasswordTransformedView[passwordTransformedView.length - 1] = 0x00;\r\n\t\r\n\tpassword = passwordTransformed.slice(0);\r\n\t//endregion\r\n\t\r\n\t//region Construct a string D (the \"diversifier\") by concatenating v/8 copies of ID\r\n\tconst D = new ArrayBuffer(v);\r\n\tconst dView = new Uint8Array(D);\r\n\t\r\n\tfor(let i = 0; i < D.byteLength; i++)\r\n\t\tdView[i] = 3; // The ID value equal to \"3\" for MACing (see B.3 of standard)\r\n\t//endregion\r\n\t\r\n\t//region Concatenate copies of the salt together to create a string S of length v * ceil(s / v) bytes (the final copy of the salt may be trunacted to create S)\r\n\tconst saltLength = salt.byteLength;\r\n\t\r\n\tconst sLen = v * Math.ceil(saltLength / v);\r\n\tconst S = new ArrayBuffer(sLen);\r\n\tconst sView = new Uint8Array(S);\r\n\t\r\n\tconst saltView = new Uint8Array(salt);\r\n\t\r\n\tfor(let i = 0; i < sLen; i++)\r\n\t\tsView[i] = saltView[i % saltLength];\r\n\t//endregion\r\n\t\r\n\t//region Concatenate copies of the password together to create a string P of length v * ceil(p / v) bytes (the final copy of the password may be truncated to create P)\r\n\tconst passwordLength = password.byteLength;\r\n\t\r\n\tconst pLen = v * Math.ceil(passwordLength / v);\r\n\tconst P = new ArrayBuffer(pLen);\r\n\tconst pView = new Uint8Array(P);\r\n\t\r\n\tconst passwordView = new Uint8Array(password);\r\n\t\r\n\tfor(let i = 0; i < pLen; i++)\r\n\t\tpView[i] = passwordView[i % passwordLength];\r\n\t//endregion\r\n\t\r\n\t//region Set I=S||P to be the concatenation of S and P\r\n\tconst sPlusPLength = S.byteLength + P.byteLength;\r\n\t\r\n\tlet I = new ArrayBuffer(sPlusPLength);\r\n\tlet iView = new Uint8Array(I);\r\n\t\r\n\tiView.set(sView);\r\n\tiView.set(pView, sView.length);\r\n\t//endregion\r\n\t\r\n\t//region Set c=ceil(n / u)\r\n\tconst c = Math.ceil((keyLength >> 3) / u);\r\n\t//endregion\r\n\t\r\n\t//region Initial variables\r\n\tlet internalSequence = Promise.resolve(I);\r\n\t//endregion\r\n\t\r\n\t//region For i=1, 2, ..., c, do the following:\r\n\tfor(let i = 0; i <= c; i++)\r\n\t{\r\n\t\tinternalSequence = internalSequence.then(_I =>\r\n\t\t{\r\n\t\t\t//region Create contecanetion of D and I\r\n\t\t\tconst dAndI = new ArrayBuffer(D.byteLength + _I.byteLength);\r\n\t\t\tconst dAndIView = new Uint8Array(dAndI);\r\n\t\t\t\r\n\t\t\tdAndIView.set(dView);\r\n\t\t\tdAndIView.set(iView, dView.length);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn dAndI;\r\n\t\t});\r\n\t\t\r\n\t\t//region Make \"iterationCount\" rounds of hashing\r\n\t\tfor(let j = 0; j < iterationCount; j++)\r\n\t\t\tinternalSequence = internalSequence.then(roundBuffer => cryptoEngine.digest({ name: hashAlgorithm }, new Uint8Array(roundBuffer)));\r\n\t\t//endregion\r\n\t\t\r\n\t\tinternalSequence = internalSequence.then(roundBuffer =>\r\n\t\t{\r\n\t\t\t//region Concatenate copies of Ai to create a string B of length v bits (the final copy of Ai may be truncated to create B)\r\n\t\t\tconst B = new ArrayBuffer(v);\r\n\t\t\tconst bView = new Uint8Array(B);\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < B.byteLength; j++)\r\n\t\t\t\tbView[j] = roundBuffer[j % roundBuffer.length];\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make new I value\r\n\t\t\tconst k = Math.ceil(saltLength / v) + Math.ceil(passwordLength / v);\r\n\t\t\tconst iRound = [];\r\n\t\t\t\r\n\t\t\tlet sliceStart = 0;\r\n\t\t\tlet sliceLength = v;\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < k; j++)\r\n\t\t\t{\r\n\t\t\t\tconst chunk = Array.from(new Uint8Array(I.slice(sliceStart, sliceStart + sliceLength)));\r\n\t\t\t\tsliceStart += v;\r\n\t\t\t\tif((sliceStart + v) > I.byteLength)\r\n\t\t\t\t\tsliceLength = I.byteLength - sliceStart;\r\n\t\t\t\t\r\n\t\t\t\tlet x = 0x1ff;\r\n\t\t\t\t\r\n\t\t\t\tfor(let l = (B.byteLength - 1); l >= 0; l--)\r\n\t\t\t\t{\r\n\t\t\t\t\tx >>= 8;\r\n\t\t\t\t\tx += bView[l] + chunk[l];\r\n\t\t\t\t\tchunk[l] = (x & 0xff);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tiRound.push(...chunk);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tI = new ArrayBuffer(iRound.length);\r\n\t\t\tiView = new Uint8Array(I);\r\n\t\t\t\r\n\t\t\tiView.set(iRound);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tresult.push(...(new Uint8Array(roundBuffer)));\r\n\t\t\t\r\n\t\t\treturn I;\r\n\t\t});\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Initialize final key\r\n\tinternalSequence = internalSequence.then(() =>\r\n\t{\r\n\t\tconst resultBuffer = new ArrayBuffer(keyLength >> 3);\r\n\t\tconst resultView = new Uint8Array(resultBuffer);\r\n\t\t\r\n\t\tresultView.set((new Uint8Array(result)).slice(0, keyLength >> 3));\r\n\t\t\r\n\t\treturn resultBuffer;\r\n\t});\r\n\t//endregion\r\n\t//endregion\r\n\t\r\n\treturn internalSequence;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Default cryptographic engine for Web Cryptography API\r\n */\r\nexport default class CryptoEngine\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CryptoEngine class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @description Usually here we are expecting \"window.crypto\" or an equivalent from custom \"crypto engine\"\r\n\t\t */\r\n\t\tthis.crypto = getParametersValue(parameters, \"crypto\", {});\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @description Usually here we are expecting \"window.crypto.subtle\" or an equivalent from custom \"crypto engine\"\r\n\t\t */\r\n\t\tthis.subtle = getParametersValue(parameters, \"subtle\", {});\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description Name of the \"crypto engine\"\r\n\t\t */\r\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Import WebCrypto keys from different formats\r\n\t * @param {string} format\r\n\t * @param {ArrayBuffer|Uint8Array} keyData\r\n\t * @param {Object} algorithm\r\n\t * @param {boolean} extractable\r\n\t * @param {Array} keyUsages\r\n\t * @returns {Promise}\r\n\t */\r\n\timportKey(format, keyData, algorithm, extractable, keyUsages)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet jwk = {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Change \"keyData\" type if needed\r\n\t\tif(keyData instanceof Uint8Array)\r\n\t\t\tkeyData = keyData.buffer;\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(format.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\treturn this.subtle.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\r\n\t\t\tcase \"spki\":\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\r\n\t\t\t\t\tconst publicKeyInfo = new PublicKeyInfo();\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublicKeyInfo.fromSchema(asn1.result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\r\n\t\t\t\t\t\t\t\tif(publicKeyInfo.algorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif((\"alg\" in jwk) === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"ECDSA\":\r\n\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\r\n\t\t\t\t\t\tcase \"ECDH\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\t\tjwk = {\r\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\r\n\t\t\t\t\t\t\t\t\text: extractable,\r\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about algorithm\r\n\t\t\t\t\t\t\t\tif(publicKeyInfo.algorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyInfo = new PrivateKeyInfo();\r\n\r\n\t\t\t\t\t//region Parse \"PrivateKeyInfo\" object\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprivateKeyInfo.fromSchema(asn1.result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"parsedKey\" in privateKeyInfo) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif((\"alg\" in jwk) === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"ECDSA\":\r\n\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\r\n\t\t\t\t\t\tcase \"ECDH\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\t\tjwk = {\r\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\r\n\t\t\t\t\t\t\t\t\text: extractable,\r\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tjwk = keyData;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\r\n\t\t}\r\n\t\t\r\n\t\t//region Special case for Safari browser (since its acting not as WebCrypto standard describes)\r\n\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t{\r\n\t\t\t// Try to use both ways - import using ArrayBuffer and pure JWK (for Safari Technology Preview)\r\n\t\t\treturn Promise.resolve().then(() => this.subtle.importKey(\"jwk\", stringToArrayBuffer(JSON.stringify(jwk)), algorithm, extractable, keyUsages))\r\n\t\t\t\t.then(result => result, error => this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Export WebCrypto keys to different formats\r\n\t * @param {string} format\r\n\t * @param {Object} key\r\n\t * @returns {Promise}\r\n\t */\r\n\texportKey(format, key)\r\n\t{\r\n\t\tlet sequence = this.subtle.exportKey(\"jwk\", key);\r\n\t\t\r\n\t\t//region Currently Safari returns ArrayBuffer as JWK thus we need an additional transformation\r\n\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t{\r\n\t\t\tsequence = sequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t// Some additional checks for Safari Technology Preview\r\n\t\t\t\tif(result instanceof ArrayBuffer)\r\n\t\t\t\t\treturn JSON.parse(arrayBufferToString(result));\r\n\t\t\t\t\r\n\t\t\t\treturn result;\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(format.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\treturn this.subtle.exportKey(\"raw\", key);\r\n\t\t\tcase \"spki\":\r\n\t\t\t\tsequence = sequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst publicKeyInfo = new PublicKeyInfo();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublicKeyInfo.fromJSON(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn publicKeyInfo.toSchema().toBER(false);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\tsequence = sequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyInfo = new PrivateKeyInfo();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprivateKeyInfo.fromJSON(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn privateKeyInfo.toSchema().toBER(false);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\r\n\t\t}\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert WebCrypto keys between different export formats\r\n\t * @param {string} inputFormat\r\n\t * @param {string} outputFormat\r\n\t * @param {ArrayBuffer|Object} keyData\r\n\t * @param {Object} algorithm\r\n\t * @param {boolean} extractable\r\n\t * @param {Array} keyUsages\r\n\t * @returns {Promise}\r\n\t */\r\n\tconvert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages)\r\n\t{\r\n\t\tswitch(inputFormat.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"spki\", result));\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"pkcs8\", result));\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"spki\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"spki\", result));\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"pkcs8\", result));\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect inputFormat: ${inputFormat}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"encrypt\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(...args)\r\n\t{\r\n\t\treturn this.subtle.encrypt(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"decrypt\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tdecrypt(...args)\r\n\t{\r\n\t\treturn this.subtle.decrypt(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"sign\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(...args)\r\n\t{\r\n\t\treturn this.subtle.sign(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"verify\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(...args)\r\n\t{\r\n\t\treturn this.subtle.verify(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"digest\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tdigest(...args)\r\n\t{\r\n\t\treturn this.subtle.digest(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"generateKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tgenerateKey(...args)\r\n\t{\r\n\t\treturn this.subtle.generateKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"deriveKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tderiveKey(...args)\r\n\t{\r\n\t\treturn this.subtle.deriveKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"deriveBits\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tderiveBits(...args)\r\n\t{\r\n\t\treturn this.subtle.deriveBits(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"wrapKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\twrapKey(...args)\r\n\t{\r\n\t\treturn this.subtle.wrapKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"unwrapKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tunwrapKey(...args)\r\n\t{\r\n\t\treturn this.subtle.unwrapKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Initialize input Uint8Array by random values (with help from current \"crypto engine\")\r\n\t * @param {!Uint8Array} view\r\n\t * @returns {*}\r\n\t */\r\n\tgetRandomValues(view)\r\n\t{\r\n\t\tif((\"getRandomValues\" in this.crypto) === false)\r\n\t\t\tthrow new Error(\"No support for getRandomValues\");\r\n\t\t\r\n\t\treturn this.crypto.getRandomValues(view);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get WebCrypto algorithm by wel-known OID\r\n\t * @param {string} oid well-known OID to search for\r\n\t * @returns {Object}\r\n\t */\r\n\tgetAlgorithmByOID(oid)\r\n\t{\r\n\t\tswitch(oid)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.1.1\":\r\n\t\t\tcase \"1.2.840.113549.1.1.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.11\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.12\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.13\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.10\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSA-PSS\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.2.1\":\r\n\t\t\tcase \"1.2.840.10045.4.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.4\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.133.16.840.63.0.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-1\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-512\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.22\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.42\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.6\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.26\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.46\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.4\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.24\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.44\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.25\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.45\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.9\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.10\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.11\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.9.16.3.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"DH\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.14.3.2.26\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.5.12\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t};\r\n\t\t\t//region Special case - OIDs for ECC curves\r\n\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-521\"\r\n\t\t\t\t};\r\n\t\t\t//endregion\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn {};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OID for each specific algorithm\r\n\t * @param {Object} algorithm\r\n\t * @returns {string}\r\n\t */\r\n\tgetOIDByAlgorithm(algorithm)\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.5\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.11\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.12\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.13\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.10\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.7\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.1\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.2\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.3\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.4\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDH\":\r\n\t\t\t\tswitch(algorithm.kdf.toUpperCase()) // Non-standard addition - hash algorithm of KDF function\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.3.133.16.840.63.0.2\"; // dhSinglePass-stdDH-sha1kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.1\"; // dhSinglePass-stdDH-sha256kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.2\"; // dhSinglePass-stdDH-sha384kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.3\"; // dhSinglePass-stdDH-sha512kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CTR\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CBC\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.2\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.22\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.42\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CMAC\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-GCM\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.6\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.26\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.46\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CFB\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.4\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.24\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.44\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-KW\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.5\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.25\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.45\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HMAC\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.7\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.9\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.10\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.11\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"DH\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.9.16.3.5\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-1\":\r\n\t\t\t\tresult = \"1.3.14.3.2.26\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-256\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-384\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.2\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-512\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.3\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"CONCAT\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HKDF\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"PBKDF2\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.5.12\";\r\n\t\t\t\tbreak;\r\n\t\t\t//region Special case - OIDs for ECC curves\r\n\t\t\tcase \"P-256\":\r\n\t\t\t\tresult = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"P-384\":\r\n\t\t\t\tresult = \"1.3.132.0.34\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"P-521\":\r\n\t\t\t\tresult = \"1.3.132.0.35\";\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get default algorithm parameters for each kind of operation\r\n\t * @param {string} algorithmName Algorithm name to get common parameters for\r\n\t * @param {string} operation Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"\r\n\t * @returns {*}\r\n\t */\r\n\tgetAlgorithmParameters(algorithmName, operation)\r\n\t{\r\n\t\tlet result = {\r\n\t\t\talgorithm: {},\r\n\t\t\tusages: []\r\n\t\t};\r\n\t\t\r\n\t\tswitch(algorithmName.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tsaltLength: 20\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\"] // encrypt for \"spki\" and decrypt for \"pkcs8\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // \"sign\" for \"pkcs8\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDH\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"deriveKey\", \"deriveBits\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\tcase \"derivebits\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\",\r\n\t\t\t\t\t\t\t\tpublic: [] // Must be a \"publicKey\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CTR\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\",\r\n\t\t\t\t\t\t\t\tcounter: new Uint8Array(16),\r\n\t\t\t\t\t\t\t\tlength: 10\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CBC\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\t\t\t\tiv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-GCM\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\t\t\t\tiv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-KW\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\tcase \"wrapkey\":\r\n\t\t\t\t\tcase \"unwrapkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-KW\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HMAC\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\t\t\tlength: 32,\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HKDF\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HKDF\",\r\n\t\t\t\t\t\t\t\thash: \"SHA-256\",\r\n\t\t\t\t\t\t\t\tsalt: new Uint8Array([]),\r\n\t\t\t\t\t\t\t\tinfo: new Uint8Array([])\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HKDF\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"PBKDF2\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\t\t\t\thash: { name: \"SHA-256\" },\r\n\t\t\t\t\t\t\t\tsalt: new Uint8Array([]),\r\n\t\t\t\t\t\t\t\titerations: 10000\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getting hash algorithm by signature algorithm\r\n\t * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm\r\n\t * @returns {string}\r\n\t */\r\n\tgetHashAlgorithm(signatureAlgorithm)\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tswitch(signatureAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.4.1\": // ecdsa-with-SHA1\r\n\t\t\tcase \"1.2.840.113549.1.1.5\":\r\n\t\t\t\tresult = \"SHA-1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.2\": // ecdsa-with-SHA256\r\n\t\t\tcase \"1.2.840.113549.1.1.11\":\r\n\t\t\t\tresult = \"SHA-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.3\": // ecdsa-with-SHA384\r\n\t\t\tcase \"1.2.840.113549.1.1.12\":\r\n\t\t\t\tresult = \"SHA-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.4\": // ecdsa-with-SHA512\r\n\t\t\tcase \"1.2.840.113549.1.1.13\":\r\n\t\t\t\tresult = \"SHA-512\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.10\": // RSA-PSS\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst params = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n\t\t\t\t\t\tif(\"hashAlgorithm\" in params)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);\r\n\t\t\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\t\t\treturn \"\";\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tresult = algorithm.name;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tresult = \"SHA-1\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Specialized function encrypting \"EncryptedContentInfo\" object using parameters\r\n\t * @param {Object} parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tencryptEncryptedContentInfo(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"contentEncryptionAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentEncryptionAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"hmacHashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"contentToEncrypt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToEncrypt\\\"\");\r\n\t\t\r\n\t\tif((\"contentType\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentType\\\"\");\r\n\r\n\t\tconst contentEncryptionOID = this.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm);\r\n\t\tif(contentEncryptionOID === \"\")\r\n\t\t\treturn Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\r\n\t\t\r\n\t\tconst pbkdf2OID = this.getOIDByAlgorithm({\r\n\t\t\tname: \"PBKDF2\"\r\n\t\t});\r\n\t\tif(pbkdf2OID === \"\")\r\n\t\t\treturn Promise.reject(\"Can not find OID for PBKDF2\");\r\n\t\t\r\n\t\tconst hmacOID = this.getOIDByAlgorithm({\r\n\t\t\tname: \"HMAC\",\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t}\r\n\t\t});\r\n\t\tif(hmacOID === \"\")\r\n\t\t\treturn Promise.reject(`Incorrect value for \\\"hmacHashAlgorithm\\\": ${parameters.hmacHashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\tthis.getRandomValues(ivView);\r\n\t\t\r\n\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\tthis.getRandomValues(saltView);\r\n\t\t\r\n\t\tconst contentView = new Uint8Array(parameters.contentToEncrypt);\r\n\t\t\r\n\t\tconst pbkdf2Params = new PBKDF2Params({\r\n\t\t\tsalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\titerationCount: parameters.iterationCount,\r\n\t\t\tprf: new AlgorithmIdentifier({\r\n\t\t\t\talgorithmId: hmacOID,\r\n\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t})\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tconst passwordView = new Uint8Array(parameters.password);\r\n\t\t\t\r\n\t\t\treturn this.importKey(\"raw\",\r\n\t\t\t\tpasswordView,\r\n\t\t\t\t\"PBKDF2\",\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"deriveKey\"]);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.deriveKey({\r\n\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t\t},\r\n\t\t\t\tsalt: saltView,\r\n\t\t\t\titerations: parameters.iterationCount\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tparameters.contentEncryptionAlgorithm,\r\n\t\t\tfalse,\r\n\t\t\t[\"encrypt\"]),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Encrypt content\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.encrypt({\r\n\t\t\t\tname: parameters.contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tcontentView),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Store all parameters in EncryptedData object\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tconst pbes2Parameters = new PBES2Params({\r\n\t\t\t\tkeyDerivationFunc: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: pbkdf2OID,\r\n\t\t\t\t\talgorithmParams: pbkdf2Params.toSchema()\r\n\t\t\t\t}),\r\n\t\t\t\tencryptionScheme: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: contentEncryptionOID,\r\n\t\t\t\t\talgorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn new EncryptedContentInfo({\r\n\t\t\t\tcontentType: parameters.contentType,\r\n\t\t\t\tcontentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.2.840.113549.1.5.13\", // pkcs5PBES2\r\n\t\t\t\t\talgorithmParams: pbes2Parameters.toSchema()\r\n\t\t\t\t}),\r\n\t\t\t\tencryptedContent: new asn1js.OctetString({ valueHex: result })\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Decrypt data stored in \"EncryptedContentInfo\" object using parameters\r\n\t * @param parameters\r\n\t * @return {Promise}\r\n\t */\r\n\tdecryptEncryptedContentInfo(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"encryptedContentInfo\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"encryptedContentInfo\\\"\");\r\n\r\n\t\tif(parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== \"1.2.840.113549.1.5.13\") // pkcs5PBES2\r\n\t\t\treturn Promise.reject(`Unknown \\\"contentEncryptionAlgorithm\\\": ${parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet pbes2Parameters;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tpbes2Parameters = new PBES2Params({ schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbes2Parameters\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\tlet pbkdf2Params;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tpbkdf2Params = new PBKDF2Params({ schema: pbes2Parameters.keyDerivationFunc.algorithmParams });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbkdf2Params\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\tconst contentEncryptionAlgorithm = this.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId);\r\n\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\treturn Promise.reject(`Incorrect OID for \\\"contentEncryptionAlgorithm\\\": ${pbes2Parameters.encryptionScheme.algorithmId}`);\r\n\t\t\r\n\t\tconst ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\t\r\n\t\tconst saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;\r\n\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\r\n\t\tconst iterationCount = pbkdf2Params.iterationCount;\r\n\t\t\r\n\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\r\n\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t{\r\n\t\t\tconst algorithm = this.getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\r\n\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\tparameters.password,\r\n\t\t\t\t\"PBKDF2\",\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"deriveKey\"]),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.deriveKey({\r\n\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t},\r\n\t\t\t\tsalt: saltView,\r\n\t\t\t\titerations: iterationCount\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\tfalse,\r\n\t\t\t[\"decrypt\"]),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Decrypt internal content using derived key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Create correct data block for decryption\r\n\t\t\tlet dataBuffer = new ArrayBuffer(0);\r\n\t\t\t\r\n\t\t\tif(parameters.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\tdataBuffer = parameters.encryptedContentInfo.encryptedContent.valueBlock.valueHex;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor(const content of parameters.encryptedContentInfo.encryptedContent.valueBlock.value)\r\n\t\t\t\t\tdataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn this.decrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tdataBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Stamping (signing) data using algorithm simular to HMAC\r\n\t * @param {Object} parameters\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tstampDataWithPassword(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"salt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\r\n\t\t\r\n\t\tif((\"contentToStamp\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToStamp\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Choose correct length for HMAC key\r\n\t\tlet length;\r\n\t\t\r\n\t\tswitch(parameters.hashAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"sha-1\":\r\n\t\t\t\tlength = 160;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-256\":\r\n\t\t\t\tlength = 256;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-384\":\r\n\t\t\t\tlength = 384;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-512\":\r\n\t\t\t\tlength = 512;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect \\\"parameters.hashAlgorithm\\\" parameter: ${parameters.hashAlgorithm}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst hmacAlgorithm = {\r\n\t\t\tname: \"HMAC\",\r\n\t\t\tlength,\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hashAlgorithm\r\n\t\t\t}\r\n\t\t};\r\n\t\t//endregion\r\n\r\n\t\t//region Create PKCS#12 key for integrity checking\r\n\t\tsequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Import HMAC key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\tnew Uint8Array(result),\r\n\t\t\t\thmacAlgorithm,\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"sign\"])\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make signed HMAC value\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.sign(hmacAlgorithm, result, new Uint8Array(parameters.contentToStamp)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverifyDataStampedWithPassword(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"salt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\r\n\t\t\r\n\t\tif((\"contentToVerify\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToVerify\\\"\");\r\n\t\t\r\n\t\tif((\"signatureToVerify\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"signatureToVerify\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Choose correct length for HMAC key\r\n\t\tlet length;\r\n\t\t\r\n\t\tswitch(parameters.hashAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"sha-1\":\r\n\t\t\t\tlength = 160;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-256\":\r\n\t\t\t\tlength = 256;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-384\":\r\n\t\t\t\tlength = 384;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-512\":\r\n\t\t\t\tlength = 512;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect \\\"parameters.hashAlgorithm\\\" parameter: ${parameters.hashAlgorithm}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst hmacAlgorithm = {\r\n\t\t\tname: \"HMAC\",\r\n\t\t\tlength,\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hashAlgorithm\r\n\t\t\t}\r\n\t\t};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create PKCS#12 key for integrity checking\r\n\t\tsequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Import HMAC key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\tnew Uint8Array(result),\r\n\t\t\t\thmacAlgorithm,\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"verify\"])\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make signed HMAC value\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.verify(hmacAlgorithm, result, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get signature parameters by analyzing private key algorithm\r\n\t * @param {Object} privateKey The private key user would like to use\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hash algorithm user would like to use\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tgetSignatureParameters(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Check hashing algorithm\r\n\t\tconst oid = this.getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(oid === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tconst signatureAlgorithm = new AlgorithmIdentifier();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm\r\n\t\tconst parameters = this.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\r\n\t\tparameters.algorithm.hash.name = hashAlgorithm;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\"\r\n\t\tswitch(privateKey.algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tsignatureAlgorithm.algorithmId = this.getOIDByAlgorithm(parameters.algorithm);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Set \"saltLength\" as a length (in octets) of hash function result\r\n\t\t\t\t\tswitch(hashAlgorithm.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 32;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 48;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 64;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Fill \"RSASSA_PSS_params\" object\r\n\t\t\t\t\tconst paramsObject = {};\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst hashAlgorithmOID = this.getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tparamsObject.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tparamsObject.maskGenAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\r\n\t\t\t\t\t\t\talgorithmParams: paramsObject.hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(parameters.algorithm.saltLength !== 20)\r\n\t\t\t\t\t\tparamsObject.saltLength = parameters.algorithm.saltLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst pssParameters = new RSASSAPSSParams(paramsObject);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Automatically set signature algorithm\r\n\t\t\t\t\tsignatureAlgorithm.algorithmId = \"1.2.840.113549.1.1.10\";\r\n\t\t\t\t\tsignatureAlgorithm.algorithmParams = pssParameters.toSchema();\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn Promise.resolve().then(() => ({\r\n\t\t\tsignatureAlgorithm,\r\n\t\t\tparameters\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Sign data with pre-defined private key\r\n\t * @param {ArrayBuffer} data Data to be signed\r\n\t * @param {Object} privateKey Private key to use\r\n\t * @param {Object} parameters Parameters for used algorithm\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tsignWithPrivateKey(data, privateKey, parameters)\r\n\t{\r\n\t\treturn this.sign(parameters.algorithm,\r\n\t\t\tprivateKey,\r\n\t\t\tnew Uint8Array(data))\r\n\t\t\t.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Special case for ECDSA algorithm\r\n\t\t\t\tif(parameters.algorithm.name === \"ECDSA\")\r\n\t\t\t\t\tresult = createCMSECDSASignature(result);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn result;\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(`Signing error: ${error}`)\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\tfillPublicKeyParameters(publicKeyInfo, signatureAlgorithm)\r\n\t{\r\n\t\tconst parameters = {};\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tconst shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\r\n\t\tif(shaAlgorithm === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\tlet algorithmId;\r\n\t\tif(signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\talgorithmId = signatureAlgorithm.algorithmId;\r\n\t\telse\r\n\t\t\talgorithmId = publicKeyInfo.algorithm.algorithmId;\r\n\t\t\r\n\t\tconst algorithmObject = this.getAlgorithmByOID(algorithmId);\r\n\t\tif((\"name\" in algorithmObject) === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\r\n\t\tparameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\tif(\"hash\" in parameters.algorithm.algorithm)\r\n\t\t\tparameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\r\n\t\t//region Special case for ECDSA\r\n\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t{\r\n\t\t\t//region Get information about named curve\r\n\t\t\tlet algorithmParamsChecked = false;\r\n\t\t\t\r\n\t\t\tif((\"algorithmParams\" in publicKeyInfo.algorithm) === true)\r\n\t\t\t{\r\n\t\t\t\tif(\"idBlock\" in publicKeyInfo.algorithm.algorithmParams)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n\t\t\t\t\t\talgorithmParamsChecked = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(algorithmParamsChecked === false)\r\n\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\t\t\t\r\n\t\t\tconst curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tparameters.algorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn parameters;\r\n\t}\r\n\t//**********************************************************************************\r\n\tgetPublicKey(publicKeyInfo, signatureAlgorithm, parameters = null)\r\n\t{\r\n\t\tif(parameters === null)\r\n\t\t\tparameters = this.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);\r\n\t\t\r\n\t\tconst publicKeyInfoSchema = publicKeyInfo.toSchema();\r\n\t\tconst publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\r\n\t\tconst publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\r\n\t\t\r\n\t\treturn this.importKey(\"spki\",\r\n\t\t\tpublicKeyInfoView,\r\n\t\t\tparameters.algorithm.algorithm,\r\n\t\t\ttrue,\r\n\t\t\tparameters.algorithm.usages\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\tverifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tconst shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\r\n\t\tif(shaAlgorithm === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Import public key\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tthis.getPublicKey(publicKeyInfo, signatureAlgorithm));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify signature\r\n\t\tsequence = sequence.then(publicKey =>\r\n\t\t{\r\n\t\t\t//region Get default algorithm parameters for verification\r\n\t\t\tconst algorithm = this.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA signatures\r\n\t\t\tlet signatureValue = signature.valueBlock.valueHex;\r\n\t\t\t\r\n\t\t\tif(publicKey.algorithm.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(signatureValue);\r\n\t\t\t\tsignatureValue = createECDSASignatureFromCMS(asn1.result);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for RSA-PSS\r\n\t\t\tif(publicKey.algorithm.name === \"RSA-PSS\")\r\n\t\t\t{\r\n\t\t\t\tlet pssParameters;\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpssParameters = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(ex);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(\"saltLength\" in pssParameters)\r\n\t\t\t\t\talgorithm.algorithm.saltLength = pssParameters.saltLength;\r\n\t\t\t\telse\r\n\t\t\t\t\talgorithm.algorithm.saltLength = 20;\r\n\t\t\t\t\r\n\t\t\t\tlet hashAlgo = \"SHA-1\";\r\n\t\t\t\t\r\n\t\t\t\tif(\"hashAlgorithm\" in pssParameters)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst hashAlgorithm = this.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\r\n\t\t\t\t\thashAlgo = hashAlgorithm.name;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\talgorithm.algorithm.hash.name = hashAlgo;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn this.verify(algorithm.algorithm,\r\n\t\t\t\tpublicKey,\r\n\t\t\t\tnew Uint8Array(signatureValue),\r\n\t\t\t\tnew Uint8Array(data)\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}