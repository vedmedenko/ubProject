{"version":3,"sources":["../src/Certificate.js"],"names":["asn1js","tbsCertificate","parameters","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Integer","tbsCertificateVersion","tbsCertificateSerialNumber","schema","signature","issuer","tbsCertificateValidity","notBefore","utcTimeName","generalTimeName","notAfter","subject","subjectPublicKeyInfo","Primitive","tbsCertificateIssuerUniqueID","tbsCertificateSubjectUniqueID","extensions","Certificate","tbs","defaultValues","version","serialNumber","issuerUniqueID","subjectUniqueID","signatureAlgorithm","signatureValue","fromSchema","asn1","compareSchema","verified","Error","result","valueBeforeDecode","valueBlock","valueDec","valueHex","Array","from","element","outputArray","push","toSchema","encodeFlag","tbsSchema","length","fromBER","encodeTBS","object","byteLength","toJSON","subtle","getPublicKey","crypto","Promise","reject","digest","Uint8Array","subjectPublicKey","privateKey","hashAlgorithm","sequence","resolve","engine","then","getSignatureParameters","toBER","signWithPrivateKey","BitString","issuerCertificate","isEqual","verifyWithPublicKey","memberName","ArrayBuffer"],"mappings":"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","file":"Certificate.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes } from \"pvutils\";\r\nimport {\r\n\tgetCrypto,\r\n\tgetEngine\r\n} from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport Time from \"./Time.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\nfunction tbsCertificate(parameters = {})\r\n{\r\n\t//TBSCertificate  ::=  SEQUENCE  {\r\n\t//    version         [0]  EXPLICIT Version DEFAULT v1,\r\n\t//    serialNumber         CertificateSerialNumber,\r\n\t//    signature            AlgorithmIdentifier,\r\n\t//    issuer               Name,\r\n\t//    validity             Validity,\r\n\t//    subject              Name,\r\n\t//    subjectPublicKeyInfo SubjectPublicKeyInfo,\r\n\t//    issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\r\n\t//                         -- If present, version MUST be v2 or v3\r\n\t//    subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\r\n\t//                         -- If present, version MUST be v2 or v3\r\n\t//    extensions      [3]  EXPLICIT Extensions OPTIONAL\r\n\t//    -- If present, version MUST be v3\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [tbsCertificateVersion]\r\n\t * @property {string} [tbsCertificateSerialNumber]\r\n\t * @property {string} [signature]\r\n\t * @property {string} [issuer]\r\n\t * @property {string} [tbsCertificateValidity]\r\n\t * @property {string} [notBefore]\r\n\t * @property {string} [notAfter]\r\n\t * @property {string} [subject]\r\n\t * @property {string} [subjectPublicKeyInfo]\r\n\t * @property {string} [tbsCertificateIssuerUniqueID]\r\n\t * @property {string} [tbsCertificateSubjectUniqueID]\r\n\t * @property {string} [extensions]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.blockName || \"tbsCertificate\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ name: (names.tbsCertificateVersion || \"tbsCertificate.version\") }) // EXPLICIT integer value\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Integer({ name: (names.tbsCertificateSerialNumber || \"tbsCertificate.serialNumber\") }),\r\n\t\t\tAlgorithmIdentifier.schema(names.signature || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.signature\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.issuer || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.issuer\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\tname: (names.tbsCertificateValidity || \"tbsCertificate.validity\"),\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tTime.schema(names.notBefore || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tutcTimeName: \"tbsCertificate.notBefore\",\r\n\t\t\t\t\t\t\tgeneralTimeName: \"tbsCertificate.notBefore\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tTime.schema(names.notAfter || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tutcTimeName: \"tbsCertificate.notAfter\",\r\n\t\t\t\t\t\t\tgeneralTimeName: \"tbsCertificate.notAfter\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.subject || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.subject\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tPublicKeyInfo.schema(names.subjectPublicKeyInfo || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.subjectPublicKeyInfo\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Primitive({\r\n\t\t\t\tname: (names.tbsCertificateIssuerUniqueID || \"tbsCertificate.issuerUniqueID\"),\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t}\r\n\t\t\t}), // IMPLICIT bistring value\r\n\t\t\tnew asn1js.Primitive({\r\n\t\t\t\tname: (names.tbsCertificateSubjectUniqueID || \"tbsCertificate.subjectUniqueID\"),\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t}\r\n\t\t\t}), // IMPLICIT bistring value\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [Extensions.schema(names.extensions || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsCertificate.extensions\"\r\n\t\t\t\t\t}\r\n\t\t\t\t})]\r\n\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class Certificate\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Certificate class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", Certificate.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", Certificate.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", Certificate.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", Certificate.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @description issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", Certificate.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @description notBefore\r\n\t\t */\r\n\t\tthis.notBefore = getParametersValue(parameters, \"notBefore\", Certificate.defaultValues(\"notBefore\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @description notAfter\r\n\t\t */\r\n\t\tthis.notAfter = getParametersValue(parameters, \"notAfter\", Certificate.defaultValues(\"notAfter\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @description subject\r\n\t\t */\r\n\t\tthis.subject = getParametersValue(parameters, \"subject\", Certificate.defaultValues(\"subject\"));\r\n\t\t/**\r\n\t\t * @type {PublicKeyInfo}\r\n\t\t * @description subjectPublicKeyInfo\r\n\t\t */\r\n\t\tthis.subjectPublicKeyInfo = getParametersValue(parameters, \"subjectPublicKeyInfo\", Certificate.defaultValues(\"subjectPublicKeyInfo\"));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ArrayBuffer}\r\n\t\t\t * @description issuerUniqueID\r\n\t\t\t */\r\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", Certificate.defaultValues(\"issuerUniqueID\"));\r\n\t\t\r\n\t\tif(\"subjectUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ArrayBuffer}\r\n\t\t\t * @description subjectUniqueID\r\n\t\t\t */\r\n\t\t\tthis.subjectUniqueID = getParametersValue(parameters, \"subjectUniqueID\", Certificate.defaultValues(\"subjectUniqueID\"));\r\n\t\t\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array}\r\n\t\t\t * @description extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", Certificate.defaultValues(\"extensions\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", Certificate.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description signatureValue\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", Certificate.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"notBefore\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"notAfter\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"subject\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"subjectPublicKeyInfo\":\r\n\t\t\t\treturn new PublicKeyInfo();\r\n\t\t\tcase \"issuerUniqueID\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"subjectUniqueID\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Certificate class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//Certificate  ::=  SEQUENCE  {\r\n\t\t//    tbsCertificate       TBSCertificate,\r\n\t\t//    signatureAlgorithm   AlgorithmIdentifier,\r\n\t\t//    signatureValue       BIT STRING  }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsCertificate]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsCertificate(names.tbsCertificate),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificate.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttbsCertificate: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\textensions: {\r\n\t\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\t\textensions: \"tbsCertificate.extensions\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CERT\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.tbsCertificate.valueBeforeDecode;\r\n\t\t\r\n\t\tif(\"tbsCertificate.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"tbsCertificate.version\"].valueBlock.valueDec;\r\n\t\tthis.serialNumber = asn1.result[\"tbsCertificate.serialNumber\"];\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result[\"tbsCertificate.signature\"] });\r\n\t\tthis.issuer = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertificate.issuer\"] });\r\n\t\tthis.notBefore = new Time({ schema: asn1.result[\"tbsCertificate.notBefore\"] });\r\n\t\tthis.notAfter = new Time({ schema: asn1.result[\"tbsCertificate.notAfter\"] });\r\n\t\tthis.subject = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertificate.subject\"] });\r\n\t\tthis.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[\"tbsCertificate.subjectPublicKeyInfo\"] });\r\n\t\tif(\"tbsCertificate.issuerUniqueID\" in asn1.result)\r\n\t\t\tthis.issuerUniqueID = asn1.result[\"tbsCertificate.issuerUniqueID\"].valueBlock.valueHex;\r\n\t\tif(\"tbsCertificate.subjectUniqueID\" in asn1.result)\r\n\t\t\tthis.issuerUniqueID = asn1.result[\"tbsCertificate.subjectUniqueID\"].valueBlock.valueHex;\r\n\t\tif(\"tbsCertificate.extensions\" in asn1.result)\r\n\t\t\tthis.extensions = Array.from(asn1.result[\"tbsCertificate.extensions\"], element => new Extension({ schema: element }));\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create ASN.1 schema for existing values of TBS part for the certificate\r\n\t */\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif((\"version\" in this) && (this.version !== Certificate.defaultValues(\"version\")))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ value: this.version }) // EXPLICIT integer value\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(this.serialNumber);\r\n\t\toutputArray.push(this.signature.toSchema());\r\n\t\toutputArray.push(this.issuer.toSchema());\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.notBefore.toSchema(),\r\n\t\t\t\tthis.notAfter.toSchema()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t\r\n\t\toutputArray.push(this.subject.toSchema());\r\n\t\toutputArray.push(this.subjectPublicKeyInfo.toSchema());\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.issuerUniqueID\r\n\t\t\t}));\r\n\t\t}\r\n\t\tif(\"subjectUniqueID\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.subjectUniqueID\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"subjectUniqueID\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.extensions.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create and return output sequence\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\tlet tbsSchema = {};\r\n\t\t\r\n\t\t//region Decode stored TBS value\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.length === 0) // No stored certificate TBS part\r\n\t\t\t\treturn Certificate.schema().value[0];\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tserialNumber: this.serialNumber.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON(),\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tnotBefore: this.notBefore.toJSON(),\r\n\t\t\tnotAfter: this.notAfter.toJSON(),\r\n\t\t\tsubject: this.subject.toJSON(),\r\n\t\t\tsubjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif((\"version\" in this) && (this.version !== Certificate.defaultValues(\"version\")))\r\n\t\t\tobject.version = this.version;\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tobject.issuerUniqueID = bufferToHexCodes(this.issuerUniqueID, 0, this.issuerUniqueID.byteLength);\r\n\t\t\r\n\t\tif(\"subjectUniqueID\" in this)\r\n\t\t\tobject.subjectUniqueID = bufferToHexCodes(this.subjectUniqueID, 0, this.subjectUniqueID.byteLength);\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tobject.extensions = Array.from(this.extensions, element => element.toJSON());\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Importing public key for current certificate\r\n\t */\r\n\tgetPublicKey(parameters = null)\r\n\t{\r\n\t\treturn getEngine().subtle.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get SHA-1 hash value for subject public key\r\n\t */\r\n\tgetKeyHash()\r\n\t{\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn crypto.digest({ name: \"sha-1\" }, new Uint8Array(this.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for current value from TBS section\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Check private key\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signature = result.signatureAlgorithm;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverify(issuerCertificate = null)\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet subjectPublicKeyInfo = {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set correct \"subjectPublicKeyInfo\" value\r\n\t\tif(issuerCertificate !== null)\r\n\t\t\tsubjectPublicKeyInfo = issuerCertificate.subjectPublicKeyInfo;\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(this.issuer.isEqual(this.subject)) // Self-signed certificate\r\n\t\t\t\tsubjectPublicKeyInfo = this.subjectPublicKeyInfo;\r\n\t\t}\r\n\t\t\r\n\t\tif((subjectPublicKeyInfo instanceof PublicKeyInfo) === false)\r\n\t\t\treturn Promise.reject(\"Please provide issuer certificate as a parameter\");\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn getEngine().subtle.verifyWithPublicKey(this.tbs, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}