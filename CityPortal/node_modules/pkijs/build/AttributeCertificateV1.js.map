{"version":3,"sources":["../src/AttributeCertificateV1.js"],"names":["asn1js","AttCertValidityPeriod","parameters","notBeforeTime","defaultValues","notAfterTime","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","toDate","Sequence","value","GeneralizedTime","valueDate","memberName","Date","name","blockName","IssuerSerial","issuer","serialNumber","issuerUID","toSchema","valueBlock","push","toJSON","Integer","BitString","optional","AttributeCertificateInfoV1","version","baseCertificateID","subjectName","signature","attrCertValidityPeriod","attributes","issuerUniqueID","extensions","valueDec","idBlock","tagClass","tagNumber","Array","from","element","Constructed","Choice","Repeated","AttributeCertificateV1","acinfo","signatureAlgorithm","signatureValue"],"mappings":"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","file":"AttributeCertificateV1.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport GeneralNames from \"./GeneralNames.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class AttCertValidityPeriod\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttCertValidityPeriod class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {GeneralizedTime}\r\n\t\t * @description notBeforeTime\r\n\t\t */\r\n\t\tthis.notBeforeTime = getParametersValue(parameters, \"notBeforeTime\", AttCertValidityPeriod.defaultValues(\"notBeforeTime\"));\r\n\t\t/**\r\n\t\t * @type {GeneralizedTime}\r\n\t\t * @description notAfterTime\r\n\t\t */\r\n\t\tthis.notAfterTime = getParametersValue(parameters, \"notAfterTime\", AttCertValidityPeriod.defaultValues(\"notAfterTime\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"notBeforeTime\":\r\n\t\t\tcase \"notAfterTime\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttCertValidityPeriod class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n        // AttCertValidityPeriod  ::= SEQUENCE {\r\n        //   notBeforeTime  GeneralizedTime,\r\n        //   notAfterTime   GeneralizedTime\r\n        // }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [notBeforeTime]\r\n\t\t * @property {string} [notAfterTime]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.notBeforeTime || \"\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.notAfterTime || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttCertValidityPeriod.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tnotBeforeTime: \"notBeforeTime\",\r\n\t\t\t\t\tnotAfterTime: \"notAfterTime\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttCertValidityPeriod\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.notBeforeTime = asn1.result.notBeforeTime.toDate();\r\n\t\tthis.notAfterTime = asn1.result.notAfterTime.toDate();\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.GeneralizedTime({ valueDate: this.notBeforeTime }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ valueDate: this.notAfterTime }),\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tnotBeforeTime: this.notBeforeTime,\r\n\t\t\tnotAfterTime: this.notAfterTime\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class IssuerSerial\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for IssuerSerial class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @description issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", IssuerSerial.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", IssuerSerial.defaultValues(\"serialNumber\"));\r\n\t\t\r\n\t\tif(\"issuerUID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @description issuerUID\r\n\t\t\t */\r\n\t\t\tthis.issuerUID = getParametersValue(parameters, \"issuerUID\", IssuerSerial.defaultValues(\"issuerUID\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new GeneralNames();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"issuerUID\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for IssuerSerial class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// \tIssuerSerial  ::=  SEQUENCE {\r\n\t\t//   \tissuer         GeneralNames,\r\n\t\t// \t\tserial         CertificateSerialNumber,\r\n\t\t// \t\tissuerUID      UniqueIdentifier OPTIONAL\r\n\t\t// }\r\n\t\t//\r\n\t\t// CertificateSerialNumber ::= INTEGER\r\n\t\t// UniqueIdentifier  ::=  BIT STRING\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuer]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t * @property {string} [issuerUID]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tGeneralNames.schema(names.issuer || {}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\r\n\t\t\t\tnew asn1js.BitString({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.issuerUID || \"\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tIssuerSerial.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tissuer: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"issuer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tserialNumber: \"serialNumber\",\r\n\t\t\t\t\tissuerUID: \"issuerUID\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for IssuerSerial\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.issuer = new GeneralNames({ schema: asn1.result.issuer });\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\t\r\n\t\tif(\"issuerUID\" in asn1.result)\r\n\t\t\tthis.issuerUID = asn1.result.issuerUID;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.issuer.toSchema(),\r\n\t\t\t\tthis.serialNumber\r\n\t\t\t]\r\n\t\t})\r\n\t\t\r\n\t\tif(\"issuerUID\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.issuerUID);\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"issuerUID\" in this)\r\n\t\t\tresult.issuerUID = this.issuerUID.toJSON()\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class AttributeCertificateInfoV1\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeCertificateInfoV1 class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV1.defaultValues(\"version\"));\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {IssuerSerial}\r\n\t\t\t * @description baseCertificateID\r\n\t\t\t */\r\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", AttributeCertificateInfoV1.defaultValues(\"baseCertificateID\"));\r\n\t\t\r\n\t\tif(\"subjectName\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralNames}\r\n\t\t\t * @description subjectName\r\n\t\t\t */\r\n\t\t\tthis.subjectName = getParametersValue(parameters, \"subjectName\", AttributeCertificateInfoV1.defaultValues(\"subjectName\"));\r\n\r\n\t\t/**\r\n\t\t * @type {GeneralNames}\r\n\t\t * @description issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV1.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV1.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV1.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {AttCertValidityPeriod}\r\n\t\t * @description attrCertValidityPeriod\r\n\t\t */\r\n\t\tthis.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV1.defaultValues(\"attrCertValidityPeriod\"));\r\n\t\t/**\r\n\t\t * @type {Array.<Attribute>}\r\n\t\t * @description attributes\r\n\t\t */\r\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV1.defaultValues(\"attributes\"));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @description issuerUniqueID\r\n\t\t\t */\r\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV1.defaultValues(\"issuerUniqueID\"));\r\n\t\t\t\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Extensions}\r\n\t\t\t * @description extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV1.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"baseCertificateID\":\r\n\t\t\t\treturn new IssuerSerial();\r\n\t\t\tcase \"subjectName\":\r\n\t\t\t\treturn new GeneralNames();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"attrCertValidityPeriod\":\r\n\t\t\t\treturn new AttCertValidityPeriod();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"issuerUniqueID\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn new Extensions();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateInfoV1 class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// AttributeCertificateInfo ::= SEQUENCE {\r\n\t\t// \tversion Version DEFAULT v1,\r\n\t\t// \tsubject CHOICE {\r\n\t\t// \t\tbaseCertificateID [0] IssuerSerial, -- associated with a Public Key Certificate\r\n\t\t// \t\tsubjectName [1] GeneralNames }, -- associated with a name\r\n\t\t// \tissuer GeneralNames, -- CA issuing the attribute certificate\r\n\t\t// \tsignature AlgorithmIdentifier,\r\n\t\t// \tserialNumber CertificateSerialNumber,\r\n\t\t// \tattrCertValidityPeriod AttCertValidityPeriod,\r\n\t\t// \tattributes SEQUENCE OF Attribute,\r\n\t\t// \tissuerUniqueID UniqueIdentifier OPTIONAL,\r\n\t\t// \textensions Extensions OPTIONAL\r\n\t\t// }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuer]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.baseCertificateID || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.subjectName || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: GeneralNames.schema().valueBlock.value\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tGeneralNames.schema({\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.issuer || \"\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signature || {}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\r\n\t\t\t\tAttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.issuerUniqueID || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tExtensions.schema(names.extensions || {}, true)\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeCertificateInfoV1.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\r\n\t\t\t\t\tsubjectName: \"subjectName\",\r\n\t\t\t\t\tissuer: \"issuer\",\r\n\t\t\t\t\tsignature: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signature\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tserialNumber: \"serialNumber\",\r\n\t\t\t\t\tattrCertValidityPeriod: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"attrCertValidityPeriod\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tattributes: \"attributes\",\r\n\t\t\t\t\tissuerUniqueID: \"issuerUniqueID\",\r\n\t\t\t\t\textensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"extensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV1\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in asn1.result)\r\n\t\t{\r\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\r\n\t\t\tasn1.result.baseCertificateID.idBlock.tagClass = 1;\r\n\t\t\tasn1.result.baseCertificateID.idBlock.tagNumber = 16;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tthis.baseCertificateID = new IssuerSerial({ schema: asn1.result.baseCertificateID });\r\n\t\t}\r\n\t\t\r\n\t\tif(\"subjectName\" in asn1.result)\r\n\t\t{\r\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\r\n\t\t\tasn1.result.subjectName.idBlock.tagClass = 1;\r\n\t\t\tasn1.result.subjectName.idBlock.tagNumber = 16;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tthis.subjectName = new GeneralNames({ schema: asn1.result.subjectName });\r\n\t\t}\r\n\t\t\r\n\t\tthis.issuer = asn1.result.issuer;\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\tthis.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\r\n\t\tthis.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in asn1.result)\r\n\t\t\tthis.issuerUniqueID = asn1.result.issuerUniqueID;\r\n\t\t\r\n\t\tif(\"extensions\" in asn1.result)\r\n\t\t\tthis.extensions = new Extensions({ schema: asn1.result.extensions });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence({\r\n\t\t\tvalue: [new asn1js.Integer({ value: this.version })]\r\n\t\t});\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"subjectName\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.subjectName.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tresult.valueBlock.value.push(this.issuer.toSchema());\r\n\t\tresult.valueBlock.value.push(this.signature.toSchema());\r\n\t\tresult.valueBlock.value.push(this.serialNumber);\r\n\t\tresult.valueBlock.value.push(this.attrCertValidityPeriod.toSchema());\r\n\t\tresult.valueBlock.value.push(new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t}));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.issuerUniqueID);\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.extensions.toSchema());\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\r\n\t\t\r\n\t\tif(\"subjectName\" in this)\r\n\t\t\tresult.subjectName = this.subjectName.toJSON();\r\n\r\n\t\tresult.issuer = this.issuer.toJSON();\r\n\t\tresult.signature = this.signature.toJSON();\r\n\t\tresult.serialNumber = this.serialNumber.toJSON();\r\n\t\tresult.attrCertValidityPeriod = this.attrCertValidityPeriod.toJSON();\r\n\t\tresult.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tresult.issuerUniqueID = this.issuerUniqueID.toJSON();\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tresult.extensions = this.extensions.toJSON();\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from X.509:1997\r\n */\r\nexport default class AttributeCertificateV1\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeCertificateV1 class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AttributeCertificateInfoV1}\r\n\t\t * @description acinfo\r\n\t\t */\r\n\t\tthis.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV1.defaultValues(\"acinfo\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV1.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description signatureValue\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV1.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"acinfo\":\r\n\t\t\t\treturn new AttributeCertificateInfoV1();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateV1 class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n        // AttributeCertificate ::= SEQUENCE {\r\n        //   acinfo               AttributeCertificateInfoV1,\r\n        //   signatureAlgorithm   AlgorithmIdentifier,\r\n        //   signatureValue       BIT STRING\r\n        // }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {Object} [acinfo]\r\n\t\t * @property {Object} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAttributeCertificateInfoV1.schema(names.acinfo || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeCertificateV1.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tacinfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"acinfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignatureAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignatureValue: \"signatureValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateV1\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.acinfo = new AttributeCertificateInfoV1({ schema: asn1.result.acinfo });\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.acinfo.toSchema(),\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tacinfo: this.acinfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}