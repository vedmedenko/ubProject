{"version":3,"sources":["../src/RSAPublicKey.js"],"names":["asn1js","RSAPublicKey","parameters","modulus","defaultValues","publicExponent","fromSchema","schema","fromJSON","json","asn1","compareSchema","names","verified","Error","result","convertFromDER","Sequence","value","convertToDER","n","valueBlock","valueHex","e","array","Integer","slice","Math","pow","byteLength","memberName","name","blockName"],"mappings":";;;;;;;;AAAA;;IAAYA,M;;AACZ;;;;;;AACA;AACA;;;IAGqBC,Y;AAEpB;AACA;;;;;;;AAOA,yBACA;AAAA,MADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;AACA;;;;AAIA,OAAKC,OAAL,GAAe,iCAAmBD,UAAnB,EAA+B,SAA/B,EAA0CD,aAAaG,aAAb,CAA2B,SAA3B,CAA1C,CAAf;AACA;;;;AAIA,OAAKC,cAAL,GAAsB,iCAAmBH,UAAnB,EAA+B,gBAA/B,EAAiDD,aAAaG,aAAb,CAA2B,gBAA3B,CAAjD,CAAtB;AACA;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKI,UAAL,CAAgBJ,WAAWK,MAA3B;AACD;AACA;AACA,MAAG,UAAUL,UAAb,EACC,KAAKM,QAAL,CAAcN,WAAWO,IAAzB;AACD;AACA;AACD;AACA;;;;;;;;;AA4CA;AACA;;;;6BAIWF,M,EACX;AACC;AACA,OAAMG,OAAOV,OAAOW,aAAP,CAAqBJ,MAArB,EACZA,MADY,EAEZN,aAAaM,MAAb,CAAoB;AACnBK,WAAO;AACNT,cAAS,SADH;AAENE,qBAAgB;AAFV;AADY,IAApB,CAFY,CAAb;;AAUA,OAAGK,KAAKG,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,sEAAV,CAAN;AACD;;AAEA;AACA,QAAKX,OAAL,GAAeO,KAAKK,MAAL,CAAYZ,OAAZ,CAAoBa,cAApB,CAAmC,GAAnC,CAAf;AACA,QAAKX,cAAL,GAAsBK,KAAKK,MAAL,CAAYV,cAAlC;AACA;AACA;AACD;AACA;;;;;;;6BAKA;AACC;AACA,UAAQ,IAAIL,OAAOiB,QAAX,CAAoB;AAC3BC,WAAO,CACN,KAAKf,OAAL,CAAagB,YAAb,EADM,EAEN,KAAKd,cAFC;AADoB,IAApB,CAAR;AAMA;AACA;AACD;AACA;;;;;;;2BAKA;AACC,UAAO;AACNe,OAAG,uBAAS,kCAAoB,KAAKjB,OAAL,CAAakB,UAAb,CAAwBC,QAA5C,CAAT,EAAgE,IAAhE,EAAsE,IAAtE,EAA4E,IAA5E,CADG;AAENC,OAAG,uBAAS,kCAAoB,KAAKlB,cAAL,CAAoBgB,UAApB,CAA+BC,QAAnD,CAAT,EAAuE,IAAvE,EAA6E,IAA7E,EAAmF,IAAnF;AAFG,IAAP;AAIA;AACD;AACA;;;;;;;2BAISb,I,EACT;AACC,OAAG,OAAOA,IAAV,EACA;AACC,QAAMe,QAAQ,kCAAoB,yBAAWf,KAAKW,CAAhB,EAAmB,IAAnB,CAApB,CAAd;AACA,SAAKjB,OAAL,GAAe,IAAIH,OAAOyB,OAAX,CAAmB,EAAEH,UAAUE,MAAME,KAAN,CAAY,CAAZ,EAAeC,KAAKC,GAAL,CAAS,CAAT,EAAY,8BAAgBJ,MAAMK,UAAtB,CAAZ,CAAf,CAAZ,EAAnB,CAAf;AACA,IAJD,MAMC,MAAM,IAAIf,KAAJ,CAAU,kCAAV,CAAN;;AAED,OAAG,OAAOL,IAAV,EACC,KAAKJ,cAAL,GAAsB,IAAIL,OAAOyB,OAAX,CAAmB,EAAEH,UAAU,kCAAoB,yBAAWb,KAAKc,CAAhB,EAAmB,IAAnB,CAApB,EAA8CG,KAA9C,CAAoD,CAApD,EAAuD,CAAvD,CAAZ,EAAnB,CAAtB,CADD,KAGC,MAAM,IAAIZ,KAAJ,CAAU,kCAAV,CAAN;AACD;AACD;;;;gCAnHqBgB,U,EACrB;AACC,WAAOA,UAAP;AAEC,SAAK,SAAL;AACC,YAAO,IAAI9B,OAAOyB,OAAX,EAAP;AACD,SAAK,gBAAL;AACC,YAAO,IAAIzB,OAAOyB,OAAX,EAAP;AACD;AACC,WAAM,IAAIX,KAAJ,kDAAyDgB,UAAzD,CAAN;AAPF;AASA;AACD;AACA;;;;;;;;2BAMA;AAAA,OADc5B,UACd,uEAD2B,EAC3B;;AACC;AACA;AACA;AACA;;AAEA;;;;;AAKA,OAAMU,QAAQ,iCAAmBV,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAIF,OAAOiB,QAAX,CAAoB;AAC3Bc,UAAOnB,MAAMoB,SAAN,IAAmB,EADC;AAE3Bd,WAAO,CACN,IAAIlB,OAAOyB,OAAX,CAAmB,EAAEM,MAAOnB,MAAMT,OAAN,IAAiB,EAA1B,EAAnB,CADM,EAEN,IAAIH,OAAOyB,OAAX,CAAmB,EAAEM,MAAOnB,MAAMP,cAAN,IAAwB,EAAjC,EAAnB,CAFM;AAFoB,IAApB,CAAR;AAOA;;;;;AA8EF;;;kBA5JqBJ,Y","file":"RSAPublicKey.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, nearestPowerOf2 } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class RSAPublicKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RSAPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t * @property {Integer} [modulus]\r\n\t * @property {Integer} [publicExponent]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description Modulus part of RSA public key\r\n\t\t */\r\n\t\tthis.modulus = getParametersValue(parameters, \"modulus\", RSAPublicKey.defaultValues(\"modulus\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description Public exponent of RSA public key\r\n\t\t */\r\n\t\tthis.publicExponent = getParametersValue(parameters, \"publicExponent\", RSAPublicKey.defaultValues(\"publicExponent\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"modulus\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"publicExponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RSAPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//RSAPublicKey ::= Sequence {\r\n\t\t//    modulus           Integer,  -- n\r\n\t\t//    publicExponent    Integer   -- e\r\n\t\t//}\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} utcTimeName Name for \"utcTimeName\" choice\r\n\t\t * @property {string} generalTimeName Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.modulus || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.publicExponent || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRSAPublicKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tmodulus: \"modulus\",\r\n\t\t\t\t\tpublicExponent: \"publicExponent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RSAPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.modulus = asn1.result.modulus.convertFromDER(256);\r\n\t\tthis.publicExponent = asn1.result.publicExponent;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.modulus.convertToDER(),\r\n\t\t\t\tthis.publicExponent\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tn: toBase64(arrayBufferToString(this.modulus.valueBlock.valueHex), true, true, true),\r\n\t\t\te: toBase64(arrayBufferToString(this.publicExponent.valueBlock.valueHex), true, true, true)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"n\" in json)\r\n\t\t{\r\n\t\t\tconst array = stringToArrayBuffer(fromBase64(json.n, true));\r\n\t\t\tthis.modulus = new asn1js.Integer({ valueHex: array.slice(0, Math.pow(2, nearestPowerOf2(array.byteLength))) });\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"n\\\"\");\r\n\r\n\t\tif(\"e\" in json)\r\n\t\t\tthis.publicExponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.e, true)).slice(0, 3) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"e\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}