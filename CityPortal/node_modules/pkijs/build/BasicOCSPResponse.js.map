{"version":3,"sources":["../src/BasicOCSPResponse.js"],"names":["asn1js","BasicOCSPResponse","parameters","tbsResponseData","defaultValues","signatureAlgorithm","signature","certs","fromSchema","schema","asn1","compareSchema","verified","Error","result","Array","from","element","outputArray","push","toSchema","Constructed","idBlock","tagClass","tagNumber","value","Sequence","_object","toJSON","certificate","issuerCertificate","sequence","Promise","resolve","isForCertificate","status","hashesObject","certIDs","certIDPromises","responses","response","hashAlgorithm","certID","algorithmId","reject","name","createForCertificate","then","all","id","isEqual","certStatus","isConstructed","ex","privateKey","engine","subtle","getSignatureParameters","tbs","toBER","signWithPrivateKey","BitString","valueHex","signerCert","certIndex","trustedCerts","_this","checkCA","cert","issuer","serialNumber","isCA","extensions","extension","extnID","parsedValue","cA","crypto","responderID","entries","index","subject","OctetString","digest","Uint8Array","subjectPublicKeyInfo","subjectPublicKey","valueBlock","results","additionalCerts","promiseResults","promiseResult","certChain","verify","verificationResult","error","Object","resultMessage","promiseError","verifyWithPublicKey","memberName","memberValue","comparisonResult","compareWithDefault","producedAt","responseExtensions","length","names","blockName","optional","Repeated"],"mappings":"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","file":"BasicOCSPResponse.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer } from \"pvutils\";\r\nimport {\r\n\tgetAlgorithmByOID,\r\n\tgetAlgorithmParameters,\r\n\tgetCrypto,\r\n\tgetEngine,\r\n\tcreateECDSASignatureFromCMS,\r\n\tgetHashAlgorithm\r\n} from \"./common.js\";\r\nimport ResponseData from \"./ResponseData.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport CertID from \"./CertID.js\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class BasicOCSPResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for BasicOCSPResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ResponseData}\r\n\t\t * @description tbsResponseData\r\n\t\t */\r\n\t\tthis.tbsResponseData = getParametersValue(parameters, \"tbsResponseData\", BasicOCSPResponse.defaultValues(\"tbsResponseData\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", BasicOCSPResponse.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", BasicOCSPResponse.defaultValues(\"signature\"));\r\n\t\t\r\n\t\tif(\"certs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate>}\r\n\t\t\t * @description certs\r\n\t\t\t */\r\n\t\t\tthis.certs = getParametersValue(parameters, \"certs\", BasicOCSPResponse.defaultValues(\"certs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsResponseData\":\r\n\t\t\t\treturn new ResponseData();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicOCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\t{\r\n\t\t\t\t\tlet comparisonResult = ((ResponseData.compareWithDefault(\"tbs\", memberValue.tbs)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"responderID\", memberValue.responderID)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"producedAt\", memberValue.producedAt)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"responses\", memberValue.responses)));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(\"responseExtensions\" in memberValue)\r\n\t\t\t\t\t\tcomparisonResult = comparisonResult && (ResponseData.compareWithDefault(\"responseExtensions\", memberValue.responseExtensions));\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn comparisonResult;\r\n\t\t\t\t}\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn (memberValue.isEqual(BasicOCSPResponse.defaultValues(memberName)));\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicOCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//BasicOCSPResponse       ::= SEQUENCE {\r\n\t\t//    tbsResponseData      ResponseData,\r\n\t\t//    signatureAlgorithm   AlgorithmIdentifier,\r\n\t\t//    signature            BIT STRING,\r\n\t\t//    certs            [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsResponseData]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [certs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"BasicOCSPResponse\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tResponseData.schema(names.tbsResponseData || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"BasicOCSPResponse.tbsResponseData\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"BasicOCSPResponse.signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signature || \"BasicOCSPResponse.signature\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [new asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: \"BasicOCSPResponse.certs\",\r\n\t\t\t\t\t\t\t\tvalue: Certificate.schema(names.certs || {})\r\n\t\t\t\t\t\t\t})]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tBasicOCSPResponse.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OCSP_BASIC_RESPONSE\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbsResponseData = new ResponseData({ schema: asn1.result[\"BasicOCSPResponse.tbsResponseData\"] });\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"BasicOCSPResponse.signatureAlgorithm\"] });\r\n\t\tthis.signature = asn1.result[\"BasicOCSPResponse.signature\"];\r\n\t\t\r\n\t\tif(\"BasicOCSPResponse.certs\" in asn1.result)\r\n\t\t\tthis.certs = Array.from(asn1.result[\"BasicOCSPResponse.certs\"], element => new Certificate({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.tbsResponseData.toSchema());\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\t\t\r\n\t\t//region Create array of certificates\r\n\t\tif(\"certs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.certs, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttbsResponseData: this.tbsResponseData.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"certs\" in this)\r\n\t\t\t_object.certs = Array.from(this.certs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OCSP response status for specific certificate\r\n\t * @param {Certificate} certificate Certificate to be checked\r\n\t * @param {Certificate} issuerCertificate Certificate of issuer for certificate to be checked\r\n\t * @returns {Promise}\r\n\t */\r\n\tgetCertificateStatus(certificate, issuerCertificate)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst result = {\r\n\t\t\tisForCertificate: false,\r\n\t\t\tstatus: 2 // 0 = good, 1 = revoked, 2 = unknown\r\n\t\t};\r\n\t\t\r\n\t\tconst hashesObject = {};\r\n\t\t\r\n\t\tconst certIDs = [];\r\n\t\tconst certIDPromises = [];\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create all \"certIDs\" for input certificates\r\n\t\tfor(const response of this.tbsResponseData.responses)\r\n\t\t{\r\n\t\t\tconst hashAlgorithm = getAlgorithmByOID(response.certID.hashAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\treturn Promise.reject(`Wrong CertID hashing algorithm: ${response.certID.hashAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\tif((hashAlgorithm.name in hashesObject) === false)\r\n\t\t\t{\r\n\t\t\t\thashesObject[hashAlgorithm.name] = 1;\r\n\t\t\t\t\r\n\t\t\t\tconst certID = new CertID();\r\n\t\t\t\t\r\n\t\t\t\tcertIDs.push(certID);\r\n\t\t\t\tcertIDPromises.push(certID.createForCertificate(certificate, {\r\n\t\t\t\t\thashAlgorithm: hashAlgorithm.name,\r\n\t\t\t\t\tissuerCertificate\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tPromise.all(certIDPromises)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Compare all response's \"certIDs\" with identifiers for input certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tfor(const response of this.tbsResponseData.responses)\r\n\t\t\t{\r\n\t\t\t\tfor(const id of certIDs)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(response.certID.isEqual(id))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult.isForCertificate = true;\r\n\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tswitch(response.certStatus.idBlock.isConstructed)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcase true:\r\n\t\t\t\t\t\t\t\t\tif(response.certStatus.idBlock.tagNumber === 1)\r\n\t\t\t\t\t\t\t\t\t\tresult.status = 1; // revoked\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase false:\r\n\t\t\t\t\t\t\t\t\tswitch(response.certStatus.idBlock.tagNumber)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase 0: // good\r\n\t\t\t\t\t\t\t\t\t\t\tresult.status = 0;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase 2: // unknown\r\n\t\t\t\t\t\t\t\t\t\t\tresult.status = 2;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make signature for current OCSP Basic Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbsResponseData.tbs = this.tbsResponseData.toSchema(true).toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbsResponseData.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signature = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing OCSP Basic Response\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet signerCert = null;\r\n\t\t\r\n\t\tlet certIndex = -1;\r\n\t\t\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet trustedCerts = [];\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check amount of certificates\r\n\t\tif((\"certs\" in this) === false)\r\n\t\t\treturn Promise.reject(\"No certificates attached to the BasicOCSPResponce\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get input values\r\n\t\tif(\"trustedCerts\" in parameters)\r\n\t\t\ttrustedCerts = parameters.trustedCerts;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Aux functions\r\n\t\t/**\r\n\t\t * Check CA flag for the certificate\r\n\t\t * @param {Certificate} cert Certificate to find CA flag for\r\n\t\t * @returns {*}\r\n\t\t */\r\n\t\tfunction checkCA(cert)\r\n\t\t{\r\n\t\t\t//region Do not include signer's certificate\r\n\t\t\tif((cert.issuer.isEqual(signerCert.issuer) === true) && (cert.serialNumber.isEqual(signerCert.serialNumber) === true))\r\n\t\t\t\treturn null;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tlet isCA = false;\r\n\t\t\t\r\n\t\t\tfor(const extension of cert.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"cA\" in extension.parsedValue)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(extension.parsedValue.cA === true)\r\n\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA)\r\n\t\t\t\treturn cert;\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find correct value for \"responderID\"\r\n\t\tswitch(true)\r\n\t\t{\r\n\t\t\tcase (this.tbsResponseData.responderID instanceof RelativeDistinguishedNames): // [1] Name\r\n\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, certificate] of _this.certs.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(certificate.subject.isEqual(_this.tbsResponseData.responderID))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertIndex = index;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase (this.tbsResponseData.responderID instanceof asn1js.OctetString): // [2] KeyHash\r\n\t\t\t\tsequence = sequence.then(() => Promise.all(Array.from(_this.certs, element =>\r\n\t\t\t\t\tcrypto.digest({ name: \"sha-1\" }, new Uint8Array(element.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex)))).then(results =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, ] of _this.certs.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isEqualBuffer(results[index], _this.tbsResponseData.responderID.valueBlock.valueHex))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertIndex = index;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(\"Wrong value for responderID\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make additional verification for signer's certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(certIndex === (-1))\r\n\t\t\t\treturn Promise.reject(\"Correct certificate was not found in OCSP response\");\r\n\t\t\t\r\n\t\t\tsignerCert = this.certs[certIndex];\r\n\t\t\t\r\n\t\t\treturn Promise.all(Array.from(_this.certs, element => checkCA(element))).then(promiseResults =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst additionalCerts = [];\r\n\t\t\t\t\tadditionalCerts.push(signerCert);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(const promiseResult of promiseResults)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(promiseResult !== null)\r\n\t\t\t\t\t\t\tadditionalCerts.push(promiseResult);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst certChain = new CertificateChainValidationEngine({\r\n\t\t\t\t\t\tcerts: additionalCerts,\r\n\t\t\t\t\t\ttrustedCerts\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn certChain.verify().then(verificationResult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(verificationResult.result === true)\r\n\t\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Validation of signer's certificate failed\");\r\n\t\t\t\t\t\t}, error =>\r\n\t\t\t\t\t\t\tPromise.reject(`Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t}, promiseError =>\r\n\t\t\t\t\tPromise.reject(`Error during checking certificates for CA flag: ${promiseError}`)\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\tsequence = sequence.then(() => engine.subtle.verifyWithPublicKey(this.tbsResponseData.tbs, this.signature, this.certs[certIndex].subjectPublicKeyInfo, this.signatureAlgorithm));\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}