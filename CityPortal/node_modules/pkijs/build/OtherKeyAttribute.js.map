{"version":3,"sources":["../src/OtherKeyAttribute.js"],"names":["asn1js","OtherKeyAttribute","parameters","keyAttrId","defaultValues","keyAttr","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","valueBlock","toString","outputArray","push","ObjectIdentifier","value","toSchema","Sequence","_object","toJSON","memberName","memberValue","Object","keys","length","optional","name","blockName","Any"],"mappings":"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","file":"OtherKeyAttribute.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OtherKeyAttribute\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherKeyAttribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description keyAttrId\r\n\t\t */\r\n\t\tthis.keyAttrId = getParametersValue(parameters, \"keyAttrId\", OtherKeyAttribute.defaultValues(\"keyAttrId\"));\r\n\r\n\t\tif(\"keyAttr\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @description keyAttr\r\n\t\t\t */\r\n\t\t\tthis.keyAttr = getParametersValue(parameters, \"keyAttr\", OtherKeyAttribute.defaultValues(\"keyAttr\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyAttrId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"keyAttr\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherKeyAttribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyAttrId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"keyAttr\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherKeyAttribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//OtherKeyAttribute ::= SEQUENCE {\r\n\t\t//    keyAttrId OBJECT IDENTIFIER,\r\n\t\t//    keyAttr ANY DEFINED BY keyAttrId OPTIONAL }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [keyAttrId]\r\n\t\t * @property {string} [keyAttr]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\toptional: (names.optional || true),\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.keyAttrId || \"\") }),\r\n\t\t\t\tnew asn1js.Any({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.keyAttr || \"\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherKeyAttribute.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyAttrId: \"keyAttrId\",\r\n\t\t\t\t\tkeyAttr: \"keyAttr\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherKeyAttribute\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.keyAttrId = asn1.result.keyAttrId.valueBlock.toString();\r\n\r\n\t\tif(\"keyAttr\" in asn1.result)\r\n\t\t\tthis.keyAttr = asn1.result.keyAttr;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.keyAttrId }));\r\n\r\n\t\tif(\"keyAttr\" in this)\r\n\t\t\toutputArray.push(this.keyAttr.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tkeyAttrId: this.keyAttrId\r\n\t\t};\r\n\r\n\t\tif(\"keyAttr\" in this)\r\n\t\t\t_object.keyAttr = this.keyAttr.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}