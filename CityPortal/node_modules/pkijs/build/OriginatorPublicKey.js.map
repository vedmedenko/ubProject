{"version":3,"sources":["../src/OriginatorPublicKey.js"],"names":["asn1js","OriginatorPublicKey","parameters","algorithm","defaultValues","publicKey","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","Sequence","value","toSchema","toJSON","memberName","BitString","memberValue","isEqual","name"],"mappings":";;;;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;;;;;;;;;AACA;AACA;;;IAGqBC,mB;AAEpB;AACA;;;;;AAKA,gCACA;AAAA,MADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;AACA;;;;AAIA,OAAKC,SAAL,GAAiB,iCAAmBD,UAAnB,EAA+B,WAA/B,EAA4CD,oBAAoBG,aAApB,CAAkC,WAAlC,CAA5C,CAAjB;AACA;;;;AAIA,OAAKC,SAAL,GAAiB,iCAAmBH,UAAnB,EAA+B,WAA/B,EAA4CD,oBAAoBG,aAApB,CAAkC,WAAlC,CAA5C,CAAjB;AACA;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKI,UAAL,CAAgBJ,WAAWK,MAA3B;AACD;AACA;AACD;AACA;;;;;;;;;AA6DA;AACA;;;;6BAIWA,M,EACX;AACC;AACA,OAAMC,OAAOR,OAAOS,aAAP,CAAqBF,MAArB,EACZA,MADY,EAEZN,oBAAoBM,MAApB,CAA2B;AAC1BG,WAAO;AACNP,gBAAW;AACVO,aAAO;AACNC,kBAAW;AADL;AADG,MADL;AAMNN,gBAAW;AANL;AADmB,IAA3B,CAFY,CAAb;;AAcA,OAAGG,KAAKI,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,6EAAV,CAAN;AACD;;AAEA;AACA,QAAKV,SAAL,GAAiB,kCAAwB,EAAEI,QAAQC,KAAKM,MAAL,CAAYX,SAAtB,EAAxB,CAAjB;AACA,QAAKE,SAAL,GAAiBG,KAAKM,MAAL,CAAYT,SAA7B;AACA;AACA;AACD;AACA;;;;;;;6BAKA;AACC;AACA,UAAQ,IAAIL,OAAOe,QAAX,CAAoB;AAC3BC,WAAO,CACN,KAAKb,SAAL,CAAec,QAAf,EADM,EAEN,KAAKZ,SAFC;AADoB,IAApB,CAAR;AAMA;AACA;AACD;AACA;;;;;;;2BAKA;AACC,UAAO;AACNF,eAAW,KAAKA,SAAL,CAAee,MAAf,EADL;AAENb,eAAW,KAAKA,SAAL,CAAea,MAAf;AAFL,IAAP;AAIA;AACD;;;;gCApHqBC,U,EACrB;AACC,WAAOA,UAAP;AAEC,SAAK,WAAL;AACC,YAAO,mCAAP;AACD,SAAK,WAAL;AACC,YAAO,IAAInB,OAAOoB,SAAX,EAAP;AACD;AACC,WAAM,IAAIP,KAAJ,yDAAgEM,UAAhE,CAAN;AAPF;AASA;AACD;AACA;;;;;;;;qCAK0BA,U,EAAYE,W,EACtC;AACC,WAAOF,UAAP;AAEC,SAAK,WAAL;AACA,SAAK,WAAL;AACC,YAAQE,YAAYC,OAAZ,CAAoBrB,oBAAoBG,aAApB,CAAkCe,UAAlC,CAApB,CAAR;AACD;AACC,WAAM,IAAIN,KAAJ,yDAAgEM,UAAhE,CAAN;AANF;AAQA;AACD;AACA;;;;;;;;2BAMA;AAAA,OADcjB,UACd,uEAD2B,EAC3B;;AACC;AACA;AACA;;AAEA;;;;;;AAMA,OAAMQ,QAAQ,iCAAmBR,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAIF,OAAOe,QAAX,CAAoB;AAC3BQ,UAAOb,MAAMC,SAAN,IAAmB,EADC;AAE3BK,WAAO,CACN,8BAAoBT,MAApB,CAA2BG,MAAMP,SAAN,IAAmB,EAA9C,CADM,EAEN,IAAIH,OAAOoB,SAAX,CAAqB,EAAEG,MAAOb,MAAML,SAAN,IAAmB,EAA5B,EAArB,CAFM;AAFoB,IAApB,CAAR;AAOA;;;;;AA8DF;;;kBAvJqBJ,mB","file":"OriginatorPublicKey.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OriginatorPublicKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OriginatorPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description algorithm\r\n\t\t */\r\n\t\tthis.algorithm = getParametersValue(parameters, \"algorithm\", OriginatorPublicKey.defaultValues(\"algorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description publicKey\r\n\t\t */\r\n\t\tthis.publicKey = getParametersValue(parameters, \"publicKey\", OriginatorPublicKey.defaultValues(\"publicKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"publicKey\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OriginatorPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithm\":\r\n\t\t\tcase \"publicKey\":\r\n\t\t\t\treturn (memberValue.isEqual(OriginatorPublicKey.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OriginatorPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//OriginatorPublicKey ::= SEQUENCE {\r\n\t\t//    algorithm AlgorithmIdentifier,\r\n\t\t//    publicKey BIT STRING }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [algorithm]\r\n\t\t * @property {string} [publicKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.algorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.publicKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOriginatorPublicKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"algorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tpublicKey: \"publicKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OriginatorPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\r\n\t\tthis.publicKey = asn1.result.publicKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.algorithm.toSchema(),\r\n\t\t\t\tthis.publicKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\talgorithm: this.algorithm.toJSON(),\r\n\t\t\tpublicKey: this.publicKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}