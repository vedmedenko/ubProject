{"version":3,"sources":["../src/TBSRequest.js"],"names":["asn1js","TBSRequest","parameters","tbs","defaultValues","version","requestorName","requestList","requestExtensions","fromSchema","schema","asn1","compareSchema","verified","Error","result","valueBeforeDecode","valueBlock","valueDec","Array","from","element","value","encodeFlag","tbsSchema","byteLength","fromBER","outputArray","push","Constructed","idBlock","tagClass","tagNumber","Integer","toSchema","Sequence","_object","toJSON","memberName","ArrayBuffer","memberValue","type","Object","keys","length","names","name","blockName","optional","TBSRequestVersion","Repeated","requests","requestNames","extensions"],"mappings":";;;;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AACA;AACA;;;IAGqBC,U;AAEpB;AACA;;;;;AAKA,uBACA;AAAA,MADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;AACA;;;;AAIA,OAAKC,GAAL,GAAW,iCAAmBD,UAAnB,EAA+B,KAA/B,EAAsCD,WAAWG,aAAX,CAAyB,KAAzB,CAAtC,CAAX;;AAEA,MAAG,aAAaF,UAAhB;AACC;;;;AAIA,QAAKG,OAAL,GAAe,iCAAmBH,UAAnB,EAA+B,SAA/B,EAA0CD,WAAWG,aAAX,CAAyB,SAAzB,CAA1C,CAAf;;AAED,MAAG,mBAAmBF,UAAtB;AACC;;;;AAIA,QAAKI,aAAL,GAAqB,iCAAmBJ,UAAnB,EAA+B,eAA/B,EAAgDD,WAAWG,aAAX,CAAyB,eAAzB,CAAhD,CAArB;;AAED;;;;AAIA,OAAKG,WAAL,GAAmB,iCAAmBL,UAAnB,EAA+B,aAA/B,EAA8CD,WAAWG,aAAX,CAAyB,aAAzB,CAA9C,CAAnB;;AAEA,MAAG,uBAAuBF,UAA1B;AACC;;;;AAIA,QAAKM,iBAAL,GAAyB,iCAAmBN,UAAnB,EAA+B,mBAA/B,EAAoDD,WAAWG,aAAX,CAAyB,mBAAzB,CAApD,CAAzB;AACD;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKO,UAAL,CAAgBP,WAAWQ,MAA3B;AACD;AACA;AACD;AACA;;;;;;;;;AAsHA;AACA;;;;6BAIWA,M,EACX;AACC;AACA,OAAMC,OAAOX,OAAOY,aAAP,CAAqBF,MAArB,EACZA,MADY,EAEZT,WAAWS,MAAX,EAFY,CAAb;;AAKA,OAAGC,KAAKE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,oEAAV,CAAN;AACD;;AAEA;AACA,QAAKX,GAAL,GAAWQ,KAAKI,MAAL,CAAYd,UAAZ,CAAuBe,iBAAlC;;AAEA,OAAG,wBAAwBL,KAAKI,MAAhC,EACC,KAAKV,OAAL,GAAeM,KAAKI,MAAL,CAAY,oBAAZ,EAAkCE,UAAlC,CAA6CC,QAA5D;AACD,OAAG,8BAA8BP,KAAKI,MAAtC,EACC,KAAKT,aAAL,GAAqB,0BAAgB,EAAEI,QAAQC,KAAKI,MAAL,CAAY,0BAAZ,CAAV,EAAhB,CAArB;;AAED,QAAKR,WAAL,GAAmBY,MAAMC,IAAN,CAAWT,KAAKI,MAAL,CAAY,qBAAZ,CAAX,EAA+C;AAAA,WAAW,sBAAY,EAAEL,QAAQW,OAAV,EAAZ,CAAX;AAAA,IAA/C,CAAnB;;AAEA,OAAG,kCAAkCV,KAAKI,MAA1C,EACC,KAAKP,iBAAL,GAAyBW,MAAMC,IAAN,CAAWT,KAAKI,MAAL,CAAY,8BAAZ,EAA4CE,UAA5C,CAAuDK,KAAlE,EAAyE;AAAA,WAAW,wBAAc,EAAEZ,QAAQW,OAAV,EAAd,CAAX;AAAA,IAAzE,CAAzB;AACD;AACA;AACD;AACA;;;;;;;;6BAMA;AAAA,OADSE,UACT,uEADsB,KACtB;;AACC;AACA,OAAIC,kBAAJ;;AAEA,OAAGD,eAAe,KAAlB,EACA;AACC,QAAG,KAAKpB,GAAL,CAASsB,UAAT,KAAwB,CAA3B,EAA8B;AAC7B,YAAOxB,WAAWS,MAAX,EAAP;;AAEDc,gBAAYxB,OAAO0B,OAAP,CAAe,KAAKvB,GAApB,EAAyBY,MAArC;AACA;AACD;AACA;AARA,QAUA;AACC,SAAMY,cAAc,EAApB;;AAEA,SAAG,aAAa,IAAhB,EACA;AACCA,kBAAYC,IAAZ,CAAiB,IAAI5B,OAAO6B,WAAX,CAAuB;AACvCC,gBAAS;AACRC,kBAAU,CADF,EACK;AACbC,mBAAW,CAFH,CAEK;AAFL,QAD8B;AAKvCV,cAAO,CAAC,IAAItB,OAAOiC,OAAX,CAAmB,EAAEX,OAAO,KAAKjB,OAAd,EAAnB,CAAD;AALgC,OAAvB,CAAjB;AAOA;;AAED,SAAG,mBAAmB,IAAtB,EACA;AACCsB,kBAAYC,IAAZ,CAAiB,IAAI5B,OAAO6B,WAAX,CAAuB;AACvCC,gBAAS;AACRC,kBAAU,CADF,EACK;AACbC,mBAAW,CAFH,CAEK;AAFL,QAD8B;AAKvCV,cAAO,CAAC,KAAKhB,aAAL,CAAmB4B,QAAnB,EAAD;AALgC,OAAvB,CAAjB;AAOA;;AAEDP,iBAAYC,IAAZ,CAAiB,IAAI5B,OAAOmC,QAAX,CAAoB;AACpCb,aAAOH,MAAMC,IAAN,CAAW,KAAKb,WAAhB,EAA6B;AAAA,cAAWc,QAAQa,QAAR,EAAX;AAAA,OAA7B;AAD6B,MAApB,CAAjB;;AAIA,SAAG,uBAAuB,IAA1B,EACA;AACCP,kBAAYC,IAAZ,CAAiB,IAAI5B,OAAO6B,WAAX,CAAuB;AACvCC,gBAAS;AACRC,kBAAU,CADF,EACK;AACbC,mBAAW,CAFH,CAEK;AAFL,QAD8B;AAKvCV,cAAO,CACN,IAAItB,OAAOmC,QAAX,CAAoB;AACnBb,eAAOH,MAAMC,IAAN,CAAW,KAAKZ,iBAAhB,EAAmC;AAAA,gBAAWa,QAAQa,QAAR,EAAX;AAAA,SAAnC;AADY,QAApB,CADM;AALgC,OAAvB,CAAjB;AAWA;;AAEDV,iBAAY,IAAIxB,OAAOmC,QAAX,CAAoB;AAC/Bb,aAAOK;AADwB,MAApB,CAAZ;AAGA;AACD;;AAEA;AACA,UAAOH,SAAP;AACA;AACA;AACD;AACA;;;;;;;2BAKA;AACC,OAAMY,UAAU,EAAhB;;AAEA,OAAG,aAAa,IAAhB,EACCA,QAAQ/B,OAAR,GAAkB,KAAKA,OAAvB;;AAED,OAAG,mBAAmB,IAAtB,EACC+B,QAAQ9B,aAAR,GAAwB,KAAKA,aAAL,CAAmB+B,MAAnB,EAAxB;;AAEDD,WAAQ7B,WAAR,GAAsBY,MAAMC,IAAN,CAAW,KAAKb,WAAhB,EAA6B;AAAA,WAAWc,QAAQgB,MAAR,EAAX;AAAA,IAA7B,CAAtB;;AAEA,OAAG,uBAAuB,IAA1B,EACCD,QAAQ5B,iBAAR,GAA4BW,MAAMC,IAAN,CAAW,KAAKZ,iBAAhB,EAAmC;AAAA,WAAWa,QAAQgB,MAAR,EAAX;AAAA,IAAnC,CAA5B;;AAED,UAAOD,OAAP;AACA;AACD;;;;gCAlPqBE,U,EACrB;AACC,WAAOA,UAAP;AAEC,SAAK,KAAL;AACC,YAAO,IAAIC,WAAJ,CAAgB,CAAhB,CAAP;AACD,SAAK,SAAL;AACC,YAAO,CAAP;AACD,SAAK,eAAL;AACC,YAAO,2BAAP;AACD,SAAK,aAAL;AACA,SAAK,mBAAL;AACC,YAAO,EAAP;AACD;AACC,WAAM,IAAIzB,KAAJ,gDAAuDwB,UAAvD,CAAN;AAZF;AAcA;AACD;AACA;;;;;;;;qCAK0BA,U,EAAYE,W,EACtC;AACC,WAAOF,UAAP;AAEC,SAAK,KAAL;AACC,YAAQE,YAAYf,UAAZ,KAA2B,CAAnC;AACD,SAAK,SAAL;AACC,YAAQe,gBAAgBvC,WAAWG,aAAX,CAAyBkC,UAAzB,CAAxB;AACD,SAAK,eAAL;AACC,YAASE,YAAYC,IAAZ,KAAqB,sBAAYrC,aAAZ,CAA0B,MAA1B,CAAtB,IAA6DsC,OAAOC,IAAP,CAAYH,YAAYlB,KAAxB,EAA+BsB,MAA/B,KAA0C,CAA/G;AACD,SAAK,aAAL;AACA,SAAK,mBAAL;AACC,YAAQJ,YAAYI,MAAZ,KAAuB,CAA/B;AACD;AACC,WAAM,IAAI9B,KAAJ,gDAAuDwB,UAAvD,CAAN;AAZF;AAcA;AACD;AACA;;;;;;;;2BAMA;AAAA,OADcpC,UACd,uEAD2B,EAC3B;;AACC;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AAWA,OAAM2C,QAAQ,iCAAmB3C,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAIF,OAAOmC,QAAX,CAAoB;AAC3BW,UAAOD,MAAME,SAAN,IAAmB,YADC;AAE3BzB,WAAO,CACN,IAAItB,OAAO6B,WAAX,CAAuB;AACtBmB,eAAU,IADY;AAEtBlB,cAAS;AACRC,gBAAU,CADF,EACK;AACbC,iBAAW,CAFH,CAEK;AAFL,MAFa;AAMtBV,YAAO,CAAC,IAAItB,OAAOiC,OAAX,CAAmB,EAAEa,MAAOD,MAAMI,iBAAN,IAA2B,oBAApC,EAAnB,CAAD;AANe,KAAvB,CADM,EASN,IAAIjD,OAAO6B,WAAX,CAAuB;AACtBmB,eAAU,IADY;AAEtBlB,cAAS;AACRC,gBAAU,CADF,EACK;AACbC,iBAAW,CAFH,CAEK;AAFL,MAFa;AAMtBV,YAAO,CAAC,sBAAYZ,MAAZ,CAAmBmC,MAAMvC,aAAN,IAAuB;AACjDuC,aAAO;AACNE,kBAAW;AADL;AAD0C,MAA1C,CAAD;AANe,KAAvB,CATM,EAqBN,IAAI/C,OAAOmC,QAAX,CAAoB;AACnBW,WAAOD,MAAMtC,WAAN,IAAqB,wBADT;AAEnBe,YAAO,CACN,IAAItB,OAAOkD,QAAX,CAAoB;AACnBJ,YAAOD,MAAMM,QAAN,IAAkB,qBADN;AAEnB7B,aAAO,kBAAQZ,MAAR,CAAemC,MAAMO,YAAN,IAAsB,EAArC;AAFY,MAApB,CADM;AAFY,KAApB,CArBM,EA8BN,IAAIpD,OAAO6B,WAAX,CAAuB;AACtBmB,eAAU,IADY;AAEtBlB,cAAS;AACRC,gBAAU,CADF,EACK;AACbC,iBAAW,CAFH,CAEK;AAFL,MAFa;AAMtBV,YAAO,CAAC,qBAAWZ,MAAX,CAAkBmC,MAAMQ,UAAN,IAAoB;AAC7CR,aAAO;AACNE,kBAAYF,MAAMrC,iBAAN,IAA2B;AADjC;AADsC,MAAtC,CAAD;AANe,KAAvB,CA9BM;AAFoB,IAApB,CAAR;AA8CA;;;;;AAmIF;;;kBA3SqBP,U","file":"TBSRequest.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\nimport Request from \"./Request.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class TBSRequest\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TBSRequest class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", TBSRequest.defaultValues(\"tbs\"));\r\n\r\n\t\tif(\"version\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @description version\r\n\t\t\t */\r\n\t\t\tthis.version = getParametersValue(parameters, \"version\", TBSRequest.defaultValues(\"version\"));\r\n\r\n\t\tif(\"requestorName\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralName}\r\n\t\t\t * @description requestorName\r\n\t\t\t */\r\n\t\t\tthis.requestorName = getParametersValue(parameters, \"requestorName\", TBSRequest.defaultValues(\"requestorName\"));\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<Request>}\r\n\t\t * @description requestList\r\n\t\t */\r\n\t\tthis.requestList = getParametersValue(parameters, \"requestList\", TBSRequest.defaultValues(\"requestList\"));\r\n\r\n\t\tif(\"requestExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @description requestExtensions\r\n\t\t\t */\r\n\t\t\tthis.requestExtensions = getParametersValue(parameters, \"requestExtensions\", TBSRequest.defaultValues(\"requestExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"requestorName\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"requestList\":\r\n\t\t\tcase \"requestExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TBSRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === TBSRequest.defaultValues(memberName));\r\n\t\t\tcase \"requestorName\":\r\n\t\t\t\treturn ((memberValue.type === GeneralName.defaultValues(\"type\")) && (Object.keys(memberValue.value).length === 0));\r\n\t\t\tcase \"requestList\":\r\n\t\t\tcase \"requestExtensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TBSRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//TBSRequest      ::=     SEQUENCE {\r\n\t\t//    version             [0]     EXPLICIT Version DEFAULT v1,\r\n\t\t//    requestorName       [1]     EXPLICIT GeneralName OPTIONAL,\r\n\t\t//    requestList                 SEQUENCE OF Request,\r\n\t\t//    requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [TBSRequestVersion]\r\n\t\t * @property {string} [requestorName]\r\n\t\t * @property {string} [requestList]\r\n\t\t * @property {string} [requests]\r\n\t\t * @property {string} [requestNames]\r\n\t\t * @property {string} [extensions]\r\n\t\t * @property {string} [requestExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TBSRequest\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.TBSRequestVersion || \"TBSRequest.version\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [GeneralName.schema(names.requestorName || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"TBSRequest.requestorName\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.requestList || \"TBSRequest.requestList\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.requests || \"TBSRequest.requests\"),\r\n\t\t\t\t\t\t\tvalue: Request.schema(names.requestNames || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extensions.schema(names.extensions || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: (names.requestExtensions || \"TBSRequest.requestExtensions\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTBSRequest.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TBSRequest\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.TBSRequest.valueBeforeDecode;\r\n\r\n\t\tif(\"TBSRequest.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"TBSRequest.version\"].valueBlock.valueDec;\r\n\t\tif(\"TBSRequest.requestorName\" in asn1.result)\r\n\t\t\tthis.requestorName = new GeneralName({ schema: asn1.result[\"TBSRequest.requestorName\"] });\r\n\r\n\t\tthis.requestList = Array.from(asn1.result[\"TBSRequest.requests\"], element => new Request({ schema: element }));\r\n\r\n\t\tif(\"TBSRequest.requestExtensions\" in asn1.result)\r\n\t\t\tthis.requestExtensions = Array.from(asn1.result[\"TBSRequest.requestExtensions\"].valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.byteLength === 0) // No stored TBS part\r\n\t\t\t\treturn TBSRequest.schema();\r\n\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst outputArray = [];\r\n\r\n\t\t\tif(\"version\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ value: this.version })]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\tif(\"requestorName\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.requestorName.toSchema()]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.requestList, element => element.toSchema())\r\n\t\t\t}));\r\n\r\n\t\t\tif(\"requestExtensions\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: Array.from(this.requestExtensions, element => element.toSchema())\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\ttbsSchema = new asn1js.Sequence({\r\n\t\t\t\tvalue: outputArray\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn tbsSchema;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {};\r\n\r\n\t\tif(\"version\" in this)\r\n\t\t\t_object.version = this.version;\r\n\r\n\t\tif(\"requestorName\" in this)\r\n\t\t\t_object.requestorName = this.requestorName.toJSON();\r\n\r\n\t\t_object.requestList = Array.from(this.requestList, element => element.toJSON());\r\n\r\n\t\tif(\"requestExtensions\" in this)\r\n\t\t\t_object.requestExtensions = Array.from(this.requestExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}