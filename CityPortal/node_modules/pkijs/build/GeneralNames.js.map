{"version":3,"sources":["../src/GeneralNames.js"],"names":["asn1js","GeneralNames","parameters","names","defaultValues","fromSchema","schema","asn1","compareSchema","blockName","generalNames","verified","Error","Array","from","result","element","Sequence","value","toSchema","toJSON","memberName","optional","name","Repeated"],"mappings":";;;;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;;;;;;;;;AACA;AACA;;;IAGqBC,Y;AAEpB;AACA;;;;;AAKA,yBACA;AAAA,MADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;AACA;;;;AAIA,OAAKC,KAAL,GAAa,iCAAmBD,UAAnB,EAA+B,OAA/B,EAAwCD,aAAaG,aAAb,CAA2B,OAA3B,CAAxC,CAAb;AACA;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKG,UAAL,CAAgBH,WAAWI,MAA3B;AACD;AACA;AACD;AACA;;;;;;;;;AAwCA;AACA;;;;6BAIWA,M,EACX;AACC;AACA,OAAMC,OAAOP,OAAOQ,aAAP,CAAqBF,MAArB,EACZA,MADY,EAEZL,aAAaK,MAAb,CAAoB;AACnBH,WAAO;AACNM,gBAAW,OADL;AAENC,mBAAc;AAFR;AADY,IAApB,CAFY,CAAb;;AAUA,OAAGH,KAAKI,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,sEAAV,CAAN;AACD;;AAEA;AACA,QAAKT,KAAL,GAAaU,MAAMC,IAAN,CAAWP,KAAKQ,MAAL,CAAYL,YAAvB,EAAqC;AAAA,WAAW,0BAAgB,EAAEJ,QAAQU,OAAV,EAAhB,CAAX;AAAA,IAArC,CAAb;AACA;AACA;AACD;AACA;;;;;;;6BAKA;AACC;AACA,UAAQ,IAAIhB,OAAOiB,QAAX,CAAoB;AAC3BC,WAAOL,MAAMC,IAAN,CAAW,KAAKX,KAAhB,EAAuB;AAAA,YAAWa,QAAQG,QAAR,EAAX;AAAA,KAAvB;AADoB,IAApB,CAAR;AAGA;AACA;AACD;AACA;;;;;;;2BAKA;AACC,UAAO;AACNhB,WAAOU,MAAMC,IAAN,CAAW,KAAKX,KAAhB,EAAuB;AAAA,YAAWa,QAAQI,MAAR,EAAX;AAAA,KAAvB;AADD,IAAP;AAGA;AACD;;;;gCAtFqBC,U,EACrB;AACC,WAAOA,UAAP;AAEC,SAAK,OAAL;AACC,YAAO,EAAP;AACD;AACC,WAAM,IAAIT,KAAJ,kDAAyDS,UAAzD,CAAN;AALF;AAOA;AACD;AACA;;;;;;;;2BAMA;AAAA,OADcnB,UACd,uEAD2B,EAC3B;AAAA,OAD+BoB,QAC/B,uEAD0C,KAC1C;;AACC;;;;;AAKA,OAAMnB,QAAQ,iCAAmBD,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAIF,OAAOiB,QAAX,CAAoB;AAC3BK,sBAD2B;AAE3BC,UAAOpB,MAAMM,SAAN,IAAmB,EAFC;AAG3BS,WAAO,CACN,IAAIlB,OAAOwB,QAAX,CAAoB;AACnBD,WAAOpB,MAAMO,YAAN,IAAsB,EADV;AAEnBQ,YAAO,sBAAYZ,MAAZ;AAFY,KAApB,CADM;AAHoB,IAApB,CAAR;AAUA;;;;;AAqDF;;;kBApHqBL,Y","file":"GeneralNames.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class GeneralNames\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for GeneralNames class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<GeneralName>}\r\n\t\t * @description Array of \"general names\"\r\n\t\t */\r\n\t\tthis.names = getParametersValue(parameters, \"names\", GeneralNames.defaultValues(\"names\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"names\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for GeneralNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {}, optional = false)\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} utcTimeName Name for \"utcTimeName\" choice\r\n\t\t * @property {string} generalTimeName Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\toptional,\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.generalNames || \"\"),\r\n\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tGeneralNames.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"names\",\r\n\t\t\t\t\tgeneralNames: \"generalNames\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for GeneralNames\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.names = Array.from(asn1.result.generalNames, element => new GeneralName({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.names, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tnames: Array.from(this.names, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}