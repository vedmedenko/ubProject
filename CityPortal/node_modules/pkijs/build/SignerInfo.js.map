{"version":3,"sources":["../src/SignerInfo.js"],"names":["asn1js","SignerInfo","parameters","version","defaultValues","sid","digestAlgorithm","signedAttrs","signatureAlgorithm","signature","unsignedAttrs","fromSchema","schema","asn1","compareSchema","verified","Error","result","valueBlock","valueDec","currentSid","idBlock","tagClass","type","compareWithDefault","outputArray","push","Integer","value","toSchema","Sequence","_object","Any","toJSON","memberName","OctetString","memberValue","isEqual","attributes","encodedValue","names","name","Choice","blockName","Constructed","optional","tagNumber"],"mappings":"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","file":"SignerInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport SignedAndUnsignedAttributes from \"./SignedAndUnsignedAttributes.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class SignerInfo \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignerInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", SignerInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @description sid\r\n\t\t */\r\n\t\tthis.sid = getParametersValue(parameters, \"sid\", SignerInfo.defaultValues(\"sid\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description digestAlgorithm\r\n\t\t */\r\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", SignerInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t\r\n\t\tif(\"signedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {SignedAndUnsignedAttributes}\r\n\t\t\t * @description signedAttrs\r\n\t\t\t */\r\n\t\t\tthis.signedAttrs = getParametersValue(parameters, \"signedAttrs\", SignerInfo.defaultValues(\"signedAttrs\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description digestAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", SignerInfo.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", SignerInfo.defaultValues(\"signature\"));\r\n\t\t\r\n\t\tif(\"unsignedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {SignedAndUnsignedAttributes}\r\n\t\t\t * @description unsignedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unsignedAttrs = getParametersValue(parameters, \"unsignedAttrs\", SignerInfo.defaultValues(\"unsignedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"sid\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signedAttrs\":\r\n\t\t\t\treturn new SignedAndUnsignedAttributes({ type: 0 });\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"unsignedAttrs\":\r\n\t\t\t\treturn new SignedAndUnsignedAttributes({ type: 1 });\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignerInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (SignerInfo.defaultValues(\"version\") === memberValue);\r\n\t\t\tcase \"sid\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\tif((memberValue instanceof AlgorithmIdentifier) === false)\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\treturn memberValue.isEqual(SignerInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t\tcase \"signedAttrs\":\r\n\t\t\t\treturn ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\tif((memberValue instanceof AlgorithmIdentifier) === false)\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\treturn memberValue.isEqual(SignerInfo.defaultValues(\"signatureAlgorithm\"));\r\n\t\t\tcase \"signature\":\r\n\t\t\tcase \"unsignedAttrs\":\r\n\t\t\t\treturn ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignerInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//SignerInfo ::= SEQUENCE {\r\n\t\t//    version CMSVersion,\r\n\t\t//    sid SignerIdentifier,\r\n\t\t//    digestAlgorithm DigestAlgorithmIdentifier,\r\n\t\t//    signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,\r\n\t\t//    signatureAlgorithm SignatureAlgorithmIdentifier,\r\n\t\t//    signature SignatureValue,\r\n\t\t//    unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }\r\n\t\t//\r\n\t\t//SignerIdentifier ::= CHOICE {\r\n\t\t//    issuerAndSerialNumber IssuerAndSerialNumber,\r\n\t\t//    subjectKeyIdentifier [0] SubjectKeyIdentifier }\r\n\t\t//\r\n\t\t//SubjectKeyIdentifier ::= OCTET STRING\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [sid]\r\n\t\t * @property {string} [digestAlgorithm]\r\n\t\t * @property {string} [signedAttrs]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [unsignedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\tname: \"SignerInfo\",\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ name: (names.version || \"SignerInfo.version\") }),\r\n\t\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tIssuerAndSerialNumber.schema(names.sid || {\r\n\t\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\t\tblockName: \"SignerInfo.sid\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\tname: (names.sid || \"SignerInfo.sid\"),\r\n\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tvalue: [new asn1js.OctetString()]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.digestAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tSignedAndUnsignedAttributes.schema(names.signedAttrs || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.signedAttrs\",\r\n\t\t\t\t\t\t\ttagNumber: 0\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tnew asn1js.OctetString({ name: (names.signature || \"SignerInfo.signature\") }),\r\n\t\t\t\t\tSignedAndUnsignedAttributes.schema(names.unsignedAttrs || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.unsignedAttrs\",\r\n\t\t\t\t\t\t\ttagNumber: 1\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignerInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CMS_SIGNER_INFO\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"SignerInfo.version\"].valueBlock.valueDec;\r\n\r\n\t\tconst currentSid = asn1.result[\"SignerInfo.sid\"];\r\n\t\tif(currentSid.idBlock.tagClass === 1)\r\n\t\t\tthis.sid = new IssuerAndSerialNumber({ schema: currentSid });\r\n\t\telse\r\n\t\t\tthis.sid = currentSid;\r\n\r\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"SignerInfo.digestAlgorithm\"] });\r\n\t\tif(\"SignerInfo.signedAttrs\" in asn1.result)\r\n\t\t\tthis.signedAttrs = new SignedAndUnsignedAttributes({ type: 0, schema: asn1.result[\"SignerInfo.signedAttrs\"] });\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"SignerInfo.signatureAlgorithm\"] });\r\n\t\tthis.signature = asn1.result[\"SignerInfo.signature\"];\r\n\t\tif(\"SignerInfo.unsignedAttrs\" in asn1.result)\r\n\t\t\tthis.unsignedAttrs = new SignedAndUnsignedAttributes({ type: 1, schema: asn1.result[\"SignerInfo.unsignedAttrs\"] });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tif(SignerInfo.compareWithDefault(\"sid\", this.sid))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\r\n\t\t\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\tif(this.sid instanceof IssuerAndSerialNumber)\r\n\t\t\toutputArray.push(this.sid.toSchema());\r\n\t\telse\r\n\t\t\toutputArray.push(this.sid);\r\n\t\t\r\n\t\toutputArray.push(this.digestAlgorithm.toSchema());\r\n\t\t\r\n\t\tif(\"signedAttrs\" in this)\r\n\t\t{\r\n\t\t\tif(SignerInfo.compareWithDefault(\"signedAttrs\", this.signedAttrs) === false)\r\n\t\t\t\toutputArray.push(this.signedAttrs.toSchema());\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\t\t\r\n\t\tif(\"unsignedAttrs\" in this)\r\n\t\t{\r\n\t\t\tif(SignerInfo.compareWithDefault(\"unsignedAttrs\", this.unsignedAttrs) === false)\r\n\t\t\t\toutputArray.push(this.unsignedAttrs.toSchema());\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(SignerInfo.compareWithDefault(\"sid\", this.sid))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\r\n\t\t\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\r\n\t\tif(!(this.sid instanceof asn1js.Any))\r\n\t\t\t_object.sid = this.sid.toJSON();\r\n\r\n\t\t_object.digestAlgorithm = this.digestAlgorithm.toJSON();\r\n\r\n\t\tif(SignerInfo.compareWithDefault(\"signedAttrs\", this.signedAttrs) === false)\r\n\t\t\t_object.signedAttrs = this.signedAttrs.toJSON();\r\n\r\n\t\t_object.signatureAlgorithm = this.signatureAlgorithm.toJSON();\r\n\t\t_object.signature = this.signature.toJSON();\r\n\r\n\t\tif(SignerInfo.compareWithDefault(\"unsignedAttrs\", this.unsignedAttrs) === false)\r\n\t\t\t_object.unsignedAttrs = this.unsignedAttrs.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}