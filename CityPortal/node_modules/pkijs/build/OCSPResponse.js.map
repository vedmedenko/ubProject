{"version":3,"sources":["../src/OCSPResponse.js"],"names":["asn1js","OCSPResponse","parameters","responseStatus","defaultValues","responseBytes","fromSchema","schema","asn1","compareSchema","verified","Error","result","outputArray","push","Constructed","idBlock","tagClass","tagNumber","value","toSchema","Sequence","_object","toJSON","certificate","issuerCertificate","basicResponse","isForCertificate","status","responseType","asn1Basic","fromBER","response","valueBlock","valueHex","ex","getCertificateStatus","privateKey","hashAlgorithm","sign","Promise","reject","certs","verify","memberName","Enumerated","memberValue","isEqual","compareWithDefault","names","name","blockName","optional"],"mappings":"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","file":"OCSPResponse.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport ResponseBytes from \"./ResponseBytes.js\";\r\nimport BasicOCSPResponse from \"./BasicOCSPResponse.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class OCSPResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OCSPResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Enumerated}\r\n\t\t * @description responseStatus\r\n\t\t */\r\n\t\tthis.responseStatus = getParametersValue(parameters, \"responseStatus\", OCSPResponse.defaultValues(\"responseStatus\"));\r\n\r\n\t\tif(\"responseBytes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ResponseBytes}\r\n\t\t\t * @description responseBytes\r\n\t\t\t */\r\n\t\t\tthis.responseBytes = getParametersValue(parameters, \"responseBytes\", OCSPResponse.defaultValues(\"responseBytes\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseStatus\":\r\n\t\t\t\treturn new asn1js.Enumerated();\r\n\t\t\tcase \"responseBytes\":\r\n\t\t\t\treturn new ResponseBytes();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseStatus\":\r\n\t\t\t\treturn (memberValue.isEqual(OCSPResponse.defaultValues(memberName)));\r\n\t\t\tcase \"responseBytes\":\r\n\t\t\t\treturn ((ResponseBytes.compareWithDefault(\"responseType\", memberValue.responseType)) &&\r\n\t\t\t\t\t\t(ResponseBytes.compareWithDefault(\"response\", memberValue.response)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//OCSPResponse ::= SEQUENCE {\r\n\t\t//    responseStatus         OCSPResponseStatus,\r\n\t\t//    responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }\r\n\t\t//\r\n\t\t//OCSPResponseStatus ::= ENUMERATED {\r\n\t\t//    successful            (0),  -- Response has valid confirmations\r\n\t\t//    malformedRequest      (1),  -- Illegal confirmation request\r\n\t\t//    internalError         (2),  -- Internal error in issuer\r\n\t\t//    tryLater              (3),  -- Try again later\r\n\t\t//    -- (4) is not used\r\n\t\t//    sigRequired           (5),  -- Must sign the request\r\n\t\t//    unauthorized          (6)   -- Request unauthorized\r\n\t\t//}\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [responseStatus]\r\n\t\t * @property {string} [responseBytes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"OCSPResponse\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Enumerated({ name: (names.responseStatus || \"responseStatus\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tResponseBytes.schema(names.responseBytes || {\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: \"responseBytes\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOCSPResponse.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OCSP_RESPONSE\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.responseStatus = asn1.result.responseStatus;\r\n\t\tif(\"responseBytes\" in asn1.result)\r\n\t\t\tthis.responseBytes = new ResponseBytes({ schema: asn1.result.responseBytes });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.responseStatus);\r\n\t\tif(\"responseBytes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.responseBytes.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tresponseStatus: this.responseStatus.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"responseBytes\" in this)\r\n\t\t\t_object.responseBytes = this.responseBytes.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OCSP response status for specific certificate\r\n\t * @param {Certificate} certificate\r\n\t * @param {Certificate} issuerCertificate\r\n\t * @returns {*}\r\n\t */\r\n\tgetCertificateStatus(certificate, issuerCertificate)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet basicResponse;\r\n\r\n\t\tconst result = {\r\n\t\t\tisForCertificate: false,\r\n\t\t\tstatus: 2 // 0 = good, 1 = revoked, 2 = unknown\r\n\t\t};\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"ResponseBytes\" contain \"OCSP_BASIC_RESPONSE\"\r\n\t\tif((\"responseBytes\" in this) === false)\r\n\t\t\treturn result;\r\n\r\n\t\tif(this.responseBytes.responseType !== \"1.3.6.1.5.5.7.48.1.1\") // id-pkix-ocsp-basic\r\n\t\t\treturn result;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconst asn1Basic = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tbasicResponse = new BasicOCSPResponse({ schema: asn1Basic.result });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn basicResponse.getCertificateStatus(certificate, issuerCertificate);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for current OCSP Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm)\r\n\t{\r\n\t\t//region Check that ResponseData has type BasicOCSPResponse and sign it\r\n\t\tif(this.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\")\r\n\t\t{\r\n\t\t\tconst asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tconst basicResponse = new BasicOCSPResponse({ schema: asn1.result });\r\n\r\n\t\t\treturn basicResponse.sign(privateKey, hashAlgorithm);\r\n\t\t}\r\n\r\n\t\treturn Promise.reject(`Unknown ResponseBytes type: ${this.responseBytes.responseType}`);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current OCSP Response\r\n\t * @param {Certificate|null} issuerCertificate In order to decrease size of resp issuer cert could be ommited. In such case you need manually provide it.\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(issuerCertificate = null)\r\n\t{\r\n\t\t//region Check that ResponseBytes exists in the object\r\n\t\tif((\"responseBytes\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Empty ResponseBytes field\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that ResponceData has type BasicOCSPResponse and verify it\r\n\t\tif(this.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\")\r\n\t\t{\r\n\t\t\tconst asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tconst basicResponse = new BasicOCSPResponse({ schema: asn1.result });\r\n\r\n\t\t\tif(issuerCertificate !== null)\r\n\t\t\t{\r\n\t\t\t\tif((\"certs\" in basicResponse) === false)\r\n\t\t\t\t\tbasicResponse.certs = [];\r\n\t\t\t\t\r\n\t\t\t\tbasicResponse.certs.push(issuerCertificate);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn basicResponse.verify();\r\n\t\t}\r\n\r\n\t\treturn Promise.reject(`Unknown ResponseBytes type: ${this.responseBytes.responseType}`);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}