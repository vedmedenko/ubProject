{"version":3,"sources":["../src/Extensions.js"],"names":["asn1js","Extensions","parameters","extensions","defaultValues","fromSchema","schema","asn1","compareSchema","names","verified","Error","Array","from","result","element","Sequence","value","toSchema","toJSON","memberName","optional","name","blockName","Repeated","extension"],"mappings":";;;;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;;;;;;;;;AACA;AACA;;;IAGqBC,U;AAEpB;AACA;;;;;AAKA,uBACA;AAAA,MADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;AACA;;;;AAIA,OAAKC,UAAL,GAAkB,iCAAmBD,UAAnB,EAA+B,YAA/B,EAA6CD,WAAWG,aAAX,CAAyB,YAAzB,CAA7C,CAAlB;AACA;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKG,UAAL,CAAgBH,WAAWI,MAA3B;AACD;AACA;AACD;AACA;;;;;;;;;AA4CA;AACA;;;;6BAIWA,M,EACX;AACC;AACA,OAAMC,OAAOP,OAAOQ,aAAP,CAAqBF,MAArB,EACZA,MADY,EAEZL,WAAWK,MAAX,CAAkB;AACjBG,WAAO;AACNN,iBAAY;AADN;AADU,IAAlB,CAFY,CAAb;;AASA,OAAGI,KAAKG,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,oEAAV,CAAN;AACD;;AAEA;AACA,QAAKR,UAAL,GAAkBS,MAAMC,IAAN,CAAWN,KAAKO,MAAL,CAAYX,UAAvB,EAAmC;AAAA,WAAW,wBAAc,EAAEG,QAAQS,OAAV,EAAd,CAAX;AAAA,IAAnC,CAAlB;AACA;AACA;AACD;AACA;;;;;;;6BAKA;AACC;AACA,UAAQ,IAAIf,OAAOgB,QAAX,CAAoB;AAC3BC,WAAOL,MAAMC,IAAN,CAAW,KAAKV,UAAhB,EAA4B;AAAA,YAAWY,QAAQG,QAAR,EAAX;AAAA,KAA5B;AADoB,IAApB,CAAR;AAGA;AACA;AACD;AACA;;;;;;;2BAKA;AACC,UAAO;AACNf,gBAAYS,MAAMC,IAAN,CAAW,KAAKV,UAAhB,EAA4B;AAAA,YAAWY,QAAQI,MAAR,EAAX;AAAA,KAA5B;AADN,IAAP;AAGA;AACD;;;;gCAzFqBC,U,EACrB;AACC,WAAOA,UAAP;AAEC,SAAK,YAAL;AACC,YAAO,EAAP;AACD;AACC,WAAM,IAAIT,KAAJ,gDAAuDS,UAAvD,CAAN;AALF;AAOA;AACD;AACA;;;;;;;;;2BAOA;AAAA,OADclB,UACd,uEAD2B,EAC3B;AAAA,OAD+BmB,QAC/B,uEAD0C,KAC1C;;AACC;;AAEA;;;;;;AAMA,OAAMZ,QAAQ,iCAAmBP,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAIF,OAAOgB,QAAX,CAAoB;AAC3BK,sBAD2B;AAE3BC,UAAOb,MAAMc,SAAN,IAAmB,EAFC;AAG3BN,WAAO,CACN,IAAIjB,OAAOwB,QAAX,CAAoB;AACnBF,WAAOb,MAAMN,UAAN,IAAoB,EADR;AAEnBc,YAAO,oBAAUX,MAAV,CAAiBG,MAAMgB,SAAN,IAAmB,EAApC;AAFY,KAApB,CADM;AAHoB,IAApB,CAAR;AAUA;;;;;AAoDF;;;kBAvHqBxB,U","file":"Extensions.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport Extension from \"./Extension.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class Extensions\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Extensions class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<Extension>}\r\n\t\t * @description type\r\n\t\t */\r\n\t\tthis.extensions = getParametersValue(parameters, \"extensions\", Extensions.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Extensions class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @param {boolean} optional Flag that current schema should be optional\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {}, optional = false)\r\n\t{\r\n\t\t//Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [extensions]\r\n\t\t * @property {string} [extension]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\toptional,\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.extensions || \"\"),\r\n\t\t\t\t\tvalue: Extension.schema(names.extension || {})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tExtensions.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\textensions: \"extensions\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EXTENSIONS\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.extensions = Array.from(asn1.result.extensions, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\textensions: Array.from(this.extensions, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}