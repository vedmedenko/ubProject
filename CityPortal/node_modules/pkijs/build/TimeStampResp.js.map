{"version":3,"sources":["../src/TimeStampResp.js"],"names":["asn1js","TimeStampResp","parameters","status","defaultValues","timeStampToken","fromSchema","schema","asn1","compareSchema","verified","Error","result","outputArray","push","toSchema","Sequence","value","_object","toJSON","privateKey","hashAlgorithm","Promise","reject","contentType","signed","content","sign","verificationParameters","signer","trustedCerts","data","ArrayBuffer","verify","memberName","memberValue","compareWithDefault","Any","names","name","blockName","optional"],"mappings":"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","file":"TimeStampResp.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport PKIStatusInfo from \"./PKIStatusInfo.js\";\r\nimport ContentInfo from \"./ContentInfo.js\";\r\nimport SignedData from \"./SignedData.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class TimeStampResp\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TimeStampResp class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {PKIStatusInfo}\r\n\t\t * @description status\r\n\t\t */\r\n\t\tthis.status = getParametersValue(parameters, \"status\", TimeStampResp.defaultValues(\"status\"));\r\n\r\n\t\tif(\"timeStampToken\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ContentInfo}\r\n\t\t\t * @description timeStampToken\r\n\t\t\t */\r\n\t\t\tthis.timeStampToken = getParametersValue(parameters, \"timeStampToken\", TimeStampResp.defaultValues(\"timeStampToken\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn new PKIStatusInfo();\r\n\t\t\tcase \"timeStampToken\":\r\n\t\t\t\treturn new ContentInfo();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampResp class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn ((PKIStatusInfo.compareWithDefault(\"status\", memberValue.status)) &&\r\n\t\t\t\t\t\t((\"statusStrings\" in memberValue) === false) &&\r\n\t\t\t\t\t\t((\"failInfo\" in memberValue) === false));\r\n\t\t\tcase \"timeStampToken\":\r\n\t\t\t\treturn ((memberValue.contentType === \"\") &&\r\n\t\t\t\t\t\t(memberValue.content instanceof asn1js.Any));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampResp class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//TimeStampResp ::= SEQUENCE  {\r\n\t\t//    status                  PKIStatusInfo,\r\n\t\t//    timeStampToken          TimeStampToken     OPTIONAL  }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [status]\r\n\t\t * @property {string} [timeStampToken]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TimeStampResp\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tPKIStatusInfo.schema(names.status || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampResp.status\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tContentInfo.schema(names.timeStampToken || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampResp.timeStampToken\",\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTimeStampResp.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TSP_RESPONSE\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.status = new PKIStatusInfo({ schema: asn1.result[\"TimeStampResp.status\"] });\r\n\t\tif(\"TimeStampResp.timeStampToken\" in asn1.result)\r\n\t\t\tthis.timeStampToken = new ContentInfo({ schema: asn1.result[\"TimeStampResp.timeStampToken\"] });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.status.toSchema());\r\n\t\tif(\"timeStampToken\" in this)\r\n\t\t\toutputArray.push(this.timeStampToken.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tstatus: this.status\r\n\t\t};\r\n\r\n\t\tif(\"timeStampToken\" in this)\r\n\t\t\t_object.timeStampToken = this.timeStampToken.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Sign current TSP Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm)\r\n\t{\r\n\t\t//region Check that \"timeStampToken\" exists\r\n\t\tif((\"timeStampToken\" in this) === false)\r\n\t\t\treturn Promise.reject(\"timeStampToken is absent in TSP response\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"timeStampToken\" has a right internal format\r\n\t\tif(this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\r\n\t\t\treturn Promise.reject(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Sign internal signed data value\r\n\t\tconst signed = new ContentInfo({ schema: this.timeStampToken.content });\r\n\r\n\t\treturn signed.sign(privateKey, 0, hashAlgorithm);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current TSP Response\r\n\t * @param {Object} verificationParameters Input parameters for verification\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(verificationParameters = { signer: 0, trustedCerts: [], data: new ArrayBuffer(0) })\r\n\t{\r\n\t\t//region Check that \"timeStampToken\" exists\r\n\t\tif((\"timeStampToken\" in this) === false)\r\n\t\t\treturn Promise.reject(\"timeStampToken is absent in TSP response\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"timeStampToken\" has a right internal format\r\n\t\tif(this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\r\n\t\t\treturn Promise.reject(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Verify internal signed data value\r\n\t\tconst signed = new SignedData({ schema: this.timeStampToken.content });\r\n\r\n\t\treturn signed.verify(verificationParameters);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}