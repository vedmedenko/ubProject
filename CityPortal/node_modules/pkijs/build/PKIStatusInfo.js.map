{"version":3,"sources":["../src/PKIStatusInfo.js"],"names":["asn1js","PKIStatusInfo","parameters","status","defaultValues","statusStrings","failInfo","fromSchema","schema","asn1","compareSchema","names","verified","Error","_status","result","valueBlock","isHexOnly","valueDec","outputArray","push","Integer","value","Sequence","optional","_object","Array","from","element","toJSON","memberName","BitString","memberValue","length","isEqual","name","blockName","Repeated","Utf8String"],"mappings":"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","file":"PKIStatusInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class PKIStatusInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PKIStatusInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description status\r\n\t\t */\r\n\t\tthis.status = getParametersValue(parameters, \"status\", PKIStatusInfo.defaultValues(\"status\"));\r\n\r\n\t\tif(\"statusStrings\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Utf8String>}\r\n\t\t\t * @description statusStrings\r\n\t\t\t */\r\n\t\t\tthis.statusStrings = getParametersValue(parameters, \"statusStrings\", PKIStatusInfo.defaultValues(\"statusStrings\"));\r\n\r\n\t\tif(\"failInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @description failInfo\r\n\t\t\t */\r\n\t\t\tthis.failInfo = getParametersValue(parameters, \"failInfo\", PKIStatusInfo.defaultValues(\"failInfo\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn 2;\r\n\t\t\tcase \"statusStrings\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"failInfo\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKIStatusInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn (memberValue === PKIStatusInfo.defaultValues(memberName));\r\n\t\t\tcase \"statusStrings\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"failInfo\":\r\n\t\t\t\treturn (memberValue.isEqual(PKIStatusInfo.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKIStatusInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//PKIStatusInfo ::= SEQUENCE {\r\n\t\t//    status        PKIStatus,\r\n\t\t//    statusString  PKIFreeText     OPTIONAL,\r\n\t\t//    failInfo      PKIFailureInfo  OPTIONAL  }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [status]\r\n\t\t * @property {string} [statusStrings]\r\n\t\t * @property {string} [failInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.status || \"\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.statusStrings || \"\"),\r\n\t\t\t\t\t\t\tvalue: new asn1js.Utf8String()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({\r\n\t\t\t\t\tname: (names.failInfo || \"\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPKIStatusInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tstatus: \"status\",\r\n\t\t\t\t\tstatusStrings: \"statusStrings\",\r\n\t\t\t\t\tfailInfo: \"failInfo\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PKIStatusInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tconst _status = asn1.result.status;\r\n\r\n\t\tif((_status.valueBlock.isHexOnly === true) ||\r\n\t\t\t(_status.valueBlock.valueDec < 0) ||\r\n\t\t\t(_status.valueBlock.valueDec > 5))\r\n\t\t\tthrow new Error(\"PKIStatusInfo \\\"status\\\" has invalid value\");\r\n\r\n\t\tthis.status = _status.valueBlock.valueDec;\r\n\r\n\t\tif(\"statusStrings\" in asn1.result)\r\n\t\t\tthis.statusStrings = asn1.result.statusStrings;\r\n\t\tif(\"failInfo\" in asn1.result)\r\n\t\t\tthis.failInfo = asn1.result.failInfo;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array of output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.status }));\r\n\r\n\t\tif(\"statusStrings\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tvalue: this.statusStrings\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"failInfo\" in this)\r\n\t\t\toutputArray.push(this.failInfo);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tstatus: this.status\r\n\t\t};\r\n\r\n\t\tif(\"statusStrings\" in this)\r\n\t\t\t_object.statusStrings = Array.from(this.statusStrings, element => element.toJSON());\r\n\r\n\t\tif(\"failInfo\" in this)\r\n\t\t\t_object.failInfo = this.failInfo.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}