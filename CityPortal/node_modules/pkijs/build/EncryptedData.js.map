{"version":3,"sources":["../src/EncryptedData.js"],"names":["asn1js","EncryptedData","parameters","version","defaultValues","encryptedContentInfo","unprotectedAttrs","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","Array","from","element","outputArray","push","Integer","value","toSchema","Constructed","optional","idBlock","tagClass","tagNumber","Sequence","_object","toJSON","Object","Promise","reject","engine","contentType","subtle","encryptEncryptedContentInfo","then","name","decryptEncryptedContentInfo","memberName","memberValue","compareWithDefault","contentEncryptionAlgorithm","encryptedContent","length","Repeated"],"mappings":"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","file":"EncryptedData.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EncryptedData\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncryptedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", EncryptedData.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {EncryptedContentInfo}\r\n\t\t * @description encryptedContentInfo\r\n\t\t */\r\n\t\tthis.encryptedContentInfo = getParametersValue(parameters, \"encryptedContentInfo\", EncryptedData.defaultValues(\"encryptedContentInfo\"));\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @description unprotectedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unprotectedAttrs = getParametersValue(parameters, \"unprotectedAttrs\", EncryptedData.defaultValues(\"unprotectedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn new EncryptedContentInfo();\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === 0);\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent)));\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//id-encryptedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\r\n\t\t//    us(840) rsadsi(113549) pkcs(1) pkcs7(7) 6 }\r\n\t\t\r\n\t\t//EncryptedData ::= SEQUENCE {\r\n\t\t//    version CMSVersion,\r\n\t\t//    encryptedContentInfo EncryptedContentInfo,\r\n\t\t//    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [encryptedContentInfo]\r\n\t\t * @property {string} [unprotectedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tEncryptedContentInfo.schema(names.encryptedContentInfo || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.unprotectedAttrs || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncryptedData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tencryptedContentInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptedContentInfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tunprotectedAttrs: \"unprotectedAttrs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CMS_ENCRYPTED_DATA\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in asn1.result)\r\n\t\t\tthis.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(this.encryptedContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.unprotectedAttrs, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tencryptedContentInfo: this.encryptedContentInfo.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t\t_object.unprotectedAttrs = Array.from(this.unprotectedAttrs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Encrypted Data content\r\n\t * @param {Object} parameters Parameters neccessary for encryption\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get cryptographic engine\r\n\t\tconst engine = getEngine();\r\n\t\tif(typeof engine === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to initialize cryptographic engine\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set \"contentType\" parameter\r\n\t\tparameters.contentType = \"1.2.840.113549.1.7.1\"; // \"data\"\r\n\t\t//endregion\r\n\t\t\r\n\t\tif(\"encryptEncryptedContentInfo\" in engine.subtle)\r\n\t\t{\r\n\t\t\treturn engine.subtle.encryptEncryptedContentInfo(parameters).then(result =>\r\n\t\t\t{\r\n\t\t\t\tthis.encryptedContentInfo = result;\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\treturn Promise.reject(`No support for \\\"encryptEncryptedContentInfo\\\" in current crypto engine ${engine.name}`);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Encrypted Data content\r\n\t * @param {Object} parameters Parameters neccessary for encryption\r\n\t */\r\n\tdecrypt(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get cryptographic engine\r\n\t\tconst engine = getEngine();\r\n\t\tif(typeof engine === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to initialize cryptographic engine\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set \"encryptedContentInfo\" value\r\n\t\tparameters.encryptedContentInfo = this.encryptedContentInfo;\r\n\t\t//endregion\r\n\t\t\r\n\t\tif(\"decryptEncryptedContentInfo\" in engine.subtle)\r\n\t\t\treturn engine.subtle.decryptEncryptedContentInfo(parameters);\r\n\t\t\r\n\t\treturn Promise.reject(`No support for \\\"decryptEncryptedContentInfo\\\" in current crypto engine ${engine.name}`);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}