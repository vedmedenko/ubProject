{"version":3,"sources":["../src/AccessDescription.js"],"names":["asn1js","AccessDescription","parameters","accessMethod","defaultValues","accessLocation","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","valueBlock","toString","Sequence","value","ObjectIdentifier","toSchema","toJSON","memberName","name"],"mappings":";;;;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;;;;;;;;;AACA;AACA;;;IAGqBC,iB;AAEpB;AACA;;;;;AAKA,8BACA;AAAA,MADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;AACA;;;;AAIA,OAAKC,YAAL,GAAoB,iCAAmBD,UAAnB,EAA+B,cAA/B,EAA+CD,kBAAkBG,aAAlB,CAAgC,cAAhC,CAA/C,CAApB;AACA;;;;AAIA,OAAKC,cAAL,GAAsB,iCAAmBH,UAAnB,EAA+B,gBAA/B,EAAiDD,kBAAkBG,aAAlB,CAAgC,gBAAhC,CAAjD,CAAtB;AACA;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKI,UAAL,CAAgBJ,WAAWK,MAA3B;AACD;AACA;AACD;AACA;;;;;;;;;AA4CA;AACA;;;;6BAIWA,M,EACX;AACC;AACA,OAAMC,OAAOR,OAAOS,aAAP,CAAqBF,MAArB,EACZA,MADY,EAEZN,kBAAkBM,MAAlB,CAAyB;AACxBG,WAAO;AACNP,mBAAc,cADR;AAENE,qBAAgB;AACfK,aAAO;AACNC,kBAAW;AADL;AADQ;AAFV;AADiB,IAAzB,CAFY,CAAb;;AAcA,OAAGH,KAAKI,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,2EAAV,CAAN;AACD;;AAEA;AACA,QAAKV,YAAL,GAAoBK,KAAKM,MAAL,CAAYX,YAAZ,CAAyBY,UAAzB,CAAoCC,QAApC,EAApB;AACA,QAAKX,cAAL,GAAsB,0BAAgB,EAAEE,QAAQC,KAAKM,MAAL,CAAYT,cAAtB,EAAhB,CAAtB;AACA;AACA;AACD;AACA;;;;;;;6BAKA;AACC;AACA,UAAQ,IAAIL,OAAOiB,QAAX,CAAoB;AAC3BC,WAAO,CACN,IAAIlB,OAAOmB,gBAAX,CAA4B,EAAED,OAAO,KAAKf,YAAd,EAA5B,CADM,EAEN,KAAKE,cAAL,CAAoBe,QAApB,EAFM;AADoB,IAApB,CAAR;AAMA;AACA;AACD;AACA;;;;;;;2BAKA;AACC,UAAO;AACNjB,kBAAc,KAAKA,YADb;AAENE,oBAAgB,KAAKA,cAAL,CAAoBgB,MAApB;AAFV,IAAP;AAIA;AACD;;;;gCAnGqBC,U,EACrB;AACC,WAAOA,UAAP;AAEC,SAAK,cAAL;AACC,YAAO,EAAP;AACD,SAAK,gBAAL;AACC,YAAO,2BAAP;AACD;AACC,WAAM,IAAIT,KAAJ,uDAA8DS,UAA9D,CAAN;AAPF;AASA;AACD;AACA;;;;;;;;2BAMA;AAAA,OADcpB,UACd,uEAD2B,EAC3B;;AACC;AACA;AACA;;AAEA;;;;;;AAMA,OAAMQ,QAAQ,iCAAmBR,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAIF,OAAOiB,QAAX,CAAoB;AAC3BM,UAAOb,MAAMC,SAAN,IAAmB,EADC;AAE3BO,WAAO,CACN,IAAIlB,OAAOmB,gBAAX,CAA4B,EAAEI,MAAOb,MAAMP,YAAN,IAAsB,EAA/B,EAA5B,CADM,EAEN,sBAAYI,MAAZ,CAAmBG,MAAML,cAAN,IAAwB,EAA3C,CAFM;AAFoB,IAApB,CAAR;AAOA;;;;;AA8DF;;;kBAtIqBJ,iB","file":"AccessDescription.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AccessDescription\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AccessDescription class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description accessMethod\r\n\t\t */\r\n\t\tthis.accessMethod = getParametersValue(parameters, \"accessMethod\", AccessDescription.defaultValues(\"accessMethod\"));\r\n\t\t/**\r\n\t\t * @type {GeneralName}\r\n\t\t * @description accessLocation\r\n\t\t */\r\n\t\tthis.accessLocation = getParametersValue(parameters, \"accessLocation\", AccessDescription.defaultValues(\"accessLocation\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"accessMethod\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"accessLocation\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AccessDescription class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//AccessDescription  ::=  SEQUENCE {\r\n\t\t//    accessMethod          OBJECT IDENTIFIER,\r\n\t\t//    accessLocation        GeneralName  }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [accessMethod]\r\n\t\t * @property {string} [accessLocation]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.accessMethod || \"\") }),\r\n\t\t\t\tGeneralName.schema(names.accessLocation || {})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAccessDescription.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\taccessMethod: \"accessMethod\",\r\n\t\t\t\t\taccessLocation: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"accessLocation\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AccessDescription\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.accessMethod = asn1.result.accessMethod.valueBlock.toString();\r\n\t\tthis.accessLocation = new GeneralName({ schema: asn1.result.accessLocation });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.accessMethod }),\r\n\t\t\t\tthis.accessLocation.toSchema()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\taccessMethod: this.accessMethod,\r\n\t\t\taccessLocation: this.accessLocation.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}