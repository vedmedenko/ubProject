{"version":3,"sources":["../src/PBKDF2Params.js"],"names":["asn1js","PBKDF2Params","parameters","salt","defaultValues","iterationCount","keyLength","prf","fromSchema","schema","asn1","compareSchema","names","saltPrimitive","saltConstructed","blockName","optional","verified","Error","result","valueBlock","valueDec","outputArray","push","Integer","value","isEqual","toSchema","Sequence","_object","toJSON","memberName","algorithmId","algorithmParams","Null","name","Choice","OctetString"],"mappings":"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","file":"PBKDF2Params.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2898\r\n */\r\nexport default class PBKDF2Params\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PBKDF2Params class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @description salt\r\n\t\t */\r\n\t\tthis.salt = getParametersValue(parameters, \"salt\", PBKDF2Params.defaultValues(\"salt\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description iterationCount\r\n\t\t */\r\n\t\tthis.iterationCount = getParametersValue(parameters, \"iterationCount\", PBKDF2Params.defaultValues(\"iterationCount\"));\r\n\t\t\r\n\t\tif(\"keyLength\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @description keyLength\r\n\t\t\t */\r\n\t\t\tthis.keyLength = getParametersValue(parameters, \"keyLength\", PBKDF2Params.defaultValues(\"keyLength\"));\r\n\t\t\r\n\t\tif(\"prf\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {AlgorithmIdentifier}\r\n\t\t\t * @description prf\r\n\t\t\t */\r\n\t\t\tthis.prf = getParametersValue(parameters, \"prf\", PBKDF2Params.defaultValues(\"prf\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"salt\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"iterationCount\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"keyLength\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"prf\":\r\n\t\t\t\treturn new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.3.14.3.2.26\", // SHA-1\r\n\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t});\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PBKDF2Params class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//PBKDF2-params ::= SEQUENCE {\r\n\t\t//    salt CHOICE {\r\n\t\t//        specified OCTET STRING,\r\n\t\t//        otherSource AlgorithmIdentifier },\r\n\t\t//  iterationCount INTEGER (1..MAX),\r\n\t\t//  keyLength INTEGER (1..MAX) OPTIONAL,\r\n\t\t//  prf AlgorithmIdentifier\r\n\t\t//    DEFAULT { algorithm hMAC-SHA1, parameters NULL } }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [saltPrimitive]\r\n\t\t * @property {string} [saltConstructed]\r\n\t\t * @property {string} [iterationCount]\r\n\t\t * @property {string} [keyLength]\r\n\t\t * @property {string} [prf]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.OctetString({ name: (names.saltPrimitive || \"\") }),\r\n\t\t\t\t\t\tAlgorithmIdentifier.schema(names.saltConstructed || {})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.iterationCount || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\tname: (names.keyLength || \"\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.prf || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPBKDF2Params.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsaltPrimitive: \"salt\",\r\n\t\t\t\t\tsaltConstructed: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"salt\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\titerationCount: \"iterationCount\",\r\n\t\t\t\t\tkeyLength: \"keyLength\",\r\n\t\t\t\t\tprf: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"prf\",\r\n\t\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PBKDF2_params\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.salt = asn1.result.salt;\r\n\t\tthis.iterationCount = asn1.result.iterationCount.valueBlock.valueDec;\r\n\r\n\t\tif(\"keyLength\" in asn1.result)\r\n\t\t\tthis.keyLength = asn1.result.keyLength.valueBlock.valueDec;\r\n\r\n\t\tif(\"prf\" in asn1.result)\r\n\t\t\tthis.prf = new AlgorithmIdentifier({ schema: asn1.result.prf });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.salt);\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.iterationCount }));\r\n\t\t\r\n\t\tif(\"keyLength\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"keyLength\") !== this.keyLength)\r\n\t\t\t\toutputArray.push(new asn1js.Integer({ value: this.keyLength }));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"prf\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"prf\").isEqual(this.prf) === false)\r\n\t\t\t\toutputArray.push(this.prf.toSchema());\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tsalt: this.salt.toJSON(),\r\n\t\t\titerationCount: this.iterationCount\r\n\t\t};\r\n\t\t\r\n\t\tif(\"keyLength\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"keyLength\") !== this.keyLength)\r\n\t\t\t\t_object.keyLength = this.keyLength;\r\n\t\t}\r\n\t\t\r\n\t\tif(\"prf\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"prf\").isEqual(this.prf) === false)\r\n\t\t\t\t_object.prf = this.prf.toJSON();\r\n\t\t}\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}