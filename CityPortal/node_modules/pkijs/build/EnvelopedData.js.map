{"version":3,"sources":["../src/EnvelopedData.js"],"names":["asn1js","EnvelopedData","parameters","version","defaultValues","originatorInfo","recipientInfos","encryptedContentInfo","unprotectedAttrs","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","idBlock","tagClass","tagNumber","Array","from","element","outputArray","push","Integer","value","Constructed","optional","toSchema","Set","Sequence","_object","toJSON","certificate","variant","encryptionParameters","subjectPublicKeyInfo","algorithm","algorithmId","indexOf","oaepHashAlgorithm","kdfAlgorithm","kekEncryptionLength","oaepOID","name","hashOID","hashAlgorithm","algorithmParams","Null","rsaOAEPParams","maskGenAlgorithm","keyInfo","rid","issuer","serialNumber","keyEncryptionAlgorithm","recipientCertificate","encryptedKey","aesKWoid","length","aesKW","ecdhOID","kdf","ukmBuffer","ArrayBuffer","ukmView","Uint8Array","ukm","OctetString","valueHex","recipientEncryptedKeys","encryptedKeys","preDefinedData","byteLength","keyIdentifierBuffer","keyIdentifierView","keyIdentifier","hmacHashAlgorithm","iterationCount","keyEncryptionAlgorithmParams","kekOID","kekid","preDefinedKEK","pbkdf2OID","saltBuffer","saltView","hmacOID","hash","pbkdf2Params","salt","prf","keyDerivationAlgorithm","password","contentEncryptionAlgorithm","contentToEncrypt","sequence","Promise","resolve","ivBuffer","ivView","contentView","sessionKey","encryptedContent","exportedSessionKey","recipientsPromises","_this","contentEncryptionOID","reject","crypto","then","generateKey","encrypt","iv","error","exportKey","contentType","SubKeyAgreeRecipientInfo","index","currentSequence","ecdhPublicKey","ecdhPrivateKey","recipientCurve","recipientCurveLength","exportedECDHPublicKey","curveObject","ObjectIdentifier","curveOID","toString","namedCurve","publicKey","privateKey","getPublicKey","usages","deriveBits","public","aesKWAlgorithm","KWalgorithm","kwLength","kwLengthBuffer","kwLengthView","j","eccInfo","entityUInfo","suppPubInfo","encodedInfo","toBER","ecdhAlgorithm","importKey","wrapKey","fromBER","originator","SubKeyTransRecipientInfo","SubKEKRecipientInfo","kekAlgorithm","SubPasswordRecipientinfo","ex","passwordView","iterations","deriveKey","i","all","recipientIndex","decryptionParameters","recipientPrivateKey","buffer","unwrapKey","decrypt","dataBuffer","isConstructed","content","memberName","memberValue","certs","certificates","crls","compareWithDefault","Repeated"],"mappings":"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","file":"EnvelopedData.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf } from \"pvutils\";\r\nimport { getOIDByAlgorithm, getRandomValues, getCrypto, getAlgorithmByOID, kdf } from \"./common.js\";\r\nimport OriginatorInfo from \"./OriginatorInfo.js\";\r\nimport RecipientInfo from \"./RecipientInfo.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RSAESOAEPParams from \"./RSAESOAEPParams.js\";\r\nimport KeyTransRecipientInfo from \"./KeyTransRecipientInfo.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport RecipientEncryptedKey from \"./RecipientEncryptedKey.js\";\r\nimport KeyAgreeRecipientIdentifier from \"./KeyAgreeRecipientIdentifier.js\";\r\nimport KeyAgreeRecipientInfo from \"./KeyAgreeRecipientInfo.js\";\r\nimport RecipientEncryptedKeys from \"./RecipientEncryptedKeys.js\";\r\nimport KEKRecipientInfo from \"./KEKRecipientInfo.js\";\r\nimport KEKIdentifier from \"./KEKIdentifier.js\";\r\nimport PBKDF2Params from \"./PBKDF2Params.js\";\r\nimport PasswordRecipientinfo from \"./PasswordRecipientinfo.js\";\r\nimport ECCCMSSharedInfo from \"./ECCCMSSharedInfo.js\";\r\nimport OriginatorIdentifierOrKey from \"./OriginatorIdentifierOrKey.js\";\r\nimport OriginatorPublicKey from \"./OriginatorPublicKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EnvelopedData \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EnvelopedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", EnvelopedData.defaultValues(\"version\"));\r\n\t\t\r\n\t\tif(\"originatorInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OriginatorInfo}\r\n\t\t\t * @description originatorInfo\r\n\t\t\t */\r\n\t\t\tthis.originatorInfo = getParametersValue(parameters, \"originatorInfo\", EnvelopedData.defaultValues(\"originatorInfo\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Array.<RecipientInfo>}\r\n\t\t * @description recipientInfos\r\n\t\t */\r\n\t\tthis.recipientInfos = getParametersValue(parameters, \"recipientInfos\", EnvelopedData.defaultValues(\"recipientInfos\"));\r\n\t\t/**\r\n\t\t * @type {EncryptedContentInfo}\r\n\t\t * @description encryptedContentInfo\r\n\t\t */\r\n\t\tthis.encryptedContentInfo = getParametersValue(parameters, \"encryptedContentInfo\", EnvelopedData.defaultValues(\"encryptedContentInfo\"));\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @description unprotectedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unprotectedAttrs = getParametersValue(parameters, \"unprotectedAttrs\", EnvelopedData.defaultValues(\"unprotectedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"originatorInfo\":\r\n\t\t\t\treturn new OriginatorInfo();\r\n\t\t\tcase \"recipientInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn new EncryptedContentInfo();\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EnvelopedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === EnvelopedData.defaultValues(memberName));\r\n\t\t\tcase \"originatorInfo\":\r\n\t\t\t\treturn ((memberValue.certs.certificates.length === 0) && (memberValue.crls.crls.length === 0));\r\n\t\t\tcase \"recipientInfos\":\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent))));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EnvelopedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//EnvelopedData ::= SEQUENCE {\r\n\t\t//    version CMSVersion,\r\n\t\t//    originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,\r\n\t\t//    recipientInfos RecipientInfos,\r\n\t\t//    encryptedContentInfo EncryptedContentInfo,\r\n\t\t//    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [originatorInfo]\r\n\t\t * @property {string} [recipientInfos]\r\n\t\t * @property {string} [encryptedContentInfo]\r\n\t\t * @property {string} [unprotectedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.originatorInfo || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: OriginatorInfo.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.recipientInfos || \"\"),\r\n\t\t\t\t\t\t\tvalue: RecipientInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tEncryptedContentInfo.schema(names.encryptedContentInfo || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.unprotectedAttrs || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEnvelopedData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\toriginatorInfo: \"originatorInfo\",\r\n\t\t\t\t\trecipientInfos: \"recipientInfos\",\r\n\t\t\t\t\tencryptedContentInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptedContentInfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tunprotectedAttrs: \"unprotectedAttrs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CMS_ENVELOPED_DATA\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\t\r\n\t\tif(\"originatorInfo\" in asn1.result)\r\n\t\t{\r\n\t\t\tasn1.result.originatorInfo.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\tasn1.result.originatorInfo.idBlock.tagNumber = 16; // SEQUENCE\r\n\t\t\t\r\n\t\t\tthis.originatorInfo = new OriginatorInfo({ schema: asn1.result.originatorInfo });\r\n\t\t}\r\n\t\t\r\n\t\tthis.recipientInfos = Array.from(asn1.result.recipientInfos, element => new RecipientInfo({ schema: element }));\r\n\t\tthis.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in asn1.result)\r\n\t\t\tthis.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\tif(\"originatorInfo\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.originatorInfo.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.recipientInfos, element => element.toSchema())\r\n\t\t}));\r\n\t\t\r\n\t\toutputArray.push(this.encryptedContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.unprotectedAttrs, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\t\t\r\n\t\tif(\"originatorInfo\" in this)\r\n\t\t\t_object.originatorInfo = this.originatorInfo.toJSON();\r\n\t\t\r\n\t\t_object.recipientInfos = Array.from(this.recipientInfos, element => element.toJSON());\r\n\t\t_object.encryptedContentInfo = this.encryptedContentInfo.toJSON();\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t\t_object.unprotectedAttrs = Array.from(this.unprotectedAttrs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Helpers function for filling \"RecipientInfo\" based on recipient's certificate.\r\n\t * Problem with WebCrypto is that for RSA certificates we have only one option - \"key transport\" and\r\n\t * for ECC certificates we also have one option - \"key agreement\". As soon as Google will implement\r\n\t * DH algorithm it would be possible to use \"key agreement\" also for RSA certificates.\r\n\t * @param {Certificate} [certificate] Recipient's certificate\r\n\t * @param {Object} [parameters] Additional parameters neccessary for \"fine tunning\" of encryption process\r\n\t * @param {number} [variant] Variant = 1 is for \"key transport\", variant = 2 is for \"key agreement\". In fact the \"variant\" is unneccessary now because Google has no DH algorithm implementation. Thus key encryption scheme would be choosen by certificate type only: \"key transport\" for RSA and \"key agreement\" for ECC certificates.\r\n\t */\r\n\taddRecipientByCertificate(certificate, parameters, variant)\r\n\t{\r\n\t\t//region Initial variables \r\n\t\tconst encryptionParameters = parameters || {};\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Check type of certificate\r\n\t\tif(certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.113549\") !== (-1))\r\n\t\t\tvariant = 1; // For the moment it is the only variant for RSA-based certificates\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.10045\") !== (-1))\r\n\t\t\t\tvariant = 2; // For the moment it is the only variant for ECC-based certificates\r\n\t\t\telse\r\n\t\t\t\tthrow new Error(`Unknown type of certificate's public key: ${certificate.subjectPublicKeyInfo.algorithm.algorithmId}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize encryption parameters \r\n\t\tif((\"oaepHashAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.oaepHashAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"kdfAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.kdfAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"kekEncryptionLength\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.kekEncryptionLength = 256;\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Add new \"recipient\" depends on \"variant\" and certificate type \r\n\t\tswitch(variant)\r\n\t\t{\r\n\t\t\tcase 1: // Key transport scheme\r\n\t\t\t\t{\r\n\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst oaepOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(oaepOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Can not find OID for OAEP\");\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region RSAES-OAEP-params\r\n\t\t\t\t\tconst hashOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: encryptionParameters.oaepHashAlgorithm\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(hashOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown OAEP hash algorithm: ${encryptionParameters.oaepHashAlgorithm}`);\r\n\t\t\t\t\r\n\t\t\t\t\tconst hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: hashOID,\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({\r\n\t\t\t\t\t\thashAlgorithm,\r\n\t\t\t\t\t\tmaskGenAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // id-mgf1\r\n\t\t\t\t\t\t\talgorithmParams: hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region KeyTransRecipientInfo\r\n\t\t\t\t\tconst keyInfo = new KeyTransRecipientInfo({\r\n\t\t\t\t\t\tversion: 0,\r\n\t\t\t\t\t\trid: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\tissuer: certificate.issuer,\r\n\t\t\t\t\t\t\tserialNumber: certificate.serialNumber\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: oaepOID,\r\n\t\t\t\t\t\t\talgorithmParams: rsaOAEPParams.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientCertificate: certificate\r\n\t\t\t\t\t// \"encryptedKey\" will be calculated in \"encrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 1,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // Key agreement scheme\r\n\t\t\t\t{\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t\tconst encryptedKey = new RecipientEncryptedKey({\r\n\t\t\t\t\t\trid: new KeyAgreeRecipientIdentifier({\r\n\t\t\t\t\t\t\tvariant: 1,\r\n\t\t\t\t\t\t\tvalue: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\t\tissuer: certificate.issuer,\r\n\t\t\t\t\t\t\t\tserialNumber: certificate.serialNumber\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t// \"encryptedKey\" will be calculated in \"encrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst aesKWoid = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\t\tlength: encryptionParameters.kekEncryptionLength\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(aesKWoid === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown length for key encryption algorithm: ${encryptionParameters.kekEncryptionLength}`);\r\n\t\t\t\t\r\n\t\t\t\t\tconst aesKW = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: aesKWoid,\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region KeyAgreeRecipientInfo\r\n\t\t\t\t\tconst ecdhOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tkdf: encryptionParameters.kdfAlgorithm\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(ecdhOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown KDF algorithm: ${encryptionParameters.kdfAlgorithm}`);\r\n\t\t\t\t\r\n\t\t\t\t// In fact there is no need in so long UKM, but RFC2631\r\n\t\t\t\t// has requirement that \"UserKeyMaterial\" must be 512 bits long\r\n\t\t\t\t\tconst ukmBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst ukmView = new Uint8Array(ukmBuffer);\r\n\t\t\t\t\tgetRandomValues(ukmView); // Generate random values in 64 bytes long buffer\r\n\t\t\t\t\r\n\t\t\t\t\tconst keyInfo = new KeyAgreeRecipientInfo({\r\n\t\t\t\t\t\tversion: 3,\r\n\t\t\t\t\t// \"originator\" will be calculated in \"encrypt\" function because ephemeral key would be generated there\r\n\t\t\t\t\t\tukm: new asn1js.OctetString({ valueHex: ukmBuffer }),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: ecdhOID,\r\n\t\t\t\t\t\t\talgorithmParams: aesKW.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientEncryptedKeys: new RecipientEncryptedKeys({\r\n\t\t\t\t\t\t\tencryptedKeys: [encryptedKey]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientCertificate: certificate\r\n\t\t\t\t\t});\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 2,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown \\\"variant\\\" value: ${variant}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Add recipient based on pre-defined data like password or KEK\r\n\t * @param {ArrayBuffer} preDefinedData ArrayBuffer with pre-defined data\r\n\t * @param {Object} parameters Additional parameters neccessary for \"fine tunning\" of encryption process\r\n\t * @param {number} variant Variant = 1 for pre-defined \"key encryption key\" (KEK). Variant = 2 for password-based encryption.\r\n\t */\r\n\taddRecipientByPreDefinedData(preDefinedData, parameters, variant)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst encryptionParameters = parameters || {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check initial parameters\r\n\t\tif((preDefinedData instanceof ArrayBuffer) === false)\r\n\t\t\tthrow new Error(\"Please pass \\\"preDefinedData\\\" in ArrayBuffer type\");\r\n\t\t\r\n\t\tif(preDefinedData.byteLength === 0)\r\n\t\t\tthrow new Error(\"Pre-defined data could have zero length\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize encryption parameters\r\n\t\tif((\"keyIdentifier\" in encryptionParameters) === false)\r\n\t\t{\r\n\t\t\tconst keyIdentifierBuffer = new ArrayBuffer(16);\r\n\t\t\tconst keyIdentifierView = new Uint8Array(keyIdentifierBuffer);\r\n\t\t\tgetRandomValues(keyIdentifierView);\r\n\t\t\t\r\n\t\t\tencryptionParameters.keyIdentifier = keyIdentifierBuffer;\r\n\t\t}\r\n\t\t\r\n\t\tif((\"hmacHashAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.hmacHashAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"iterationCount\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.iterationCount = 2048;\r\n\t\t\r\n\t\tif((\"keyEncryptionAlgorithm\" in encryptionParameters) === false)\r\n\t\t{\r\n\t\t\tencryptionParameters.keyEncryptionAlgorithm = {\r\n\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\tlength: 256\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tif((\"keyEncryptionAlgorithmParams\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.keyEncryptionAlgorithmParams = new asn1js.Null();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Add new recipient based on passed variant\r\n\t\tswitch(variant)\r\n\t\t{\r\n\t\t\tcase 1: // KEKRecipientInfo\r\n\t\t\t\t{\r\n\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst kekOID = getOIDByAlgorithm(encryptionParameters.keyEncryptionAlgorithm);\r\n\t\t\t\t\tif(kekOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Incorrect value for \\\"keyEncryptionAlgorithm\\\"\");\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region KEKRecipientInfo\r\n\t\t\t\t\tconst keyInfo = new KEKRecipientInfo({\r\n\t\t\t\t\t\tversion: 4,\r\n\t\t\t\t\t\tkekid: new KEKIdentifier({\r\n\t\t\t\t\t\t\tkeyIdentifier: new asn1js.OctetString({ valueHex: encryptionParameters.keyIdentifier })\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: kekOID,\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t For AES-KW params are NULL, but for other algorithm could another situation.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: encryptionParameters.keyEncryptionAlgorithmParams\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tpreDefinedKEK: preDefinedData\r\n\t\t\t\t\t// \"encryptedKey\" would be set in \"ecrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 3,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // PasswordRecipientinfo\r\n\t\t\t\t{\r\n\t\t\t\t//region keyDerivationAlgorithm\r\n\t\t\t\t\tconst pbkdf2OID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(pbkdf2OID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Can not find OID for PBKDF2\");\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Salt\r\n\t\t\t\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\t\t\tgetRandomValues(saltView);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region HMAC-based algorithm\r\n\t\t\t\t\tconst hmacOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\tname: encryptionParameters.hmacHashAlgorithm\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(hmacOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Incorrect value for \\\"hmacHashAlgorithm\\\": ${encryptionParameters.hmacHashAlgorithm}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region PBKDF2-params\r\n\t\t\t\t\tconst pbkdf2Params = new PBKDF2Params({\r\n\t\t\t\t\t\tsalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\t\t\t\titerationCount: encryptionParameters.iterationCount,\r\n\t\t\t\t\t\tprf: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hmacOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst kekOID = getOIDByAlgorithm(encryptionParameters.keyEncryptionAlgorithm);\r\n\t\t\t\t\tif(kekOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Incorrect value for \\\"keyEncryptionAlgorithm\\\"\");\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region PasswordRecipientinfo\r\n\t\t\t\t\tconst keyInfo = new PasswordRecipientinfo({\r\n\t\t\t\t\t\tversion: 0,\r\n\t\t\t\t\t\tkeyDerivationAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: pbkdf2OID,\r\n\t\t\t\t\t\t\talgorithmParams: pbkdf2Params.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: kekOID,\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t For AES-KW params are NULL, but for other algorithm could be another situation.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: encryptionParameters.keyEncryptionAlgorithmParams\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tpassword: preDefinedData\r\n\t\t\t\t\t// \"encryptedKey\" would be set in \"ecrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 4,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown value for \\\"variant\\\": ${variant}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Enveloped Data content with encrypted data\r\n\t * @param {Object} contentEncryptionAlgorithm WebCrypto algorithm. For the moment here could be only \"AES-CBC\" or \"AES-GCM\" algorithms.\r\n\t * @param {ArrayBuffer} contentToEncrypt Content to encrypt\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(contentEncryptionAlgorithm, contentToEncrypt)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\tgetRandomValues(ivView);\r\n\t\t\r\n\t\tconst contentView = new Uint8Array(contentToEncrypt);\r\n\t\t\r\n\t\tlet sessionKey;\r\n\t\tlet encryptedContent;\r\n\t\tlet exportedSessionKey;\r\n\t\t\r\n\t\tconst recipientsPromises = [];\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for input parameters\r\n\t\tconst contentEncryptionOID = getOIDByAlgorithm(contentEncryptionAlgorithm);\r\n\t\tif(contentEncryptionOID === \"\")\r\n\t\t\treturn Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Generate new content encryption key\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.generateKey(contentEncryptionAlgorithm, true, [\"encrypt\"]));\r\n\t\t//endregion\r\n\t\t//region Encrypt content\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tsessionKey = result;\r\n\t\t\t\r\n\t\t\treturn crypto.encrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\t\tsessionKey,\r\n\t\t\t\tcontentView);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t//region Export raw content of content encryption key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Create output OCTETSTRING with encrypted content\r\n\t\t\tencryptedContent = result;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\treturn crypto.exportKey(\"raw\", sessionKey);\r\n\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t).then(result =>\r\n\t\t{\r\n\t\t\texportedSessionKey = result;\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t//region Append common information to CMS_ENVELOPED_DATA\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.version = 2;\r\n\t\t\tthis.encryptedContentInfo = new EncryptedContentInfo({\r\n\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\", // \"data\"\r\n\t\t\t\tcontentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: contentEncryptionOID,\r\n\t\t\t\t\talgorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n\t\t\t\t}),\r\n\t\t\t\tencryptedContent: new asn1js.OctetString({ valueHex: encryptedContent })\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Special sub-functions to work with each recipient's type\r\n\t\tfunction SubKeyAgreeRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\r\n\t\t\tlet ecdhPublicKey;\r\n\t\t\tlet ecdhPrivateKey;\r\n\t\t\t\r\n\t\t\tlet recipientCurve;\r\n\t\t\tlet recipientCurveLength;\r\n\t\t\t\r\n\t\t\tlet exportedECDHPublicKey;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get \"namedCurve\" parameter from recipient's certificate\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tconst curveObject = _this.recipientInfos[index].value.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\r\n\t\t\t\t\r\n\t\t\t\tif((curveObject instanceof asn1js.ObjectIdentifier) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \\\"recipientCertificate\\\" for index ${index}`);\r\n\t\t\t\t\r\n\t\t\t\tconst curveOID = curveObject.valueBlock.toString();\r\n\t\t\t\t\r\n\t\t\t\tswitch(curveOID)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\t\t\trecipientCurve = \"P-256\";\r\n\t\t\t\t\t\trecipientCurveLength = 256;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\t\t\trecipientCurve = \"P-384\";\r\n\t\t\t\t\t\trecipientCurveLength = 384;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\t\t\trecipientCurve = \"P-521\";\r\n\t\t\t\t\t\trecipientCurveLength = 528;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect curve OID for index ${index}`);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn recipientCurve;\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Generate ephemeral ECDH key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t\tcrypto.generateKey({\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tnamedCurve: result\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t[\"deriveBits\"]),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Export public key of ephemeral ECDH key pair\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\tecdhPublicKey = result.publicKey;\r\n\t\t\t\tecdhPrivateKey = result.privateKey;\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.exportKey(\"spki\", ecdhPublicKey);\r\n\t\t\t},\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Import recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\texportedECDHPublicKey = result;\r\n\t\t\t\t\r\n\t\t\t\treturn _this.recipientInfos[index].value.recipientCertificate.getPublicKey({\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Create shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result => crypto.deriveBits({\r\n\t\t\t\tname: \"ECDH\",\r\n\t\t\t\tpublic: result\r\n\t\t\t},\r\n\t\t\t\tecdhPrivateKey,\r\n\t\t\t\trecipientCurveLength),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Apply KDF function to shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get length of used AES-KW algorithm\r\n\t\t\t\tconst aesKWAlgorithm = new AlgorithmIdentifier({ schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams });\r\n\t\t\t\t\r\n\t\t\t\tconst KWalgorithm = getAlgorithmByOID(aesKWAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in KWalgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${aesKWAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Translate AES-KW length to ArrayBuffer\r\n\t\t\t\tlet kwLength = KWalgorithm.length;\r\n\t\t\t\t\r\n\t\t\t\tconst kwLengthBuffer = new ArrayBuffer(4);\r\n\t\t\t\tconst kwLengthView = new Uint8Array(kwLengthBuffer);\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 3; j >= 0; j--)\r\n\t\t\t\t{\r\n\t\t\t\t\tkwLengthView[j] = kwLength;\r\n\t\t\t\t\tkwLength >>= 8;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Create and encode \"ECC-CMS-SharedInfo\" structure\r\n\t\t\t\tconst eccInfo = new ECCCMSSharedInfo({\r\n\t\t\t\t\tkeyInfo: new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: aesKWAlgorithm.algorithmId,\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t Initially RFC5753 says that AES algorithms have absent parameters.\r\n\t\t\t\t\t\t But since early implementations all put NULL here. Thus, in order to be\r\n\t\t\t\t\t\t \"backward compatible\", index also put NULL here.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tentityUInfo: _this.recipientInfos[index].value.ukm,\r\n\t\t\t\t\tsuppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tconst encodedInfo = eccInfo.toSchema().toBER(false);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get SHA algorithm used together with ECDH\r\n\t\t\t\tconst ecdhAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in ecdhAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn kdf(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Import AES-KW key from result of KDF function\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t\tcrypto.importKey(\"raw\", result, { name: \"AES-KW\" }, true, [\"wrapKey\"]),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Finally wrap session key by using AES-KW algorithm\r\n\t\t\tcurrentSequence = currentSequence.then(result => crypto.wrapKey(\"raw\", sessionKey, result, { name: \"AES-KW\" }),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region OriginatorIdentifierOrKey\r\n\t\t\t\tconst asn1 = asn1js.fromBER(exportedECDHPublicKey);\r\n\t\t\t\t\t\r\n\t\t\t\tconst originator = new OriginatorIdentifierOrKey();\r\n\t\t\t\toriginator.variant = 3;\r\n\t\t\t\toriginator.value = new OriginatorPublicKey({ schema: asn1.result });\r\n\t\t\t\t\t// There is option when we can stay with ECParameters, but here index prefer to avoid the params\r\n\t\t\t\tif(\"algorithmParams\" in originator.value.algorithm)\r\n\t\t\t\t\tdelete originator.value.algorithm.algorithmParams;\r\n\t\t\t\t\t\r\n\t\t\t\t_this.recipientInfos[index].value.originator = originator;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t We will not support using of same ephemeral key for many recipients\r\n\t\t\t\t\t */\r\n\t\t\t\t_this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKeyTransRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\t//region Get current used SHA algorithm\r\n\t\t\t\tconst schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;\r\n\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({ schema });\r\n\t\t\t\t\r\n\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn _this.recipientInfos[index].value.recipientCertificate.getPublicKey({\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\tname: hashAlgorithm.name\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"wrapKey\"]\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Encrypt early exported session key on recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t\tcrypto.encrypt(result.algorithm, result, exportedSessionKey),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKEKRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import KEK from pre-defined data\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \\\"keyEncryptionAlgorithm\\\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\t\tnew Uint8Array(_this.recipientInfos[index].value.preDefinedKEK),\r\n\t\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t[\"wrapKey\"]); // Too specific for AES-KW\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Wrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t\tcrypto.wrapKey(\"raw\", sessionKey, result, kekAlgorithm),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubPasswordRecipientinfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet pbkdf2Params;\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that we have encoded \"keyDerivationAlgorithm\" plus \"PBKDF2_params\" in there\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t\t{\r\n\t\t\t\tif((\"keyDerivationAlgorithm\" in _this.recipientInfos[index].value) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.keyDerivationAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpbkdf2Params = new PBKDF2Params({ schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t\t{\r\n\t\t\t\tconst passwordView = new Uint8Array(_this.recipientInfos[index].value.password);\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\t\tpasswordView,\r\n\t\t\t\t\t\t\"PBKDF2\",\r\n\t\t\t\t\t\tfalse,\r\n\t\t\t\t\t\t[\"deriveKey\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive key for \"keyEncryptionAlgorithm\"\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \\\"keyEncryptionAlgorithm\\\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get HMAC hash algorithm\r\n\t\t\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\t\t\t\r\n\t\t\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t\t\t\t{\r\n\t\t\t\t\tconst algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get PBKDF2 \"salt\" value\r\n\t\t\t\tconst saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get PBKDF2 iterations count\r\n\t\t\t\tconst iterations = pbkdf2Params.iterationCount;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.deriveKey({\r\n\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsalt: saltView,\r\n\t\t\t\t\titerations\r\n\t\t\t\t},\r\n\t\t\t\t\t\tresult,\r\n\t\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t[\"wrapKey\"]); // Usages are too specific for KEK algorithm\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Wrap previously exported session key (Also too specific for KEK algorithm)\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t\tcrypto.wrapKey(\"raw\", sessionKey, result, kekAlgorithm),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create special routines for each \"recipient\"\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\t{\r\n\t\t\tfor(let i = 0; i < this.recipientInfos.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\tswitch(this.recipientInfos[i].variant)\r\n\t\t\t\t\t{\r\n\t\t\t\t\tcase 1: // KeyTransRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKeyTransRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2: // KeyAgreeRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKeyAgreeRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3: // KEKRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKEKRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 4: // PasswordRecipientinfo\r\n\t\t\t\t\t\tcurrentSequence = SubPasswordRecipientinfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Uknown recipient type in array with index ${i}`);\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\trecipientsPromises.push(currentSequence);\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\treturn Promise.all(recipientsPromises);\r\n\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Decrypt existing CMS Enveloped Data content\r\n\t * @param {number} recipientIndex Index of recipient\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tdecrypt(recipientIndex, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst decryptionParameters = parameters || {};\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for input parameters\r\n\t\tif((recipientIndex + 1) > this.recipientInfos.length)\r\n\t\t\treturn Promise.reject(`Maximum value for \\\"index\\\" is: ${this.recipientInfos.length - 1}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Special sub-functions to work with each recipient's type\r\n\t\tfunction SubKeyAgreeRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\r\n\t\t\tlet recipientCurve;\r\n\t\t\tlet recipientCurveLength;\r\n\t\t\t\r\n\t\t\tlet curveOID;\r\n\t\t\t\r\n\t\t\tlet ecdhPrivateKey;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get \"namedCurve\" parameter from recipient's certificate\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t\t{\r\n\t\t\t\tif((\"recipientCertificate\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientCertificate\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"recipientPrivateKey\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tconst curveObject = decryptionParameters.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\r\n\t\t\t\t\t\r\n\t\t\t\tif((curveObject instanceof asn1js.ObjectIdentifier) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \\\"recipientCertificate\\\" for index ${index}`);\r\n\t\t\t\t\t\r\n\t\t\t\tcurveOID = curveObject.valueBlock.toString();\r\n\t\t\t\t\t\r\n\t\t\t\tswitch(curveOID)\r\n\t\t\t\t\t{\r\n\t\t\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\t\t\trecipientCurve = \"P-256\";\r\n\t\t\t\t\t\trecipientCurveLength = 256;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\t\t\trecipientCurve = \"P-384\";\r\n\t\t\t\t\t\trecipientCurveLength = 384;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\t\t\trecipientCurve = \"P-521\";\r\n\t\t\t\t\t\trecipientCurveLength = 528;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect curve OID for index ${index}`);\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"pkcs8\",\r\n\t\t\t\t\t\tdecryptionParameters.recipientPrivateKey,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t[\"deriveBits\"]\r\n\t\t\t\t\t);\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import sender's ephemeral public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\tecdhPrivateKey = result;\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Change \"OriginatorPublicKey\" if \"curve\" parameter absent\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.originator.value.algorithm) === false)\r\n\t\t\t\t\t_this.recipientInfos[index].value.originator.value.algorithm.algorithmParams = new asn1js.ObjectIdentifier({ value: curveOID });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Create ArrayBuffer with sender's public key\r\n\t\t\t\tconst buffer = _this.recipientInfos[index].value.originator.value.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"spki\",\r\n\t\t\t\t\t\tbuffer,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t[]);\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Create shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t\tcrypto.deriveBits({\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tpublic: result\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\tecdhPrivateKey,\r\n\t\t\t\t\t\trecipientCurveLength),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Apply KDF function to shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get length of used AES-KW algorithm\r\n\t\t\t\tconst aesKWAlgorithm = new AlgorithmIdentifier({ schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams });\r\n\t\t\t\t\t\r\n\t\t\t\tconst KWalgorithm = getAlgorithmByOID(aesKWAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in KWalgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${aesKWAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Translate AES-KW length to ArrayBuffer\r\n\t\t\t\tlet kwLength = KWalgorithm.length;\r\n\t\t\t\t\t\r\n\t\t\t\tconst kwLengthBuffer = new ArrayBuffer(4);\r\n\t\t\t\tconst kwLengthView = new Uint8Array(kwLengthBuffer);\r\n\t\t\t\t\t\r\n\t\t\t\tfor(let j = 3; j >= 0; j--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\tkwLengthView[j] = kwLength;\r\n\t\t\t\t\tkwLength >>= 8;\r\n\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Create and encode \"ECC-CMS-SharedInfo\" structure\r\n\t\t\t\tconst eccInfo = new ECCCMSSharedInfo({\r\n\t\t\t\t\tkeyInfo: new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: aesKWAlgorithm.algorithmId,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t Initially RFC5753 says that AES algorithms have absent parameters.\r\n\t\t\t\t\t\t\t But since early implementations all put NULL here. Thus, in order to be\r\n\t\t\t\t\t\t\t \"backward compatible\", index also put NULL here.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tentityUInfo: _this.recipientInfos[index].value.ukm,\r\n\t\t\t\t\tsuppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\r\n\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\tconst encodedInfo = eccInfo.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get SHA algorithm used together with ECDH\r\n\t\t\t\tconst ecdhAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in ecdhAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn kdf(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import AES-KW key from result of KDF function\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t\tcrypto.importKey(\"raw\",\r\n\t\t\t\t\t\tresult,\r\n\t\t\t\t\t\t{ name: \"AES-KW\" },\r\n\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t[\"unwrapKey\"]),\r\n\t\t\t\terror => Promise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Finally unwrap session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \\\"contentEncryptionAlgorithm\\\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t\t_this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\t\tresult,\r\n\t\t\t\t\t\t{ name: \"AES-KW\" },\r\n\t\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKeyTransRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import recipient's private key\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t\t{\r\n\t\t\t\tif((\"recipientPrivateKey\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyTransRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get current used SHA algorithm\r\n\t\t\t\tconst schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;\r\n\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({ schema });\r\n\t\t\t\t\t\r\n\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"pkcs8\",\r\n\t\t\t\t\t\tdecryptionParameters.recipientPrivateKey,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\tname: hashAlgorithm.name\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Decrypt encrypted session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.decrypt(result.algorithm,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex\r\n\t\t\t\t), error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import decrypted session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \\\"contentEncryptionAlgorithm\\\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\t\tresult,\r\n\t\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t[\"decrypt\"]\r\n\t\t\t\t\t);\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKEKRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import KEK from pre-defined data\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t\t{\r\n\t\t\t\tif((\"preDefinedData\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \\\"keyEncryptionAlgorithm\\\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\t\tdecryptionParameters.preDefinedData,\r\n\t\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t[\"unwrapKey\"]); // Too specific for AES-KW\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Unwrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \\\"contentEncryptionAlgorithm\\\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\t\tresult,\r\n\t\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubPasswordRecipientinfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet pbkdf2Params;\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t\t{\r\n\t\t\t\tif((\"preDefinedData\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"keyDerivationAlgorithm\" in _this.recipientInfos[index].value) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.keyDerivationAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpbkdf2Params = new PBKDF2Params({ schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\t\tdecryptionParameters.preDefinedData,\r\n\t\t\t\t\t\t\"PBKDF2\",\r\n\t\t\t\t\t\tfalse,\r\n\t\t\t\t\t\t[\"deriveKey\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive key for \"keyEncryptionAlgorithm\"\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \\\"keyEncryptionAlgorithm\\\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get HMAC hash algorithm\r\n\t\t\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\t\t\t\r\n\t\t\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t\t\t\t{\r\n\t\t\t\t\tconst algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get PBKDF2 \"salt\" value\r\n\t\t\t\tconst saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get PBKDF2 iterations count\r\n\t\t\t\tconst iterations = pbkdf2Params.iterationCount;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.deriveKey({\r\n\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsalt: saltView,\r\n\t\t\t\t\titerations\r\n\t\t\t\t},\r\n\t\t\t\t\t\tresult,\r\n\t\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t[\"unwrapKey\"]); // Usages are too specific for KEK algorithm\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Unwrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \\\"contentEncryptionAlgorithm\\\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\t\tresult,\r\n\t\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Perform steps, specific to each type of session key encryption\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\tswitch(this.recipientInfos[recipientIndex].variant)\r\n\t\t\t\t{\r\n\t\t\t\tcase 1: // KeyTransRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKeyTransRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2: // KeyAgreeRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKeyAgreeRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3: // KEKRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKEKRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4: // PasswordRecipientinfo\r\n\t\t\t\t\tcurrentSequence = SubPasswordRecipientinfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn Promise.reject(`Uknown recipient type in array with index ${recipientIndex}`);\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Finally decrypt data by session key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\treturn Promise.reject(`Incorrect \\\"contentEncryptionAlgorithm\\\": ${this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get \"intialization vector\" for content encryption algorithm\r\n\t\t\tconst ivBuffer = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams.valueBlock.valueHex;\r\n\t\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Create correct data block for decryption\r\n\t\t\tlet dataBuffer = new ArrayBuffer(0);\r\n\t\t\t\t\r\n\t\t\tif(this.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\tdataBuffer = this.encryptedContentInfo.encryptedContent.valueBlock.valueHex;\r\n\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\tfor(const content of this.encryptedContentInfo.encryptedContent.valueBlock.value)\r\n\t\t\t\t\tdataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\treturn crypto.decrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tdataBuffer);\r\n\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}