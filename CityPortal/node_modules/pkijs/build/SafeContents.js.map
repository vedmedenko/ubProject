{"version":3,"sources":["../src/SafeContents.js"],"names":["asn1js","SafeContents","parameters","safeBags","defaultValues","fromSchema","schema","asn1","compareSchema","names","verified","Error","Array","from","result","element","Sequence","value","toSchema","toJSON","memberName","memberValue","length","name","blockName","Repeated"],"mappings":";;;;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;;;;;;;;;AACA;AACA;;;IAGqBC,Y;AAEpB;AACA;;;;;AAKA,yBACA;AAAA,MADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;AACA;;;;AAIA,OAAKC,QAAL,GAAgB,iCAAmBD,UAAnB,EAA+B,UAA/B,EAA2CD,aAAaG,aAAb,CAA2B,UAA3B,CAA3C,CAAhB;AACA;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKG,UAAL,CAAgBH,WAAWI,MAA3B;AACD;AACA;AACD;AACA;;;;;;;;;AAyDA;AACA;;;;6BAIWA,M,EACX;AACC;AACA,OAAMC,OAAOP,OAAOQ,aAAP,CAAqBF,MAArB,EACZA,MADY,EAEZL,aAAaK,MAAb,CAAoB;AACnBG,WAAO;AACNN,eAAU;AADJ;AADY,IAApB,CAFY,CAAb;;AASA,OAAGI,KAAKG,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,sEAAV,CAAN;AACD;;AAEA;AACA,QAAKR,QAAL,GAAgBS,MAAMC,IAAN,CAAWN,KAAKO,MAAL,CAAYX,QAAvB,EAAiC;AAAA,WAAW,sBAAY,EAAEG,QAAQS,OAAV,EAAZ,CAAX;AAAA,IAAjC,CAAhB;AACA;AACA;AACD;AACA;;;;;;;6BAKA;AACC;AACA,UAAQ,IAAIf,OAAOgB,QAAX,CAAoB;AAC3BC,WAAOL,MAAMC,IAAN,CAAW,KAAKV,QAAhB,EAA0B;AAAA,YAAWY,QAAQG,QAAR,EAAX;AAAA,KAA1B;AADoB,IAApB,CAAR;AAGA;AACA;AACD;AACA;;;;;;;2BAKA;AACC,UAAO;AACNf,cAAUS,MAAMC,IAAN,CAAW,KAAKV,QAAhB,EAA0B;AAAA,YAAWY,QAAQI,MAAR,EAAX;AAAA,KAA1B;AADJ,IAAP;AAGA;AACD;;;;gCAtGqBC,U,EACrB;AACC,WAAOA,UAAP;AAEC,SAAK,UAAL;AACC,YAAO,EAAP;AACD;AACC,WAAM,IAAIT,KAAJ,kDAAyDS,UAAzD,CAAN;AALF;AAOA;AACD;AACA;;;;;;;;qCAK0BA,U,EAAYC,W,EACtC;AACC,WAAOD,UAAP;AAEC,SAAK,UAAL;AACC,YAAQC,YAAYC,MAAZ,KAAuB,CAA/B;AACD;AACC,WAAM,IAAIX,KAAJ,kDAAyDS,UAAzD,CAAN;AALF;AAOA;AACD;AACA;;;;;;;;2BAMA;AAAA,OADclB,UACd,uEAD2B,EAC3B;;AACC;;AAEA;;;;;AAKA,OAAMO,QAAQ,iCAAmBP,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAIF,OAAOgB,QAAX,CAAoB;AAC3BO,UAAOd,MAAMe,SAAN,IAAmB,EADC;AAE3BP,WAAO,CACN,IAAIjB,OAAOyB,QAAX,CAAoB;AACnBF,WAAOd,MAAMN,QAAN,IAAkB,EADN;AAEnBc,YAAO,kBAAQX,MAAR;AAFY,KAApB,CADM;AAFoB,IAApB,CAAR;AASA;;;;;AAoDF;;;kBApIqBL,Y","file":"SafeContents.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport SafeBag from \"./SafeBag.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class SafeContents\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SafeContents class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<SafeBag>}\r\n\t\t * @description safeBags\r\n\t\t */\r\n\t\tthis.safeBags = getParametersValue(parameters, \"safeBags\", SafeContents.defaultValues(\"safeBags\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"safeBags\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SafeContents class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"safeBags\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SafeContents class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//SafeContents ::= SEQUENCE OF SafeBag\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [safeBags]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.safeBags || \"\"),\r\n\t\t\t\t\tvalue: SafeBag.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSafeContents.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsafeBags: \"safeBags\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SafeContents\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.safeBags = Array.from(asn1.result.safeBags, element => new SafeBag({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.safeBags, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tsafeBags: Array.from(this.safeBags, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}