{"version":3,"sources":["../src/CRLBag.js"],"names":["asn1js","CRLBag","parameters","crlId","defaultValues","crlValue","parsedValue","fromSchema","schema","asn1","compareSchema","names","id","value","verified","Error","result","valueBlock","toString","asn1Inner","fromBER","certValue","valueHex","certId","OctetString","toSchema","toBER","Sequence","ObjectIdentifier","Constructed","idBlock","tagClass","tagNumber","toJSON","memberName","Any","memberValue","Object","keys","length","name","blockName"],"mappings":"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","file":"CRLBag.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class CRLBag\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CRLBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description crlId\r\n\t\t */\r\n\t\tthis.crlId = getParametersValue(parameters, \"crlId\", CRLBag.defaultValues(\"crlId\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @description crlValue\r\n\t\t */\r\n\t\tthis.crlValue = getParametersValue(parameters, \"crlValue\", CRLBag.defaultValues(\"crlValue\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @description parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", CRLBag.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crlId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"crlValue\":\r\n\t\t\t\treturn (new asn1js.Any());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CRLBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crlId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"crlValue\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CRLBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//CRLBag ::= SEQUENCE {\r\n\t\t//    crlId     \tBAG-TYPE.&id ({CRLTypes}),\r\n\t\t//    crlValue \t[0] EXPLICIT BAG-TYPE.&Type ({CRLTypes}{@crlId})\r\n\t\t//}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [id]\r\n\t\t * @property {string} [value]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.value || \"value\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCRLBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tid: \"crlId\",\r\n\t\t\t\t\tvalue: \"crlValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CRLBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.crlId = asn1.result.crlId.valueBlock.toString();\r\n\t\tthis.crlValue = asn1.result.crlValue;\r\n\t\t\r\n\t\tswitch(this.crlId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.9.23.1\": // x509CRL\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);\r\n\t\t\t\t\tthis.parsedValue = new CertificateRevocationList({ schema: asn1Inner.result });\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect \\\"crlId\\\" value in CRLBag: ${this.crlId}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tif(\"parsedValue\" in this)\r\n\t\t{\r\n\t\t\tthis.certId = \"1.2.840.113549.1.9.23.1\";\r\n\t\t\tthis.certValue = new asn1js.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\r\n\t\t}\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.crlId }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.crlValue.toSchema()]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcrlId: this.crlId,\r\n\t\t\tcrlValue: this.crlValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}