{"version":3,"sources":["../src/OriginatorInfo.js"],"names":["asn1js","OriginatorInfo","parameters","certs","defaultValues","crls","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","idBlock","tagClass","tagNumber","Sequence","value","Constructed","optional","toSchema","valueBlock","toJSON","memberName","memberValue","certificates","length","otherRevocationInfos","name","blockName"],"mappings":"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","file":"OriginatorInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport CertificateSet from \"./CertificateSet.js\";\r\nimport RevocationInfoChoices from \"./RevocationInfoChoices.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OriginatorInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OriginatorInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {CertificateSet}\r\n\t\t * @description certs\r\n\t\t */\r\n\t\tthis.certs = getParametersValue(parameters, \"certs\", OriginatorInfo.defaultValues(\"certs\"));\r\n\t\t/**\r\n\t\t * @type {RevocationInfoChoices}\r\n\t\t * @description crls\r\n\t\t */\r\n\t\tthis.crls = getParametersValue(parameters, \"crls\", OriginatorInfo.defaultValues(\"crls\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn new CertificateSet();\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn new RevocationInfoChoices();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OriginatorInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn (memberValue.certificates.length === 0);\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn ((memberValue.crls.length === 0) && (memberValue.otherRevocationInfos.length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OriginatorInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//OriginatorInfo ::= SEQUENCE {\r\n\t\t//    certs [0] IMPLICIT CertificateSet OPTIONAL,\r\n\t\t//    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certs]\r\n\t\t * @property {string} [crls]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.certs || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: CertificateSet.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.crls || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: RevocationInfoChoices.schema().valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOriginatorInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcerts: \"certs\",\r\n\t\t\t\t\tcrls: \"crls\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OriginatorInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tasn1.result.certs.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tasn1.result.certs.idBlock.tagNumber = 17; // SET\r\n\r\n\t\tthis.certs = new CertificateSet({ schema: asn1.result.certs });\r\n\r\n\t\tasn1.result.crls.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tasn1.result.crls.idBlock.tagNumber = 17; // SET\r\n\r\n\t\tthis.crls = new RevocationInfoChoices({ schema: asn1.result.crls });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: this.certs.toSchema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: this.crls.toSchema().valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcerts: this.certs.toJSON(),\r\n\t\t\tcrls: this.crls.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}