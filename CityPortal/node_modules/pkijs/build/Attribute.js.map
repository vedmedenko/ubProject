{"version":3,"sources":["../src/Attribute.js"],"names":["asn1js","Attribute","parameters","type","defaultValues","values","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","valueBlock","toString","Sequence","value","ObjectIdentifier","Set","Array","from","element","toJSON","memberName","memberValue","length","name","blockName","setName","Repeated","Any"],"mappings":"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","file":"Attribute.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2986\r\n */\r\nexport default class Attribute {\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description type\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", Attribute.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @description values\r\n\t\t */\r\n\t\tthis.values = getParametersValue(parameters, \"values\", Attribute.defaultValues(\"values\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"values\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"values\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {\r\n\t\t//    type   ATTRIBUTE.&id({IOSet}),\r\n\t\t//    values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type})\r\n\t\t//}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.type || \"\") }),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tname: (names.setName || \"\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.values || \"\"),\r\n\t\t\t\t\t\t\tvalue: new asn1js.Any()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttribute.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttype: \"type\",\r\n\t\t\t\t\tvalues: \"values\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ATTRIBUTE\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.type.valueBlock.toString();\r\n\t\tthis.values = asn1.result.values;\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.type }),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: this.values\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttype: this.type,\r\n\t\t\tvalues: Array.from(this.values, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}