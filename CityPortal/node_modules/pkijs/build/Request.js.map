{"version":3,"sources":["../src/Request.js"],"names":["asn1js","Request","parameters","reqCert","defaultValues","singleRequestExtensions","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","Array","from","valueBlock","value","element","outputArray","push","toSchema","Constructed","optional","idBlock","tagClass","tagNumber","Sequence","_object","toJSON","memberName","memberValue","isEqual","length","name","extensions"],"mappings":"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","file":"Request.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport CertID from \"./CertID.js\";\r\nimport Extension from \"./Extension.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class Request\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Request class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {CertID}\r\n\t\t * @description reqCert\r\n\t\t */\r\n\t\tthis.reqCert = getParametersValue(parameters, \"reqCert\", Request.defaultValues(\"reqCert\"));\r\n\r\n\t\tif(\"singleRequestExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @description singleRequestExtensions\r\n\t\t\t */\r\n\t\t\tthis.singleRequestExtensions = getParametersValue(parameters, \"singleRequestExtensions\", Request.defaultValues(\"singleRequestExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"reqCert\":\r\n\t\t\t\treturn new CertID();\r\n\t\t\tcase \"singleRequestExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Request class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"reqCert\":\r\n\t\t\t\treturn (memberValue.isEqual(Request.defaultValues(memberName)));\r\n\t\t\tcase \"singleRequestExtensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Request class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//Request         ::=     SEQUENCE {\r\n\t\t//    reqCert                     CertID,\r\n\t\t//    singleRequestExtensions     [0] EXPLICIT Extensions OPTIONAL }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [reqCert]\r\n\t\t * @property {string} [extensions]\r\n\t\t * @property {string} [singleRequestExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tCertID.schema(names.reqCert || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extension.schema(names.extensions || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: (names.singleRequestExtensions || \"\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRequest.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\treqCert: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"reqCert\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsingleRequestExtensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"singleRequestExtensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Request\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.reqCert = new CertID({ schema: asn1.result.reqCert });\r\n\r\n\t\tif(\"singleRequestExtensions\" in asn1.result)\r\n\t\t\tthis.singleRequestExtensions = Array.from(asn1.result.singleRequestExtensions.valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.reqCert.toSchema());\r\n\r\n\t\tif(\"singleRequestExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.singleRequestExtensions, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\treqCert: this.reqCert.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"singleRequestExtensions\" in this)\r\n\t\t\t_object.singleRequestExtensions = Array.from(this.singleRequestExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}