{"version":3,"sources":["../src/CertificateSet.js"],"names":["asn1js","CertificateSet","parameters","certificates","defaultValues","fromSchema","schema","asn1","compareSchema","verified","Error","Array","from","result","initialTagNumber","element","idBlock","tagNumber","tagClass","Set","value","toSchema","Constructed","valueBlock","toJSON","memberName","names","name","blockName","Repeated","Choice","Any"],"mappings":"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","file":"CertificateSet.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport AttributeCertificateV1 from \"./AttributeCertificateV1.js\";\r\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\";\r\nimport OtherCertificateFormat from \"./OtherCertificateFormat.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class CertificateSet\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificateSet class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @description certificates\r\n\t\t */\r\n\t\tthis.certificates = getParametersValue(parameters, \"certificates\", CertificateSet.defaultValues(\"certificates\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//CertificateSet ::= SET OF CertificateChoices\r\n\t\t//\r\n\t\t//CertificateChoices ::= CHOICE {\r\n\t\t//    certificate Certificate,\r\n\t\t//    extendedCertificate [0] IMPLICIT ExtendedCertificate,  -- Obsolete\r\n\t\t//    v1AttrCert [1] IMPLICIT AttributeCertificateV1,        -- Obsolete\r\n\t\t//    v2AttrCert [2] IMPLICIT AttributeCertificateV2,\r\n\t\t//    other [3] IMPLICIT OtherCertificateFormat }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (\r\n\t\t\tnew asn1js.Set({\r\n\t\t\t\tname: (names.blockName || \"\"),\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\tname: (names.certificates || \"certificates\"),\r\n\t\t\t\t\t\tvalue: new asn1js.Choice({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tCertificate.schema(),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t}), // JUST A STUB\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: AttributeCertificateV1.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: AttributeCertificateV2.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: OtherCertificateFormat.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificateSet.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificateSet\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certificates = Array.from(asn1.result.certificates, element =>\r\n\t\t{\r\n\t\t\tconst initialTagNumber = element.idBlock.tagNumber;\r\n\r\n\t\t\tif(element.idBlock.tagClass === 1)\r\n\t\t\t\treturn new Certificate({ schema: element });\r\n\t\t\t\r\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\r\n\t\t\telement.idBlock.tagClass = 1;\r\n\t\t\telement.idBlock.tagNumber = 16;\r\n\t\t\t//endregion\r\n\r\n\t\t\tswitch(initialTagNumber)\r\n\t\t\t{\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn new AttributeCertificateV1({ schema: element });\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn new AttributeCertificateV2({ schema: element });\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\treturn new OtherCertificateFormat({ schema: element });\r\n\t\t\t\tcase 0:\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn element;\r\n\t\t});\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.certificates, element =>\r\n\t\t\t{\r\n\t\t\t\tswitch(true)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase (element instanceof Certificate):\r\n\t\t\t\t\t\treturn element.toSchema();\r\n\t\t\t\t\tcase (element instanceof AttributeCertificateV1):\r\n\t\t\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tcase (element instanceof AttributeCertificateV2):\r\n\t\t\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tcase (element instanceof OtherCertificateFormat):\r\n\t\t\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn element;\r\n\t\t\t})\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcertificates: Array.from(this.certificates, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}