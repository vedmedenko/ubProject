{"version":3,"sources":["../src/CertificateChainValidationEngine.js"],"names":["CertificateChainValidationEngine","parameters","trustedCerts","defaultValues","certs","crls","ocsps","checkDate","findOrigin","findIssuer","certificate","validationEngine","tbs","byteLength","encodeTBS","localCert","trustedCert","checkCertificate","possibleIssuer","keyIdentifier","extensionFound","extensions","extension","extnID","parsedValue","valueBlock","valueHex","result","push","authorityCertSerialNumberEqual","authorityCertSerialNumber","serialNumber","isEqual","authorityCertIssuer","subject","issuer","verify","verificationResult","intermediateCert","i","length","splice","memberName","Date","defaultFindOrigin","defaultFindIssuer","Error","checkUnique","array","unique","j","_this","findIssuerResult","buildPath","buildPathResult","copy","slice","issuerCertificates","crlsAndCertificates","localCerts","filter","element","status","statusMessage","nextUpdate","value","issuerCertificate","crl","findCRL","hashAlgorithm","signatureAlgorithm","algorithmId","getCertificateStatus","isForCertificate","findOCSP","needToCheckCRL","isCA","mustBeCA","keyUsagePresent","cRLSign","critical","resultCode","resultMessage","view","Uint8Array","cA","checkForCA","path","notBefore","notAfter","ocspResult","crlResult","isCertificateRevoked","isCertificateCA","basicCheck","certificatePath","found","k","shortestLength","shortestIndex","compareDNSName","name","constraint","namePrepared","constraintPrepared","nameSplitted","split","constraintSplitted","nameLen","constrLen","localeCompare","compareRFC822Name","ns","cs","compareUniformResourceIdentifier","charAt","nsPort","compareIPAddress","nameView","constraintView","compareDirectoryName","typesAndValues","nameStart","localResult","type","initialPolicySet","initialExplicitPolicy","initialPolicyMappingInhibit","initialInhibitPolicy","initialPermittedSubtreesSet","initialExcludedSubtreesSet","initialRequiredNameForms","explicitPolicyIndicator","policyMappingInhibitIndicator","inhibitAnyPolicyIndicator","pendingConstraints","Array","explicitPolicyPending","policyMappingInhibitPending","inhibitAnyPolicyPending","permittedSubtrees","excludedSubtrees","requiredNameForms","pathDepth","sort","allPolicies","policiesAndCerts","anyPolicyArray","ii","policyMappings","certPolicies","explicitPolicyStart","s","certificatePolicies","policyIndex","policyIdentifier","certArray","requireExplicitPolicy","inhibitPolicyMapping","valueDec","searchAnyPolicy","mappings","issuerDomainPolicy","subjectDomainPolicy","issuerDomainPolicyIndex","subjectDomainPolicyIndex","n","m","authConstrPolicies","anyPolicyFound","userConstrPolicies","policyResult","subjectAltNames","certPermittedSubtrees","certExcludedSubtrees","concat","altNames","formFound","base","constrGroups","p","groupPermitted","valueExists","group","excluded","Object","message"],"mappings":"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","file":"CertificateChainValidationEngine.js","sourcesContent":["import { getParametersValue, isEqualBuffer } from \"pvutils\";\r\nimport { getAlgorithmByOID, stringPrep } from \"./common.js\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\r\nimport Certificate from \"./Certificate.js\";\r\n//**************************************************************************************\r\nexport default class CertificateChainValidationEngine\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificateChainValidationEngine class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<Certificate>}\r\n\t\t * @description Array of pre-defined trusted (by user) certificates\r\n\t\t */\r\n\t\tthis.trustedCerts = getParametersValue(parameters, \"trustedCerts\", this.defaultValues(\"trustedCerts\"));\r\n\t\t/**\r\n\t\t * @type {Array.<Certificate>}\r\n\t\t * @description Array with certificate chain. Could be only one end-user certificate in there!\r\n\t\t */\r\n\t\tthis.certs = getParametersValue(parameters, \"certs\", this.defaultValues(\"certs\"));\r\n\t\t/**\r\n\t\t * @type {Array.<CertificateRevocationList>}\r\n\t\t * @description Array of all CRLs for all certificates from certificate chain\r\n\t\t */\r\n\t\tthis.crls = getParametersValue(parameters, \"crls\", this.defaultValues(\"crls\"));\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @description Array of all OCSP responses\r\n\t\t */\r\n\t\tthis.ocsps = getParametersValue(parameters, \"ocsps\", this.defaultValues(\"ocsps\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @description The date at which the check would be\r\n\t\t */\r\n\t\tthis.checkDate = getParametersValue(parameters, \"checkDate\", this.defaultValues(\"checkDate\"));\r\n\t\t/**\r\n\t\t * @type {Function}\r\n\t\t * @description The date at which the check would be\r\n\t\t */\r\n\t\tthis.findOrigin = getParametersValue(parameters, \"findOrigin\", this.defaultValues(\"findOrigin\"));\r\n\t\t/**\r\n\t\t * @type {Function}\r\n\t\t * @description The date at which the check would be\r\n\t\t */\r\n\t\tthis.findIssuer = getParametersValue(parameters, \"findIssuer\", this.defaultValues(\"findIssuer\"));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\tdefaultFindOrigin(certificate, validationEngine)\r\n\t{\r\n\t\t//region Firstly encode TBS for certificate\r\n\t\tif(certificate.tbs.byteLength === 0)\r\n\t\t\tcertificate.tbs = certificate.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Intermediate Certificates\r\n\t\tfor(const localCert of validationEngine.certs)\r\n\t\t{\r\n\t\t\t//region Firstly encode TBS for certificate\r\n\t\t\tif(localCert.tbs.byteLength === 0)\r\n\t\t\t\tlocalCert.tbs = localCert.encodeTBS();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(isEqualBuffer(certificate.tbs, localCert.tbs))\r\n\t\t\t\treturn \"Intermediate Certificates\";\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Trusted Certificates\r\n\t\tfor(const trustedCert of validationEngine.trustedCerts)\r\n\t\t{\r\n\t\t\t//region Firstly encode TBS for certificate\r\n\t\t\tif(trustedCert.tbs.byteLength === 0)\r\n\t\t\t\ttrustedCert.tbs = trustedCert.encodeTBS();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(isEqualBuffer(certificate.tbs, trustedCert.tbs))\r\n\t\t\t\treturn \"Trusted Certificates\";\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn \"Unknown\";\r\n\t}\r\n\t//**********************************************************************************\r\n\tasync defaultFindIssuer(certificate, validationEngine)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet result = [];\r\n\t\t\r\n\t\tlet keyIdentifier = null;\r\n\t\t\r\n\t\tlet authorityCertIssuer = null;\r\n\t\tlet authorityCertSerialNumber = null;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Speed-up searching in case of self-signed certificates\r\n\t\tif(certificate.subject.isEqual(certificate.issuer))\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tconst verificationResult = await certificate.verify();\r\n\t\t\t\tif(verificationResult === true)\r\n\t\t\t\t\treturn [certificate];\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find values to speed-up search\r\n\t\tif(\"extensions\" in certificate)\r\n\t\t{\r\n\t\t\tfor(const extension of certificate.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.extnID === \"2.5.29.35\") // AuthorityKeyIdentifier\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"keyIdentifier\" in extension.parsedValue)\r\n\t\t\t\t\t\tkeyIdentifier = extension.parsedValue.keyIdentifier;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"authorityCertIssuer\" in extension.parsedValue)\r\n\t\t\t\t\t\t\tauthorityCertIssuer = extension.parsedValue.authorityCertIssuer;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(\"authorityCertSerialNumber\" in extension.parsedValue)\r\n\t\t\t\t\t\t\tauthorityCertSerialNumber = extension.parsedValue.authorityCertSerialNumber;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Aux function\r\n\t\tfunction checkCertificate(possibleIssuer)\r\n\t\t{\r\n\t\t\t//region Firstly search for appropriate extensions\r\n\t\t\tif(keyIdentifier !== null)\r\n\t\t\t{\r\n\t\t\t\tif(\"extensions\" in possibleIssuer)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet extensionFound = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(const extension of possibleIssuer.extensions)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(extension.extnID === \"2.5.29.14\") // SubjectKeyIdentifier\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\textensionFound = true;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(isEqualBuffer(extension.parsedValue.valueBlock.valueHex, keyIdentifier.valueBlock.valueHex))\r\n\t\t\t\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extensionFound)\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Now search for authorityCertSerialNumber\r\n\t\t\tlet authorityCertSerialNumberEqual = false;\r\n\t\t\t\r\n\t\t\tif(authorityCertSerialNumber !== null)\r\n\t\t\t\tauthorityCertSerialNumberEqual = possibleIssuer.serialNumber.isEqual(authorityCertSerialNumber);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region And at least search for Issuer data\r\n\t\t\tif(authorityCertIssuer !== null)\r\n\t\t\t{\r\n\t\t\t\tif(possibleIssuer.subject.isEqual(authorityCertIssuer))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(authorityCertSerialNumberEqual)\r\n\t\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(certificate.issuer.isEqual(possibleIssuer.subject))\r\n\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Trusted Certificates\r\n\t\tfor(const trustedCert of validationEngine.trustedCerts)\r\n\t\t\tcheckCertificate(trustedCert);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Intermediate Certificates\r\n\t\tfor(const intermediateCert of validationEngine.certs)\r\n\t\t\tcheckCertificate(intermediateCert);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Now perform certificate verification checking\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tconst verificationResult = await certificate.verify(result[i]);\r\n\t\t\t\tif(verificationResult === false)\r\n\t\t\t\t\tresult.splice(i, 1);\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\tresult.splice(i, 1); // Something wrong, remove the certificate\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tdefaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"trustedCerts\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"ocsps\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"checkDate\":\r\n\t\t\t\treturn new Date();\r\n\t\t\tcase \"findOrigin\":\r\n\t\t\t\treturn this.defaultFindOrigin;\r\n\t\t\tcase \"findIssuer\":\r\n\t\t\t\treturn this.defaultFindIssuer;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificateChainValidationEngine class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\tasync sort()\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst localCerts = [];\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Building certificate path\r\n\t\tasync function buildPath(certificate)\r\n\t\t{\r\n\t\t\tconst result = [];\r\n\t\t\t\r\n\t\t\t//region Aux function checking array for unique elements\r\n\t\t\tfunction checkUnique(array)\r\n\t\t\t{\r\n\t\t\t\tlet unique = true;\r\n\t\t\t\t\r\n\t\t\t\tfor(let i = 0; i < array.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < array.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(j === i)\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(array[i] === array[j])\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tunique = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(!unique)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn unique;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst findIssuerResult = await _this.findIssuer(certificate, _this);\r\n\t\t\tif(findIssuerResult.length === 0)\r\n\t\t\t\tthrow new Error(\"No valid certificate paths found\");\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < findIssuerResult.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(isEqualBuffer(findIssuerResult[i].tbs, certificate.tbs))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult.push([findIssuerResult[i]]);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst buildPathResult = await buildPath(findIssuerResult[i]);\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < buildPathResult.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst copy = buildPathResult[j].slice();\r\n\t\t\t\t\tcopy.splice(0, 0, findIssuerResult[i]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(checkUnique(copy))\r\n\t\t\t\t\t\tresult.push(copy);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tresult.push(buildPathResult[j]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find CRL for specific certificate\r\n\t\tasync function findCRL(certificate)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tconst issuerCertificates = [];\r\n\t\t\tconst crls = [];\r\n\t\t\tconst crlsAndCertificates = [];\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find all possible CRL issuers\r\n\t\t\tissuerCertificates.push(...localCerts.filter(element => certificate.issuer.isEqual(element.subject)));\r\n\t\t\tif(issuerCertificates.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 1,\r\n\t\t\t\t\tstatusMessage: \"No certificate's issuers\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find all CRLs for crtificate's issuer\r\n\t\t\tcrls.push(..._this.crls.filter(element => element.issuer.isEqual(certificate.issuer)));\r\n\t\t\tif(crls.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 1,\r\n\t\t\t\t\tstatusMessage: \"No CRLs for specific certificate issuer\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find specific certificate of issuer for each CRL\r\n\t\t\tfor(let i = 0; i < crls.length; i++)\r\n\t\t\t{\r\n\t\t\t\t//region Check \"nextUpdate\" for the CRL\r\n\t\t\t\t// The \"nextUpdate\" is older than \"checkDate\".\r\n\t\t\t\t// Thus we should do have another, updated CRL.\r\n\t\t\t\t// Thus the CRL assumed to be invalid.\r\n\t\t\t\tif(crls[i].nextUpdate.value < _this.checkDate)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < issuerCertificates.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst result = await crls[i].verify({ issuerCertificate: issuerCertificates[j] });\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcrlsAndCertificates.push({\r\n\t\t\t\t\t\t\t\tcrl: crls[i],\r\n\t\t\t\t\t\t\t\tcertificate: issuerCertificates[j]\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(crlsAndCertificates.length)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 0,\r\n\t\t\t\t\tstatusMessage: \"\",\r\n\t\t\t\t\tresult: crlsAndCertificates\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tstatus: 1,\r\n\t\t\t\tstatusMessage: \"No valid CRLs found\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find OCSP for specific certificate\r\n\t\tasync function findOCSP(certificate, issuerCertificate)\r\n\t\t{\r\n\t\t\t//region Get hash algorithm from certificate\r\n\t\t\tconst hashAlgorithm = getAlgorithmByOID(certificate.signatureAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\treturn 1;\r\n\t\t\tif((\"hash\" in hashAlgorithm) === false)\r\n\t\t\t\treturn 1;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Search for OCSP response for the certificate\r\n\t\t\tfor(let i = 0; i < _this.ocsps.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst result = await _this.ocsps[i].getCertificateStatus(certificate, issuerCertificate);\r\n\t\t\t\tif(result.isForCertificate)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(result.status === 0)\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for certificate to be CA\r\n\t\tasync function checkForCA(certificate, needToCheckCRL = false)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet isCA = false;\r\n\t\t\tlet mustBeCA = false;\r\n\t\t\tlet keyUsagePresent = false;\r\n\t\t\tlet cRLSign = false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"extensions\" in certificate)\r\n\t\t\t{\r\n\t\t\t\tfor(let j = 0; j < certificate.extensions.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((certificate.extensions[j].critical === true) &&\r\n\t\t\t\t\t\t((\"parsedValue\" in certificate.extensions[j]) === false))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\tresultCode: 6,\r\n\t\t\t\t\t\t\tresultMessage: `Unable to parse critical certificate extension: ${certificate.extensions[j].extnID}`\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(certificate.extensions[j].extnID === \"2.5.29.15\") // KeyUsage\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkeyUsagePresent = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst view = new Uint8Array(certificate.extensions[j].parsedValue.valueBlock.valueHex);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((view[0] & 0x04) === 0x04) // Set flag \"keyCertSign\"\r\n\t\t\t\t\t\t\tmustBeCA = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((view[0] & 0x02) === 0x02) // Set flag \"cRLSign\"\r\n\t\t\t\t\t\t\tcRLSign = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(certificate.extensions[j].extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"cA\" in certificate.extensions[j].parsedValue)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(certificate.extensions[j].parsedValue.cA === true)\r\n\t\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif((mustBeCA === true) && (isCA === false))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 3,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - using \\\"keyCertSign\\\" flag set without BasicConstaints\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif((keyUsagePresent === true) && (isCA === true) && (mustBeCA === false))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 4,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - \\\"keyCertSign\\\" flag was not set\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif((isCA === true) && (keyUsagePresent === true) && ((needToCheckCRL) && (cRLSign === false)))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 5,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - intermediate certificate must have \\\"cRLSign\\\" key usage flag\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA === false)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tresult: false,\r\n\t\t\t\t\tresultCode: 7,\r\n\t\t\t\t\tresultMessage: \"Unable to build certificate chain - more than one possible end-user certificate\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: true,\r\n\t\t\t\tresultCode: 0,\r\n\t\t\t\tresultMessage: \"\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Basic check for certificate path\r\n\t\tasync function basicCheck(path, checkDate)\r\n\t\t{\r\n\t\t\t//region Check that all dates are valid\r\n\t\t\tfor(let i = 0; i < path.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif((path[i].notBefore.value > checkDate) ||\r\n\t\t\t\t\t(path[i].notAfter.value < checkDate))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 8,\r\n\t\t\t\t\t\tresultMessage: \"Certificate validity period is out of checking date\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check certificate name chain\r\n\t\t\t\r\n\t\t\t// We should have at least two certificates: end entity and trusted root\r\n\t\t\tif(path.length < 2)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tresult: false,\r\n\t\t\t\t\tresultCode: 9,\r\n\t\t\t\t\tresultMessage: \"Too short certificate path\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(let i = (path.length - 2); i >= 0; i--)\r\n\t\t\t{\r\n\t\t\t\t//region Check that we do not have a \"self-signed\" certificate\r\n\t\t\t\tif(path[i].issuer.isEqual(path[i].subject) === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(path[i].issuer.isEqual(path[i + 1].subject) === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\tresultCode: 10,\r\n\t\t\t\t\t\t\tresultMessage: \"Incorrect name chaining\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check each certificate (except \"trusted root\") to be non-revoked\r\n\t\t\tif((_this.crls.length !== 0) || (_this.ocsps.length !== 0)) // If CRLs and OCSPs are empty then we consider all certificates to be valid\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < (path.length - 2); i++)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tlet ocspResult;\r\n\t\t\t\t\tlet crlResult;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check OCSPs first\r\n\t\t\t\t\tif(_this.ocsps.length !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tocspResult = await findOCSP(path[i], path[i + 1]);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tswitch(ocspResult)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 12,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"One of certificates was revoked via OCSP response\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tcase 2: // continue to check the certificate with CRL\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check CRLs\r\n\t\t\t\t\tif(_this.crls.length !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcrlResult = await findCRL(path[i]);\r\n\t\t\t\t\t\tif(crlResult.status)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrow {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\tresultMessage: `No revocation values found for one of certificates: ${crlResult.statusMessage}`\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(let j = 0; j < crlResult.result.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Check that the CRL issuer certificate have not been revoked\r\n\t\t\t\t\t\t\tconst isCertificateRevoked = crlResult.result[j].crl.isCertificateRevoked(path[i]);\r\n\t\t\t\t\t\t\tif(isCertificateRevoked)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 12,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"One of certificates had been revoked\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region Check that the CRL issuer certificate is a CA certificate\r\n\t\t\t\t\t\t\tconst isCertificateCA = await checkForCA(crlResult.result[j].certificate, true);\r\n\t\t\t\t\t\t\tif(isCertificateCA.result === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 13,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"CRL issuer certificate is not a CA certificate or does not have crlSign flag\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(ocspResult === 2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\tresultMessage: \"No revocation values found for one of certificates\"\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check each certificate (except \"end entity\") in the path to be a CA certificate\r\n\t\t\tfor(let i = 1; i < path.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst result = await checkForCA(path[i]);\r\n\t\t\t\tif(result.result === false)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 14,\r\n\t\t\t\t\t\tresultMessage: \"One of intermediate certificates is not a CA certificate\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: true\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Do main work\r\n\t\t//region Initialize \"localCerts\" by value of \"_this.certs\" + \"_this.trustedCerts\" arrays\r\n\t\tlocalCerts.push(..._this.trustedCerts);\r\n\t\tlocalCerts.push(..._this.certs);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check all certificates for been unique\r\n\t\tfor(let i = 0; i < localCerts.length; i++)\r\n\t\t{\r\n\t\t\tfor(let j = 0; j < localCerts.length; j++)\r\n\t\t\t{\r\n\t\t\t\tif(i === j)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\t\t\t\tif(isEqualBuffer(localCerts[i].tbs, localCerts[j].tbs))\r\n\t\t\t\t{\r\n\t\t\t\t\tlocalCerts.splice(j, 1);\r\n\t\t\t\t\ti = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet result;\r\n\t\tconst certificatePath = [localCerts[localCerts.length - 1]]; // The \"end entity\" certificate must be the least in \"certs\" array\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Build path for \"end entity\" certificate\r\n\t\tresult = await buildPath(localCerts[localCerts.length - 1]);\r\n\t\tif(result.length === 0)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: 60,\r\n\t\t\t\tresultMessage: \"Unable to find certificate path\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Exclude certificate paths not ended with \"trusted roots\"\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\tlet found = false;\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < (result[i]).length; j++)\r\n\t\t\t{\r\n\t\t\t\tconst certificate = (result[i])[j];\r\n\t\t\t\t\r\n\t\t\t\tfor(let k = 0; k < _this.trustedCerts.length; k++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isEqualBuffer(certificate.tbs, _this.trustedCerts[k].tbs))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(found)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!found)\r\n\t\t\t{\r\n\t\t\t\tresult.splice(i, 1);\r\n\t\t\t\ti = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(result.length === 0)\r\n\t\t{\r\n\t\t\tthrow {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: 97,\r\n\t\t\t\tresultMessage: \"No valid certificate paths found\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find shortest certificate path (for the moment it is the only criteria)\r\n\t\tlet shortestLength = result[0].length;\r\n\t\tlet shortestIndex = 0;\r\n\t\t\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\tif(result[i].length < shortestLength)\r\n\t\t\t{\r\n\t\t\t\tshortestLength = result[i].length;\r\n\t\t\t\tshortestIndex = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create certificate path for basic check\r\n\t\tfor(let i = 0; i < result[shortestIndex].length; i++)\r\n\t\t\tcertificatePath.push((result[shortestIndex])[i]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Perform basic checking for all certificates in the path\r\n\t\tresult = await basicCheck(certificatePath, _this.checkDate);\r\n\t\tif(result.result === false)\r\n\t\t\tthrow result;\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn certificatePath;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Major verification function for certificate chain.\r\n\t * @param {{initialPolicySet, initialExplicitPolicy, initialPolicyMappingInhibit, initialInhibitPolicy, initialPermittedSubtreesSet, initialExcludedSubtreesSet, initialRequiredNameForms}} [parameters]\r\n\t * @returns {Promise}\r\n\t */\r\n\tasync verify(parameters = {})\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\t//region Initial checks\r\n\t\t\tif(this.certs.length === 0)\r\n\t\t\t\tthrow \"Empty certificate array\";\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get input variables\r\n\t\t\tlet initialPolicySet = [];\r\n\t\t\tinitialPolicySet.push(\"2.5.29.32.0\"); // \"anyPolicy\"\r\n\t\t\t\r\n\t\t\tlet initialExplicitPolicy = false;\r\n\t\t\tlet initialPolicyMappingInhibit = false;\r\n\t\t\tlet initialInhibitPolicy = false;\r\n\t\t\t\r\n\t\t\tlet initialPermittedSubtreesSet = []; // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\tlet initialExcludedSubtreesSet = [];  // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\tlet initialRequiredNameForms = [];    // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\t\r\n\t\t\tif(\"initialPolicySet\" in parameters)\r\n\t\t\t\tinitialPolicySet = parameters.initialPolicySet;\r\n\t\t\t\r\n\t\t\tif(\"initialExplicitPolicy\" in parameters)\r\n\t\t\t\tinitialExplicitPolicy = parameters.initialExplicitPolicy;\r\n\t\t\t\r\n\t\t\tif(\"initialPolicyMappingInhibit\" in parameters)\r\n\t\t\t\tinitialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit;\r\n\t\t\t\r\n\t\t\tif(\"initialInhibitPolicy\" in parameters)\r\n\t\t\t\tinitialInhibitPolicy = parameters.initialInhibitPolicy;\r\n\t\t\t\r\n\t\t\tif(\"initialPermittedSubtreesSet\" in parameters)\r\n\t\t\t\tinitialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet;\r\n\t\t\t\r\n\t\t\tif(\"initialExcludedSubtreesSet\" in parameters)\r\n\t\t\t\tinitialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet;\r\n\t\t\t\r\n\t\t\tif(\"initialRequiredNameForms\" in parameters)\r\n\t\t\t\tinitialRequiredNameForms = parameters.initialRequiredNameForms;\r\n\t\t\t\r\n\t\t\tlet explicitPolicyIndicator = initialExplicitPolicy;\r\n\t\t\tlet policyMappingInhibitIndicator = initialPolicyMappingInhibit;\r\n\t\t\tlet inhibitAnyPolicyIndicator = initialInhibitPolicy;\r\n\t\t\t\r\n\t\t\tconst pendingConstraints = new Array(3);\r\n\t\t\tpendingConstraints[0] = false; // For \"explicitPolicyPending\"\r\n\t\t\tpendingConstraints[1] = false; // For \"policyMappingInhibitPending\"\r\n\t\t\tpendingConstraints[2] = false; // For \"inhibitAnyPolicyPending\"\r\n\t\t\t\r\n\t\t\tlet explicitPolicyPending = 0;\r\n\t\t\tlet policyMappingInhibitPending = 0;\r\n\t\t\tlet inhibitAnyPolicyPending = 0;\r\n\t\t\t\r\n\t\t\tlet permittedSubtrees = initialPermittedSubtreesSet;\r\n\t\t\tlet excludedSubtrees = initialExcludedSubtreesSet;\r\n\t\t\tconst requiredNameForms = initialRequiredNameForms;\r\n\t\t\t\r\n\t\t\tlet pathDepth = 1;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Sorting certificates in the chain array\r\n\t\t\tthis.certs = await this.sort();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with policies\r\n\t\t\t//region Support variables\r\n\t\t\tconst allPolicies = []; // Array of all policies (string values)\r\n\t\t\tallPolicies.push(\"2.5.29.32.0\"); // Put \"anyPolicy\" at first place\r\n\t\t\t\r\n\t\t\tconst policiesAndCerts = []; // In fact \"array of array\" where rows are for each specific policy, column for each certificate and value is \"true/false\"\r\n\t\t\t\r\n\t\t\tconst anyPolicyArray = new Array(this.certs.length - 1); // Minus \"trusted anchor\"\r\n\t\t\tfor(let ii = 0; ii < (this.certs.length - 1); ii++)\r\n\t\t\t\tanyPolicyArray[ii] = true;\r\n\t\t\t\r\n\t\t\tpoliciesAndCerts.push(anyPolicyArray);\r\n\t\t\t\r\n\t\t\tconst policyMappings = new Array(this.certs.length - 1); // Array of \"PolicyMappings\" for each certificate\r\n\t\t\tconst certPolicies = new Array(this.certs.length - 1); // Array of \"CertificatePolicies\" for each certificate\r\n\t\t\t\r\n\t\t\tlet explicitPolicyStart = (explicitPolicyIndicator) ? (this.certs.length - 1) : (-1);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Gather all neccessary information from certificate chain\r\n\t\t\tfor(let i = (this.certs.length - 2); i >= 0; i--, pathDepth++)\r\n\t\t\t{\r\n\t\t\t\tif(\"extensions\" in this.certs[i])\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get information about certificate extensions\r\n\t\t\t\t\tfor(let j = 0; j < this.certs[i].extensions.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region CertificatePolicies\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.32\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertPolicies[i] = this.certs[i].extensions[j].parsedValue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region Remove entry from \"anyPolicies\" for the certificate\r\n\t\t\t\t\t\t\tfor(let s = 0; s < allPolicies.length; s++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(allPolicies[s] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tdelete (policiesAndCerts[s])[i];\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].extensions[j].parsedValue.certificatePolicies.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet policyIndex = (-1);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Try to find extension in \"allPolicies\" array\r\n\t\t\t\t\t\t\t\tfor(let s = 0; s < allPolicies.length; s++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier === allPolicies[s])\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpolicyIndex = s;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(policyIndex === (-1))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tallPolicies.push(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tconst certArray = new Array(this.certs.length - 1);\r\n\t\t\t\t\t\t\t\t\tcertArray[i] = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tpoliciesAndCerts.push(certArray);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t(policiesAndCerts[policyIndex])[i] = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region PolicyMappings\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.33\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(policyMappingInhibitIndicator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 98,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"Policy mapping prohibited\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tpolicyMappings[i] = this.certs[i].extensions[j].parsedValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region PolicyConstraints\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.36\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(explicitPolicyIndicator === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region requireExplicitPolicy\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.requireExplicitPolicy === 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\texplicitPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\t\texplicitPolicyStart = i;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[0] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[0] = true;\r\n\t\t\t\t\t\t\t\t\t\texplicitPolicyPending = this.certs[i].extensions[j].parsedValue.requireExplicitPolicy;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\texplicitPolicyPending = (explicitPolicyPending > this.certs[i].extensions[j].parsedValue.requireExplicitPolicy) ? this.certs[i].extensions[j].parsedValue.requireExplicitPolicy : explicitPolicyPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region inhibitPolicyMapping\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping === 0)\r\n\t\t\t\t\t\t\t\t\tpolicyMappingInhibitIndicator = true;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[1] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[1] = true;\r\n\t\t\t\t\t\t\t\t\t\tpolicyMappingInhibitPending = this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tpolicyMappingInhibitPending = (policyMappingInhibitPending > (this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1)) ? (this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1) : policyMappingInhibitPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region InhibitAnyPolicy\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.54\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(inhibitAnyPolicyIndicator === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.valueBlock.valueDec === 0)\r\n\t\t\t\t\t\t\t\t\tinhibitAnyPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[2] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[2] = true;\r\n\t\t\t\t\t\t\t\t\t\tinhibitAnyPolicyPending = this.certs[i].extensions[j].parsedValue.valueBlock.valueDec;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tinhibitAnyPolicyPending = (inhibitAnyPolicyPending > this.certs[i].extensions[j].parsedValue.valueBlock.valueDec) ? this.certs[i].extensions[j].parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check \"inhibitAnyPolicyIndicator\"\r\n\t\t\t\t\tif(inhibitAnyPolicyIndicator === true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet policyIndex = (-1);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Find \"anyPolicy\" index\r\n\t\t\t\t\t\tfor(let searchAnyPolicy = 0; searchAnyPolicy < allPolicies.length; searchAnyPolicy++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(allPolicies[searchAnyPolicy] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpolicyIndex = searchAnyPolicy;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(policyIndex !== (-1))\r\n\t\t\t\t\t\t\tdelete (policiesAndCerts[0])[i]; // Unset value to \"undefined\" for \"anyPolicies\" value for current certificate\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Process with \"pending constraints\"\r\n\t\t\t\t\tif(explicitPolicyIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[0] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\texplicitPolicyPending--;\r\n\t\t\t\t\t\t\tif(explicitPolicyPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\texplicitPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\texplicitPolicyStart = i;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tpendingConstraints[0] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(policyMappingInhibitIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[1] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpolicyMappingInhibitPending--;\r\n\t\t\t\t\t\t\tif(policyMappingInhibitPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpolicyMappingInhibitIndicator = true;\r\n\t\t\t\t\t\t\t\tpendingConstraints[1] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(inhibitAnyPolicyIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[2] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tinhibitAnyPolicyPending--;\r\n\t\t\t\t\t\t\tif(inhibitAnyPolicyPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinhibitAnyPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\tpendingConstraints[2] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Working with policy mappings\r\n\t\t\tfor(let i = 0; i < (this.certs.length - 1); i++)\r\n\t\t\t{\r\n\t\t\t\t//region Check that there is \"policy mapping\" for level \"i + 1\"\r\n\t\t\t\tif((i < (this.certs.length - 2)) && (typeof policyMappings[i + 1] !== \"undefined\"))\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let k = 0; k < policyMappings[i + 1].mappings.length; k++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that we do not have \"anyPolicy\" in current mapping\r\n\t\t\t\t\t\tif((policyMappings[i + 1].mappings[k].issuerDomainPolicy === \"2.5.29.32.0\") || (policyMappings[i + 1].mappings[k].subjectDomainPolicy === \"2.5.29.32.0\"))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 99,\r\n\t\t\t\t\t\t\t\tresultMessage: \"The \\\"anyPolicy\\\" should not be a part of policy mapping scheme\"\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tlet issuerDomainPolicyIndex = (-1);\r\n\t\t\t\t\t\tlet subjectDomainPolicyIndex = (-1);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Search for index of policies indedes\r\n\t\t\t\t\t\tfor(let n = 0; n < allPolicies.length; n++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(allPolicies[n] === policyMappings[i + 1].mappings[k].issuerDomainPolicy)\r\n\t\t\t\t\t\t\t\tissuerDomainPolicyIndex = n;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(allPolicies[n] === policyMappings[i + 1].mappings[k].subjectDomainPolicy)\r\n\t\t\t\t\t\t\t\tsubjectDomainPolicyIndex = n;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Delete existing \"issuerDomainPolicy\" because on the level we mapped the policy to another one\r\n\t\t\t\t\t\tif(typeof (policiesAndCerts[issuerDomainPolicyIndex])[i] !== \"undefined\")\r\n\t\t\t\t\t\t\tdelete (policiesAndCerts[issuerDomainPolicyIndex])[i];\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check all policies for the certificate\r\n\t\t\t\t\t\tfor(let j = 0; j < certPolicies[i].certificatePolicies.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(policyMappings[i + 1].mappings[k].subjectDomainPolicy === certPolicies[i].certificatePolicies[j].policyIdentifier)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Set mapped policy for current certificate\r\n\t\t\t\t\t\t\t\tif((issuerDomainPolicyIndex !== (-1)) && (subjectDomainPolicyIndex !== (-1)))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let m = 0; m <= i; m++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(typeof (policiesAndCerts[subjectDomainPolicyIndex])[m] !== \"undefined\")\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t(policiesAndCerts[issuerDomainPolicyIndex])[m] = true;\r\n\t\t\t\t\t\t\t\t\t\t\tdelete (policiesAndCerts[subjectDomainPolicyIndex])[m];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Working with \"explicitPolicyIndicator\" and \"anyPolicy\"\r\n\t\t\tfor(let i = 0; i < allPolicies.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(allPolicies[i] === \"2.5.29.32.0\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < explicitPolicyStart; j++)\r\n\t\t\t\t\t\tdelete (policiesAndCerts[i])[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create \"set of authorities-constrained policies\"\r\n\t\t\tconst authConstrPolicies = [];\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < policiesAndCerts.length; i++)\r\n\t\t\t{\r\n\t\t\t\tlet found = true;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < (this.certs.length - 1); j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet anyPolicyFound = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((j < explicitPolicyStart) && (allPolicies[i] === \"2.5.29.32.0\") && (allPolicies.length > 1))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(typeof (policiesAndCerts[i])[j] === \"undefined\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(j >= explicitPolicyStart)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Search for \"anyPolicy\" in the policy set\r\n\t\t\t\t\t\t\tfor(let k = 0; k < allPolicies.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(allPolicies[k] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif((policiesAndCerts[k])[j] === true)\r\n\t\t\t\t\t\t\t\t\t\tanyPolicyFound = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(!anyPolicyFound)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfound = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(found === true)\r\n\t\t\t\t\tauthConstrPolicies.push(allPolicies[i]);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create \"set of user-constrained policies\"\r\n\t\t\tlet userConstrPolicies = [];\r\n\t\t\t\r\n\t\t\tif((initialPolicySet.length === 1) && (initialPolicySet[0] === \"2.5.29.32.0\") && (explicitPolicyIndicator === false))\r\n\t\t\t\tuserConstrPolicies = initialPolicySet;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif((authConstrPolicies.length === 1) && (authConstrPolicies[0] === \"2.5.29.32.0\"))\r\n\t\t\t\t\tuserConstrPolicies = initialPolicySet;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let i = 0; i < authConstrPolicies.length; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(let j = 0; j < initialPolicySet.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif((initialPolicySet[j] === authConstrPolicies[i]) || (initialPolicySet[j] === \"2.5.29.32.0\"))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tuserConstrPolicies.push(authConstrPolicies[i]);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Combine output object\r\n\t\t\tconst policyResult = {\r\n\t\t\t\tresult: (userConstrPolicies.length > 0),\r\n\t\t\t\tresultCode: 0,\r\n\t\t\t\tresultMessage: (userConstrPolicies.length > 0) ? \"\" : \"Zero \\\"userConstrPolicies\\\" array, no intersections with \\\"authConstrPolicies\\\"\",\r\n\t\t\t\tauthConstrPolicies,\r\n\t\t\t\tuserConstrPolicies,\r\n\t\t\t\texplicitPolicyIndicator,\r\n\t\t\t\tpolicyMappings,\r\n\t\t\t\tcertificatePath: this.certs\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif(userConstrPolicies.length === 0)\r\n\t\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with name constraints\r\n\t\t\t//region Auxiliary functions for name constraints checking\r\n\t\t\tfunction compareDNSName(name, constraint)\r\n\t\t\t{\r\n\t\t\t\t/// <summary>Compare two dNSName values</summary>\r\n\t\t\t\t/// <param name=\"name\" type=\"String\">DNS from name</param>\r\n\t\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for DNS from name</param>\r\n\t\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\t\r\n\t\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\t\tconst namePrepared = stringPrep(name);\r\n\t\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\t\tconst nameSplitted = namePrepared.split(\".\");\r\n\t\t\t\tconst constraintSplitted = constraintPrepared.split(\".\");\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Length calculation and additional check\r\n\t\t\t\tconst nameLen = nameSplitted.length;\r\n\t\t\t\tconst constrLen = constraintSplitted.length;\r\n\t\t\t\t\r\n\t\t\t\tif((nameLen === 0) || (constrLen === 0) || (nameLen < constrLen))\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Check that no part of \"name\" has zero length\r\n\t\t\t\tfor(let i = 0; i < nameLen; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(nameSplitted[i].length === 0)\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Check that no part of \"constraint\" has zero length\r\n\t\t\t\tfor(let i = 0; i < constrLen; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(constraintSplitted[i].length === 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(i === 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(constrLen === 1)\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Check that \"name\" has a tail as \"constraint\"\r\n\t\t\t\t\r\n\t\t\t\tfor(let i = 0; i < constrLen; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(constraintSplitted[constrLen - 1 - i].length === 0)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(nameSplitted[nameLen - 1 - i].localeCompare(constraintSplitted[constrLen - 1 - i]) !== 0)\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction compareRFC822Name(name, constraint)\r\n\t\t\t{\r\n\t\t\t\t/// <summary>Compare two rfc822Name values</summary>\r\n\t\t\t\t/// <param name=\"name\" type=\"String\">E-mail address from name</param>\r\n\t\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for e-mail address from name</param>\r\n\t\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\t\r\n\t\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\t\tconst namePrepared = stringPrep(name);\r\n\t\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\t\tconst nameSplitted = namePrepared.split(\"@\");\r\n\t\t\t\tconst constraintSplitted = constraintPrepared.split(\"@\");\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Splitted array length checking\r\n\t\t\t\tif((nameSplitted.length === 0) || (constraintSplitted.length === 0) || (nameSplitted.length < constraintSplitted.length))\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(constraintSplitted.length === 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst result = compareDNSName(nameSplitted[1], constraintSplitted[0]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(result)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Make a \"splitted\" versions of domain name from \"constraint\" and \"name\"\r\n\t\t\t\t\t\tconst ns = nameSplitted[1].split(\".\");\r\n\t\t\t\t\t\tconst cs = constraintSplitted[0].split(\".\");\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(cs[0].length === 0)\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn ns.length === cs.length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn (namePrepared.localeCompare(constraintPrepared) === 0);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction compareUniformResourceIdentifier(name, constraint)\r\n\t\t\t{\r\n\t\t\t\t/// <summary>Compare two uniformResourceIdentifier values</summary>\r\n\t\t\t\t/// <param name=\"name\" type=\"String\">uniformResourceIdentifier from name</param>\r\n\t\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for uniformResourceIdentifier from name</param>\r\n\t\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\t\r\n\t\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\t\tlet namePrepared = stringPrep(name);\r\n\t\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Find out a major URI part to compare with\r\n\t\t\t\tconst ns = namePrepared.split(\"/\");\r\n\t\t\t\tconst cs = constraintPrepared.split(\"/\");\r\n\t\t\t\t\r\n\t\t\t\tif(cs.length > 1) // Malformed constraint\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t\r\n\t\t\t\tif(ns.length > 1) // Full URI string\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let i = 0; i < ns.length; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((ns[i].length > 0) && (ns[i].charAt(ns[i].length - 1) !== \":\"))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst nsPort = ns[i].split(\":\");\r\n\t\t\t\t\t\t\tnamePrepared = nsPort[0];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tconst result = compareDNSName(namePrepared, constraintPrepared);\r\n\t\t\t\t\r\n\t\t\t\tif(result)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\t\t\tconst nameSplitted = namePrepared.split(\".\");\r\n\t\t\t\t\tconst constraintSplitted = constraintPrepared.split(\".\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(constraintSplitted[0].length === 0)\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn nameSplitted.length === constraintSplitted.length;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction compareIPAddress(name, constraint)\r\n\t\t\t{\r\n\t\t\t\t/// <summary>Compare two iPAddress values</summary>\r\n\t\t\t\t/// <param name=\"name\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">iPAddress from name</param>\r\n\t\t\t\t/// <param name=\"constraint\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">Constraint for iPAddress from name</param>\r\n\t\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\t\r\n\t\t\t\t//region Common variables\r\n\t\t\t\tconst nameView = new Uint8Array(name.valueBlock.valueHex);\r\n\t\t\t\tconst constraintView = new Uint8Array(constraint.valueBlock.valueHex);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Work with IPv4 addresses\r\n\t\t\t\tif((nameView.length === 4) && (constraintView.length === 8))\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let i = 0; i < 4; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((nameView[i] ^ constraintView[i]) & constraintView[i + 4])\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Work with IPv6 addresses\r\n\t\t\t\tif((nameView.length === 16) && (constraintView.length === 32))\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let i = 0; i < 16; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((nameView[i] ^ constraintView[i]) & constraintView[i + 16])\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction compareDirectoryName(name, constraint)\r\n\t\t\t{\r\n\t\t\t\t/// <summary>Compare two directoryName values</summary>\r\n\t\t\t\t/// <param name=\"name\" type=\"in_window.org.pkijs.simpl.RDN\">directoryName from name</param>\r\n\t\t\t\t/// <param name=\"constraint\" type=\"in_window.org.pkijs.simpl.RDN\">Constraint for directoryName from name</param>\r\n\t\t\t\t/// <param name=\"any\" type=\"Boolean\">Boolean flag - should be comparision interrupted after first match or we need to match all \"constraints\" parts</param>\r\n\t\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\t\r\n\t\t\t\t//region Initial check\r\n\t\t\t\tif((name.typesAndValues.length === 0) || (constraint.typesAndValues.length === 0))\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t\r\n\t\t\t\tif(name.typesAndValues.length < constraint.typesAndValues.length)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Initial variables\r\n\t\t\t\tlet result = true;\r\n\t\t\t\tlet nameStart = 0;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tfor(let i = 0; i < constraint.typesAndValues.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet localResult = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let j = nameStart; j < name.typesAndValues.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlocalResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i]);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(name.typesAndValues[j].type === constraint.typesAndValues[i].type)\r\n\t\t\t\t\t\t\tresult = result && localResult;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(localResult === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif((nameStart === 0) || (nameStart === j))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tnameStart = j + 1;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse // Structure of \"name\" must be the same with \"constraint\"\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(localResult === false)\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn (nameStart === 0) ? false : result;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check a result from \"policy checking\" part\r\n\t\t\tif(policyResult.result === false)\r\n\t\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check all certificates, excluding \"trust anchor\"\r\n\t\t\tpathDepth = 1;\r\n\t\t\t\r\n\t\t\tfor(let i = (this.certs.length - 2); i >= 0; i--, pathDepth++)\r\n\t\t\t{\r\n\t\t\t\t//region Support variables\r\n\t\t\t\tlet subjectAltNames = [];\r\n\t\t\t\t\r\n\t\t\t\tlet certPermittedSubtrees = [];\r\n\t\t\t\tlet certExcludedSubtrees = [];\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(\"extensions\" in this.certs[i])\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < this.certs[i].extensions.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region NameConstraints\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.30\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(\"permittedSubtrees\" in this.certs[i].extensions[j].parsedValue)\r\n\t\t\t\t\t\t\t\tcertPermittedSubtrees = certPermittedSubtrees.concat(this.certs[i].extensions[j].parsedValue.permittedSubtrees);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(\"excludedSubtrees\" in this.certs[i].extensions[j].parsedValue)\r\n\t\t\t\t\t\t\t\tcertExcludedSubtrees = certExcludedSubtrees.concat(this.certs[i].extensions[j].parsedValue.excludedSubtrees);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region SubjectAltName\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.17\")\r\n\t\t\t\t\t\t\tsubjectAltNames = subjectAltNames.concat(this.certs[i].extensions[j].parsedValue.altNames);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"required name forms\"\r\n\t\t\t\tlet formFound = (requiredNameForms.length <= 0);\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < requiredNameForms.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(requiredNameForms[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase 4: // directoryName\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(requiredNameForms[j].base.value.typesAndValues.length !== this.certs[i].subject.typesAndValues.length)\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tformFound = true;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(this.certs[i].subject.typesAndValues[k].type !== requiredNameForms[j].base.value.typesAndValues[k].type)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tformFound = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(formFound === true)\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault: // ??? Probably here we should reject the certificate ???\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(formFound === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\tpolicyResult.resultCode = 21;\r\n\t\t\t\t\tpolicyResult.resultMessage = \"No neccessary name form found\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"permited sub-trees\"\r\n\t\t\t\t//region Make groups for all types of constraints\r\n\t\t\t\tconst constrGroups = []; // Array of array for groupped constraints\r\n\t\t\t\tconstrGroups[0] = []; // rfc822Name\r\n\t\t\t\tconstrGroups[1] = []; // dNSName\r\n\t\t\t\tconstrGroups[2] = []; // directoryName\r\n\t\t\t\tconstrGroups[3] = []; // uniformResourceIdentifier\r\n\t\t\t\tconstrGroups[4] = []; // iPAddress\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < permittedSubtrees.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(permittedSubtrees[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tconstrGroups[0].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tconstrGroups[1].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\tconstrGroups[2].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\t\tconstrGroups[3].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\t\tconstrGroups[4].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Check name constraints groupped by type, one-by-one\r\n\t\t\t\tfor(let p = 0; p < 5; p++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet groupPermitted = false;\r\n\t\t\t\t\tlet valueExists = false;\r\n\t\t\t\t\tconst group = constrGroups[p];\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let j = 0; j < group.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(p)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 1) // rfc822Name\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse // Try to find out \"emailAddress\" inside \"subject\"\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif((this.certs[i].subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||    // PKCS#9 e-mail address\r\n\t\t\t\t\t\t\t\t\t\t\t(this.certs[i].subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) // RFC1274 \"rfc822Mailbox\" e-mail address\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareRFC822Name(this.certs[i].subject.typesAndValues[k].value.valueBlock.value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 2) // dNSName\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareDNSName(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\tgroupPermitted = compareDirectoryName(this.certs[i].subject, group[j].base.value);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 6) // uniformResourceIdentifier\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 7) // iPAddress\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareIPAddress(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(groupPermitted)\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((groupPermitted === false) && (group.length > 0) && valueExists)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\t\tpolicyResult.resultCode = 41;\r\n\t\t\t\t\t\tpolicyResult.resultMessage = \"Failed to meet \\\"permitted sub-trees\\\" name constraint\";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"excluded sub-trees\"\r\n\t\t\t\tlet excluded = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < excludedSubtrees.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(excludedSubtrees[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length >= 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 1) // rfc822Name\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareRFC822Name(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse // Try to find out \"emailAddress\" inside \"subject\"\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < this.subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif((this.subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||    // PKCS#9 e-mail address\r\n\t\t\t\t\t\t\t\t\t\t(this.subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) // RFC1274 \"rfc822Mailbox\" e-mail address\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareRFC822Name(this.subject.typesAndValues[k].value.valueBlock.value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 2) // dNSName\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareDNSName(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\texcluded = excluded || compareDirectoryName(this.certs[i].subject, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 6) // uniformResourceIdentifier\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareUniformResourceIdentifier(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 7) // iPAddress\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareIPAddress(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\tdefault: // No action, but probably here we need to create a warning for \"malformed constraint\"\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(excluded)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(excluded === true)\r\n\t\t\t\t{\r\n\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\tpolicyResult.resultCode = 42;\r\n\t\t\t\t\tpolicyResult.resultMessage = \"Failed to meet \\\"excluded sub-trees\\\" name constraint\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Append \"cert_..._subtrees\" to \"..._subtrees\"\r\n\t\t\t\tpermittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);\r\n\t\t\t\texcludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees);\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\tcatch(error)\r\n\t\t{\r\n\t\t\tif(error instanceof Object)\r\n\t\t\t{\r\n\t\t\t\tif(\"resultMessage\" in error)\r\n\t\t\t\t\treturn error;\r\n\t\t\t\t\r\n\t\t\t\tif(\"message\" in error)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: -1,\r\n\t\t\t\t\t\tresultMessage: error.message\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: -1,\r\n\t\t\t\tresultMessage: error\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}