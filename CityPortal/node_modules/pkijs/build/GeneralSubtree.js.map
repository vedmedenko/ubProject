{"version":3,"sources":["../src/GeneralSubtree.js"],"names":["asn1js","GeneralSubtree","parameters","base","defaultValues","minimum","maximum","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","valueBlock","isHexOnly","valueDec","outputArray","push","toSchema","valueMinimum","Integer","value","Constructed","optional","idBlock","tagClass","tagNumber","valueMaximum","Sequence","object","toJSON","memberName","name"],"mappings":"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","file":"GeneralSubtree.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class GeneralSubtree\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for GeneralSubtree class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {GeneralName}\r\n\t\t * @description base\r\n\t\t */\r\n\t\tthis.base = getParametersValue(parameters, \"base\", GeneralSubtree.defaultValues(\"base\"));\r\n\r\n\t\t/**\r\n\t\t * @type {number|Integer}\r\n\t\t * @description base\r\n\t\t */\r\n\t\tthis.minimum = getParametersValue(parameters, \"minimum\", GeneralSubtree.defaultValues(\"minimum\"));\r\n\r\n\t\tif(\"maximum\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number|Integer}\r\n\t\t\t * @description minimum\r\n\t\t\t */\r\n\t\t\tthis.maximum = getParametersValue(parameters, \"maximum\", GeneralSubtree.defaultValues(\"maximum\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"base\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"minimum\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"maximum\":\r\n\t\t\t\treturn 0;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for GeneralSubtree class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//GeneralSubtree ::= SEQUENCE {\r\n\t\t//    base                    GeneralName,\r\n\t\t//    minimum         [0]     BaseDistance DEFAULT 0,\r\n\t\t//    maximum         [1]     BaseDistance OPTIONAL }\r\n\t\t//\r\n\t\t//BaseDistance ::= INTEGER (0..MAX)\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [base]\r\n\t\t * @property {string} [minimum]\r\n\t\t * @property {string} [maximum]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tGeneralName.schema(names.base || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.minimum || \"\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.maximum || \"\") })]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tGeneralSubtree.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tbase: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"base\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tminimum: \"minimum\",\r\n\t\t\t\t\tmaximum: \"maximum\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for \");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.base = new GeneralName({ schema: asn1.result.base });\r\n\r\n\t\tif(\"minimum\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.minimum.valueBlock.isHexOnly)\r\n\t\t\t\tthis.minimum = asn1.result.minimum;\r\n\t\t\telse\r\n\t\t\t\tthis.minimum = asn1.result.minimum.valueBlock.valueDec;\r\n\t\t}\r\n\r\n\t\tif(\"maximum\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.maximum.valueBlock.isHexOnly)\r\n\t\t\t\tthis.maximum = asn1.result.maximum;\r\n\t\t\telse\r\n\t\t\t\tthis.maximum = asn1.result.maximum.valueBlock.valueDec;\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.base.toSchema());\r\n\t\t\r\n\t\tif(this.minimum !== 0)\r\n\t\t{\r\n\t\t\tlet valueMinimum = 0;\r\n\t\t\t\r\n\t\t\tif(this.minimum instanceof asn1js.Integer)\r\n\t\t\t\tvalueMinimum = this.minimum;\r\n\t\t\telse\r\n\t\t\t\tvalueMinimum = new asn1js.Integer({ value: this.minimum });\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [valueMinimum]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"maximum\" in this)\r\n\t\t{\r\n\t\t\tlet valueMaximum = 0;\r\n\t\t\t\r\n\t\t\tif(this.maximum instanceof asn1js.Integer)\r\n\t\t\t\tvalueMaximum = this.maximum;\r\n\t\t\telse\r\n\t\t\t\tvalueMaximum = new asn1js.Integer({ value: this.maximum });\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [valueMaximum]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tbase: this.base.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(this.minimum !== 0)\r\n\t\t{\r\n\t\t\tif((typeof this.minimum) === \"number\")\r\n\t\t\t\tobject.minimum = this.minimum;\r\n\t\t\telse\r\n\t\t\t\tobject.minimum = this.minimum.toJSON();\r\n\t\t}\r\n\t\t\r\n\t\tif(\"maximum\" in this)\r\n\t\t{\r\n\t\t\tif((typeof this.maximum) === \"number\")\r\n\t\t\t\tobject.maximum = this.maximum;\r\n\t\t\telse\r\n\t\t\t\tobject.maximum = this.maximum.toJSON();\r\n\t\t}\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}