{"version":3,"sources":["../src/OtherRecipientInfo.js"],"names":["asn1js","OtherRecipientInfo","parameters","oriType","defaultValues","oriValue","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","valueBlock","toString","Sequence","value","ObjectIdentifier","_object","compareWithDefault","toJSON","memberName","memberValue","Object","keys","length","name","blockName","Any"],"mappings":";;;;;;;;AAAA;;IAAYA,M;;AACZ;;;;;;AACA;AACA;;;IAGqBC,kB;AAEpB;AACA;;;;;AAKA,+BACA;AAAA,MADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;AACA;;;;AAIA,OAAKC,OAAL,GAAe,iCAAmBD,UAAnB,EAA+B,SAA/B,EAA0CD,mBAAmBG,aAAnB,CAAiC,SAAjC,CAA1C,CAAf;AACA;;;;AAIA,OAAKC,QAAL,GAAgB,iCAAmBH,UAAnB,EAA+B,UAA/B,EAA2CD,mBAAmBG,aAAnB,CAAiC,UAAjC,CAA3C,CAAhB;AACA;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKI,UAAL,CAAgBJ,WAAWK,MAA3B;AACD;AACA;AACD;AACA;;;;;;;;;AA8DA;AACA;;;;6BAIWA,M,EACX;AACC;AACA,OAAMC,OAAOR,OAAOS,aAAP,CAAqBF,MAArB,EACZA,MADY,EAEZN,mBAAmBM,MAAnB,CAA0B;AACzBG,WAAO;AACNP,cAAS,SADH;AAENE,eAAU;AAFJ;AADkB,IAA1B,CAFY,CAAb;;AAUA,OAAGG,KAAKG,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,4EAAV,CAAN;AACD;;AAEA;AACA,QAAKT,OAAL,GAAeK,KAAKK,MAAL,CAAYV,OAAZ,CAAoBW,UAApB,CAA+BC,QAA/B,EAAf;AACA,QAAKV,QAAL,GAAgBG,KAAKK,MAAL,CAAYR,QAA5B;AACA;AACA;AACD;AACA;;;;;;;6BAKA;AACC;AACA,UAAQ,IAAIL,OAAOgB,QAAX,CAAoB;AAC3BC,WAAO,CACN,IAAIjB,OAAOkB,gBAAX,CAA4B,EAAED,OAAO,KAAKd,OAAd,EAA5B,CADM,EAEN,KAAKE,QAFC;AADoB,IAApB,CAAR;AAMA;AACA;AACD;AACA;;;;;;;2BAKA;AACC,OAAMc,UAAU;AACfhB,aAAS,KAAKA;AADC,IAAhB;;AAIA,OAAGF,mBAAmBmB,kBAAnB,CAAsC,UAAtC,EAAkD,KAAKf,QAAvD,MAAqE,KAAxE,EACCc,QAAQd,QAAR,GAAmB,KAAKA,QAAL,CAAcgB,MAAd,EAAnB;;AAED,UAAOF,OAAP;AACA;AACD;;;;gCArHqBG,U,EACrB;AACC,WAAOA,UAAP;AAEC,SAAK,SAAL;AACC,YAAO,EAAP;AACD,SAAK,UAAL;AACC,YAAO,EAAP;AACD;AACC,WAAM,IAAIV,KAAJ,wDAA+DU,UAA/D,CAAN;AAPF;AASA;AACD;AACA;;;;;;;;qCAK0BA,U,EAAYC,W,EACtC;AACC,WAAOD,UAAP;AAEC,SAAK,SAAL;AACC,YAAQC,gBAAgB,EAAxB;AACD,SAAK,UAAL;AACC,YAAQC,OAAOC,IAAP,CAAYF,WAAZ,EAAyBG,MAAzB,KAAoC,CAA5C;AACD;AACC,WAAM,IAAId,KAAJ,wDAA+DU,UAA/D,CAAN;AAPF;AASA;AACD;AACA;;;;;;;;2BAMA;AAAA,OADcpB,UACd,uEAD2B,EAC3B;;AACC;AACA;AACA;;AAEA;;;;;;AAMA,OAAMQ,QAAQ,iCAAmBR,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAIF,OAAOgB,QAAX,CAAoB;AAC3BW,UAAOjB,MAAMkB,SAAN,IAAmB,EADC;AAE3BX,WAAO,CACN,IAAIjB,OAAOkB,gBAAX,CAA4B,EAAES,MAAOjB,MAAMP,OAAN,IAAiB,EAA1B,EAA5B,CADM,EAEN,IAAIH,OAAO6B,GAAX,CAAe,EAAEF,MAAOjB,MAAML,QAAN,IAAkB,EAA3B,EAAf,CAFM;AAFoB,IAApB,CAAR;AAOA;;;;;AA8DF;;;kBAxJqBJ,kB","file":"OtherRecipientInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OtherRecipientInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherRecipientInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description oriType\r\n\t\t */\r\n\t\tthis.oriType = getParametersValue(parameters, \"oriType\", OtherRecipientInfo.defaultValues(\"oriType\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @description oriValue\r\n\t\t */\r\n\t\tthis.oriValue = getParametersValue(parameters, \"oriValue\", OtherRecipientInfo.defaultValues(\"oriValue\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"oriType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"oriValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"oriType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"oriValue\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//OtherRecipientInfo ::= SEQUENCE {\r\n\t\t//    oriType OBJECT IDENTIFIER,\r\n\t\t//    oriValue ANY DEFINED BY oriType }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [oriType]\r\n\t\t * @property {string} [oriValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.oriType || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.oriValue || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherRecipientInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\toriType: \"oriType\",\r\n\t\t\t\t\toriValue: \"oriValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherRecipientInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.oriType = asn1.result.oriType.valueBlock.toString();\r\n\t\tthis.oriValue = asn1.result.oriValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.oriType }),\r\n\t\t\t\tthis.oriValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\toriType: this.oriType\r\n\t\t};\r\n\r\n\t\tif(OtherRecipientInfo.compareWithDefault(\"oriValue\", this.oriValue) === false)\r\n\t\t\t_object.oriValue = this.oriValue.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}