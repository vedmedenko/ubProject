{"version":3,"sources":["../src/Time.js"],"names":["asn1js","Time","parameters","type","defaultValues","value","fromSchema","schema","asn1","compareSchema","names","utcTimeName","generalTimeName","verified","Error","result","toDate","UTCTime","valueDate","GeneralizedTime","memberName","Date","optional","Choice","name"],"mappings":";;;;;;;;AAAA;;IAAYA,M;;AACZ;;;;;;AACA;AACA;;;IAGqBC,I;AAEpB;AACA;;;;;;;AAOA,iBACA;AAAA,MADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;AACA;;;;AAIA,OAAKC,IAAL,GAAY,iCAAmBD,UAAnB,EAA+B,MAA/B,EAAuCD,KAAKG,aAAL,CAAmB,MAAnB,CAAvC,CAAZ;AACA;;;;AAIA,OAAKC,KAAL,GAAa,iCAAmBH,UAAnB,EAA+B,OAA/B,EAAwCD,KAAKG,aAAL,CAAmB,OAAnB,CAAxC,CAAb;AACA;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKI,UAAL,CAAgBJ,WAAWK,MAA3B;AACD;AACA;AACD;AACA;;;;;;;;;AAyCA;AACA;;;;6BAIWA,M,EACX;AACC;AACA,OAAMC,OAAOR,OAAOS,aAAP,CAAqBF,MAArB,EAA6BA,MAA7B,EAAqCN,KAAKM,MAAL,CAAY;AAC7DG,WAAO;AACNC,kBAAa,aADP;AAENC,sBAAiB;AAFX;AADsD,IAAZ,CAArC,CAAb;;AAOA,OAAGJ,KAAKK,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,8DAAV,CAAN;AACD;;AAEA;AACA,OAAG,iBAAiBN,KAAKO,MAAzB,EACA;AACC,SAAKZ,IAAL,GAAY,CAAZ;AACA,SAAKE,KAAL,GAAaG,KAAKO,MAAL,CAAYJ,WAAZ,CAAwBK,MAAxB,EAAb;AACA;AACD,OAAG,qBAAqBR,KAAKO,MAA7B,EACA;AACC,SAAKZ,IAAL,GAAY,CAAZ;AACA,SAAKE,KAAL,GAAaG,KAAKO,MAAL,CAAYH,eAAZ,CAA4BI,MAA5B,EAAb;AACA;AACD;AACA;AACD;AACA;;;;;;;6BAKA;AACC;AACA,OAAID,SAAS,EAAb;;AAEA,OAAG,KAAKZ,IAAL,KAAc,CAAjB,EACCY,SAAS,IAAIf,OAAOiB,OAAX,CAAmB,EAAEC,WAAW,KAAKb,KAAlB,EAAnB,CAAT;AACD,OAAG,KAAKF,IAAL,KAAc,CAAjB,EACCY,SAAS,IAAIf,OAAOmB,eAAX,CAA2B,EAAED,WAAW,KAAKb,KAAlB,EAA3B,CAAT;;AAED,UAAOU,MAAP;AACA;AACA;AACD;AACA;;;;;;;2BAKA;AACC,UAAO;AACNZ,UAAM,KAAKA,IADL;AAENE,WAAO,KAAKA;AAFN,IAAP;AAIA;AACD;;;;gCAnGqBe,U,EACrB;AACC,WAAOA,UAAP;AAEC,SAAK,MAAL;AACC,YAAO,CAAP;AACD,SAAK,OAAL;AACC,YAAO,IAAIC,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CAAP;AACD;AACC,WAAM,IAAIP,KAAJ,0CAAiDM,UAAjD,CAAN;AAPF;AASA;AACD;AACA;;;;;;;;;2BAOA;AAAA,OADclB,UACd,uEAD2B,EAC3B;AAAA,OAD+BoB,QAC/B,uEAD0C,KAC1C;;AACC;;;;;;AAMA,OAAMZ,QAAQ,iCAAmBR,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAIF,OAAOuB,MAAX,CAAkB;AACzBD,sBADyB;AAEzBjB,WAAO,CACN,IAAIL,OAAOiB,OAAX,CAAmB,EAAEO,MAAOd,MAAMC,WAAN,IAAqB,EAA9B,EAAnB,CADM,EAEN,IAAIX,OAAOmB,eAAX,CAA2B,EAAEK,MAAOd,MAAME,eAAN,IAAyB,EAAlC,EAA3B,CAFM;AAFkB,IAAlB,CAAR;AAOA;;;;;AAiEF;;;kBAxIqBX,I","file":"Time.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class Time\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Time class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t * @property {number} [type] 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value\r\n\t * @property {Date} [value] Value of the TIME class\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", Time.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @description Value of the TIME class\r\n\t\t */\r\n\t\tthis.value = getParametersValue(parameters, \"value\", Time.defaultValues(\"value\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Time class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @param {boolean} optional Flag that current schema should be optional\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {}, optional = false)\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [utcTimeName] Name for \"utcTimeName\" choice\r\n\t\t * @property {string} [generalTimeName] Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Choice({\r\n\t\t\toptional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.UTCTime({ name: (names.utcTimeName || \"\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.generalTimeName || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, Time.schema({\r\n\t\t\tnames: {\r\n\t\t\t\tutcTimeName: \"utcTimeName\",\r\n\t\t\t\tgeneralTimeName: \"generalTimeName\"\r\n\t\t\t}\r\n\t\t}));\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TIME\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"utcTimeName\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.type = 0;\r\n\t\t\tthis.value = asn1.result.utcTimeName.toDate();\r\n\t\t}\r\n\t\tif(\"generalTimeName\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.type = 1;\r\n\t\t\tthis.value = asn1.result.generalTimeName.toDate();\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tlet result = {};\r\n\r\n\t\tif(this.type === 0)\r\n\t\t\tresult = new asn1js.UTCTime({ valueDate: this.value });\r\n\t\tif(this.type === 1)\r\n\t\t\tresult = new asn1js.GeneralizedTime({ valueDate: this.value });\r\n\r\n\t\treturn result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttype: this.type,\r\n\t\t\tvalue: this.value\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}