{"version":3,"sources":["../src/OCSPRequest.js"],"names":["asn1js","OCSPRequest","parameters","tbsRequest","defaultValues","optionalSignature","fromSchema","schema","asn1","compareSchema","verified","Error","result","encodeFlag","outputArray","push","toSchema","Sequence","value","_object","toJSON","certificate","sequence","Promise","resolve","certID","then","createForCertificate","requestList","reqCert","reject","error","privateKey","hashAlgorithm","tbs","engine","subtle","getSignatureParameters","signatureAlgorithm","toBER","signWithPrivateKey","signature","BitString","valueHex","memberName","memberValue","compareWithDefault","version","requestorName","requestExtensions","certs","names","name","blockName","Constructed","optional","idBlock","tagClass","tagNumber"],"mappings":"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","file":"OCSPRequest.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport TBSRequest from \"./TBSRequest.js\";\r\nimport Signature from \"./Signature.js\";\r\nimport Request from \"./Request.js\";\r\nimport CertID from \"./CertID.js\";\r\nimport Certificate from \"./Certificate.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class OCSPRequest \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OCSPRequest class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {TBSRequest}\r\n\t\t * @description tbsRequest\r\n\t\t */\r\n\t\tthis.tbsRequest = getParametersValue(parameters, \"tbsRequest\", OCSPRequest.defaultValues(\"tbsRequest\"));\r\n\t\t\r\n\t\tif(\"optionalSignature\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Signature}\r\n\t\t\t * @description optionalSignature\r\n\t\t\t */\r\n\t\t\tthis.optionalSignature = getParametersValue(parameters, \"optionalSignature\", OCSPRequest.defaultValues(\"optionalSignature\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsRequest\":\r\n\t\t\t\treturn new TBSRequest();\r\n\t\t\tcase \"optionalSignature\":\r\n\t\t\t\treturn new Signature();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsRequest\":\r\n\t\t\t\treturn ((TBSRequest.compareWithDefault(\"tbs\", memberValue.tbs)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"version\", memberValue.version)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"requestorName\", memberValue.requestorName)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"requestList\", memberValue.requestList)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"requestExtensions\", memberValue.requestExtensions)));\r\n\t\t\tcase \"optionalSignature\":\r\n\t\t\t\treturn ((Signature.compareWithDefault(\"signatureAlgorithm\", memberValue.signatureAlgorithm)) &&\r\n\t\t\t\t(Signature.compareWithDefault(\"signature\", memberValue.signature)) &&\r\n\t\t\t\t(Signature.compareWithDefault(\"certs\", memberValue.certs)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//OCSPRequest     ::=     SEQUENCE {\r\n\t\t//    tbsRequest                  TBSRequest,\r\n\t\t//    optionalSignature   [0]     EXPLICIT Signature OPTIONAL }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsRequest]\r\n\t\t * @property {string} [optionalSignature]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: names.blockName || \"OCSPRequest\",\r\n\t\t\tvalue: [\r\n\t\t\t\tTBSRequest.schema(names.tbsRequest || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsRequest\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tSignature.schema(names.optionalSignature || {\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: \"optionalSignature\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOCSPRequest.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OCSP_REQUEST\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbsRequest = new TBSRequest({ schema: asn1.result.tbsRequest });\r\n\t\tif(\"optionalSignature\" in asn1.result)\r\n\t\t\tthis.optionalSignature = new Signature({ schema: asn1.result.optionalSignature });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.tbsRequest.toSchema(encodeFlag));\r\n\t\tif(\"optionalSignature\" in this)\r\n\t\t\toutputArray.push(this.optionalSignature.toSchema());\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttbsRequest: this.tbsRequest.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"optionalSignature\" in this)\r\n\t\t\t_object.optionalSignature = this.optionalSignature.toJSON();\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making OCSP Request for specific certificate\r\n\t * @param {Certificate} certificate Certificate making OCSP Request for\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tcreateForCertificate(certificate, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst certID = new CertID();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create OCSP certificate identifier for the certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcertID.createForCertificate(certificate, parameters)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make final request data\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\t{\r\n\t\t\tthis.tbsRequest = new TBSRequest({\r\n\t\t\t\trequestList: [\r\n\t\t\t\t\tnew Request({\r\n\t\t\t\t\t\treqCert: certID\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make signature for current OCSP Request\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Check private key\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check that \"optionalSignature\" exists in the current request\r\n\t\tif((\"optionalSignature\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Need to create \\\"optionalSignature\\\" field before signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tlet tbs;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.optionalSignature.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\ttbs = this.tbsRequest.toSchema(true).toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.optionalSignature.signature = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverify()\r\n\t{\r\n\t\t// TODO: Create the function\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}