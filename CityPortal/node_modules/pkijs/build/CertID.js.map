{"version":3,"sources":["../src/CertID.js"],"names":["asn1js","CertID","parameters","hashAlgorithm","defaultValues","issuerNameHash","issuerKeyHash","serialNumber","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","Sequence","value","toSchema","toJSON","certificateID","algorithmId","valueBlock","valueHex","isEqual","certificate","sequence","Promise","resolve","issuerCertificate","crypto","reject","hashOID","name","algorithmParams","Null","then","digest","subject","toBER","error","OctetString","issuerKeyBuffer","subjectPublicKeyInfo","subjectPublicKey","memberName","Integer","memberValue","blockName","hashAlgorithmObject"],"mappings":"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","file":"CertID.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer } from \"pvutils\";\r\nimport { getCrypto, getOIDByAlgorithm } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Certificate from \"./Certificate.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class CertID \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertID class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description hashAlgorithm\r\n\t\t */\r\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", CertID.defaultValues(\"hashAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description issuerNameHash\r\n\t\t */\r\n\t\tthis.issuerNameHash = getParametersValue(parameters, \"issuerNameHash\", CertID.defaultValues(\"issuerNameHash\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description issuerKeyHash\r\n\t\t */\r\n\t\tthis.issuerKeyHash = getParametersValue(parameters, \"issuerKeyHash\", CertID.defaultValues(\"issuerKeyHash\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", CertID.defaultValues(\"serialNumber\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuerNameHash\":\r\n\t\t\tcase \"issuerKeyHash\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"issuerNameHash\":\r\n\t\t\tcase \"issuerKeyHash\":\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn (memberValue.isEqual(CertID.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//CertID          ::=     SEQUENCE {\r\n\t\t//    hashAlgorithm       AlgorithmIdentifier,\r\n\t\t//    issuerNameHash      OCTET STRING, -- Hash of issuer's DN\r\n\t\t//    issuerKeyHash       OCTET STRING, -- Hash of issuer's public key\r\n\t\t//    serialNumber        CertificateSerialNumber }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [hashAlgorithm]\r\n\t\t * @property {string} [hashAlgorithmObject]\r\n\t\t * @property {string} [issuerNameHash]\r\n\t\t * @property {string} [issuerKeyHash]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.hashAlgorithmObject || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.hashAlgorithm || \"\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.issuerNameHash || \"\") }),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.issuerKeyHash || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertID.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\thashAlgorithm: \"hashAlgorithm\",\r\n\t\t\t\t\tissuerNameHash: \"issuerNameHash\",\r\n\t\t\t\t\tissuerKeyHash: \"issuerKeyHash\",\r\n\t\t\t\t\tserialNumber: \"serialNumber\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertID\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n\t\tthis.issuerNameHash = asn1.result.issuerNameHash;\r\n\t\tthis.issuerKeyHash = asn1.result.issuerKeyHash;\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.hashAlgorithm.toSchema(),\r\n\t\t\t\tthis.issuerNameHash,\r\n\t\t\t\tthis.issuerKeyHash,\r\n\t\t\t\tthis.serialNumber\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\thashAlgorithm: this.hashAlgorithm.toJSON(),\r\n\t\t\tissuerNameHash: this.issuerNameHash.toJSON(),\r\n\t\t\tissuerKeyHash: this.issuerKeyHash.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON()\r\n\t\t};\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Check that two \"CertIDs\" are equal\r\n\t * @param {CertID} certificateID Identifier of the certificate to be checked\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(certificateID)\r\n\t{\r\n\t\t//region Check \"hashAlgorithm\"\r\n\t\tif(!this.hashAlgorithm.algorithmId === certificateID.hashAlgorithm.algorithmId)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check \"issuerNameHash\"\r\n\t\tif(isEqualBuffer(this.issuerNameHash.valueBlock.valueHex, certificateID.issuerNameHash.valueBlock.valueHex) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check \"issuerKeyHash\"\r\n\t\tif(isEqualBuffer(this.issuerKeyHash.valueBlock.valueHex, certificateID.issuerKeyHash.valueBlock.valueHex) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check \"serialNumber\"\r\n\t\tif(!this.serialNumber.isEqual(certificateID.serialNumber))\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making OCSP certificate identifier for specific certificate\r\n\t * @param {Certificate} certificate Certificate making OCSP Request for\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tcreateForCertificate(certificate, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet issuerCertificate;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check input parameters\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Parameter \\\"hashAlgorithm\\\" is mandatory for \\\"OCSP_REQUEST.createForCertificate\\\"\");\r\n\t\t\r\n\t\tconst hashOID = getOIDByAlgorithm({ name: parameters.hashAlgorithm });\r\n\t\tif(hashOID === \"\")\r\n\t\t\treturn Promise.reject(`Incorrect \\\"hashAlgorithm\\\": ${this.hashAlgorithm}`);\r\n\t\t\r\n\t\tthis.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\talgorithmId: hashOID,\r\n\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t});\r\n\t\t\r\n\t\tif(\"issuerCertificate\" in parameters)\r\n\t\t\tissuerCertificate = parameters.issuerCertificate;\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"Parameter \\\"issuerCertificate\\\" is mandatory for \\\"OCSP_REQUEST.createForCertificate\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize \"serialNumber\" field\r\n\t\tthis.serialNumber = certificate.serialNumber;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create \"issuerNameHash\"\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\t\tcrypto.digest({ name: parameters.hashAlgorithm }, issuerCertificate.subject.toSchema().toBER(false)),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create \"issuerKeyHash\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.issuerNameHash = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\r\n\t\t\tconst issuerKeyBuffer = issuerCertificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex;\r\n\t\t\t\r\n\t\t\treturn crypto.digest({ name: parameters.hashAlgorithm }, issuerKeyBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t).then(result =>\r\n\t\t{\r\n\t\t\tthis.issuerKeyHash = new asn1js.OctetString({ valueHex: result });\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}