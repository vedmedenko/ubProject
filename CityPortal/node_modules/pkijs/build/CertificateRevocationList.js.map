{"version":3,"sources":["../src/CertificateRevocationList.js"],"names":["asn1js","tbsCertList","parameters","names","Sequence","name","blockName","value","Integer","optional","tbsCertListVersion","schema","signature","issuer","tbsCertListThisUpdate","utcTimeName","generalTimeName","tbsCertListNextUpdate","Repeated","tbsCertListRevokedCertificates","Constructed","idBlock","tagClass","tagNumber","crlExtensions","CertificateRevocationList","tbs","defaultValues","version","thisUpdate","nextUpdate","revokedCertificates","signatureAlgorithm","signatureValue","fromSchema","asn1","compareSchema","verified","Error","result","valueBeforeDecode","valueBlock","valueDec","Array","from","element","outputArray","push","toSchema","encodeFlag","tbsSchema","length","fromBER","encodeTBS","object","byteLength","toJSON","certificate","isEqual","revokedCertificate","userCertificate","serialNumber","privateKey","hashAlgorithm","Promise","reject","sequence","resolve","engine","then","subtle","getSignatureParameters","toBER","signWithPrivateKey","BitString","valueHex","subjectPublicKeyInfo","issuerCertificate","subject","publicKeyInfo","extensions","extension","critical","verifyWithPublicKey","memberName","ArrayBuffer"],"mappings":"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","file":"CertificateRevocationList.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes } from \"pvutils\";\r\nimport {\r\n\tgetAlgorithmParameters,\r\n\tgetCrypto,\r\n\tgetEngine,\r\n\tgetAlgorithmByOID,\r\n\tcreateECDSASignatureFromCMS,\r\n\tgetHashAlgorithm\r\n} from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport Time from \"./Time.js\";\r\nimport RevokedCertificate from \"./RevokedCertificate.js\";\r\nimport Extensions from \"./Extensions.js\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\n//**************************************************************************************\r\nfunction tbsCertList(parameters = {})\r\n{\r\n\t//TBSCertList  ::=  SEQUENCE  {\r\n\t//    version                 Version OPTIONAL,\r\n\t//                                 -- if present, MUST be v2\r\n\t//    signature               AlgorithmIdentifier,\r\n\t//    issuer                  Name,\r\n\t//    thisUpdate              Time,\r\n\t//    nextUpdate              Time OPTIONAL,\r\n\t//    revokedCertificates     SEQUENCE OF SEQUENCE  {\r\n\t//        userCertificate         CertificateSerialNumber,\r\n\t//        revocationDate          Time,\r\n\t//        crlEntryExtensions      Extensions OPTIONAL\r\n\t//        -- if present, version MUST be v2\r\n\t//    }  OPTIONAL,\r\n\t//    crlExtensions           [0]  EXPLICIT Extensions OPTIONAL\r\n\t//    -- if present, version MUST be v2\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [tbsCertListVersion]\r\n\t * @property {string} [signature]\r\n\t * @property {string} [issuer]\r\n\t * @property {string} [tbsCertListThisUpdate]\r\n\t * @property {string} [tbsCertListNextUpdate]\r\n\t * @property {string} [tbsCertListRevokedCertificates]\r\n\t * @property {string} [crlExtensions]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.blockName || \"tbsCertList\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Integer({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tname: (names.tbsCertListVersion || \"tbsCertList.version\"),\r\n\t\t\t\tvalue: 2\r\n\t\t\t}), // EXPLICIT integer value (v2)\r\n\t\t\tAlgorithmIdentifier.schema(names.signature || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertList.signature\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.issuer || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertList.issuer\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tTime.schema(names.tbsCertListThisUpdate || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tutcTimeName: \"tbsCertList.thisUpdate\",\r\n\t\t\t\t\tgeneralTimeName: \"tbsCertList.thisUpdate\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tTime.schema(names.tbsCertListNextUpdate || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tutcTimeName: \"tbsCertList.nextUpdate\",\r\n\t\t\t\t\tgeneralTimeName: \"tbsCertList.nextUpdate\"\r\n\t\t\t\t}\r\n\t\t\t}, true),\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\tname: (names.tbsCertListRevokedCertificates || \"tbsCertList.revokedCertificates\"),\r\n\t\t\t\t\t\tvalue: new asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.Integer(),\r\n\t\t\t\t\t\t\t\tTime.schema(),\r\n\t\t\t\t\t\t\t\tExtensions.schema({}, true)\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [Extensions.schema(names.crlExtensions || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsCertList.extensions\"\r\n\t\t\t\t\t}\r\n\t\t\t\t})]\r\n\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class CertificateRevocationList {\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", CertificateRevocationList.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", CertificateRevocationList.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", CertificateRevocationList.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @description issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", CertificateRevocationList.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @description thisUpdate\r\n\t\t */\r\n\t\tthis.thisUpdate = getParametersValue(parameters, \"thisUpdate\", CertificateRevocationList.defaultValues(\"thisUpdate\"));\r\n\t\t\r\n\t\tif(\"nextUpdate\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Time}\r\n\t\t\t * @description nextUpdate\r\n\t\t\t */\r\n\t\t\tthis.nextUpdate = getParametersValue(parameters, \"nextUpdate\", CertificateRevocationList.defaultValues(\"nextUpdate\"));\r\n\t\t\r\n\t\tif(\"revokedCertificates\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<RevokedCertificate>}\r\n\t\t\t * @description revokedCertificates\r\n\t\t\t */\r\n\t\t\tthis.revokedCertificates = getParametersValue(parameters, \"revokedCertificates\", CertificateRevocationList.defaultValues(\"revokedCertificates\"));\r\n\t\t\r\n\t\tif(\"crlExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Extensions}\r\n\t\t\t * @description crlExtensions\r\n\t\t\t */\r\n\t\t\tthis.crlExtensions = getParametersValue(parameters, \"crlExtensions\", CertificateRevocationList.defaultValues(\"crlExtensions\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", CertificateRevocationList.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description signatureValue\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", CertificateRevocationList.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 1;\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"revokedCertificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crlExtensions\":\r\n\t\t\t\treturn new Extensions();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificateRevocationList class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//CertificateList  ::=  SEQUENCE  {\r\n\t\t//    tbsCertList          TBSCertList,\r\n\t\t//    signatureAlgorithm   AlgorithmIdentifier,\r\n\t\t//    signatureValue       BIT STRING  }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"CertificateList\"),\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsCertList(parameters),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificateRevocationList.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CRL\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.tbsCertList.valueBeforeDecode;\r\n\t\t\r\n\t\tif(\"tbsCertList.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"tbsCertList.version\"].valueBlock.valueDec;\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result[\"tbsCertList.signature\"] });\r\n\t\tthis.issuer = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertList.issuer\"] });\r\n\t\tthis.thisUpdate = new Time({ schema: asn1.result[\"tbsCertList.thisUpdate\"] });\r\n\t\tif(\"tbsCertList.nextUpdate\" in asn1.result)\r\n\t\t\tthis.nextUpdate = new Time({ schema: asn1.result[\"tbsCertList.nextUpdate\"] });\r\n\t\tif(\"tbsCertList.revokedCertificates\" in asn1.result)\r\n\t\t\tthis.revokedCertificates = Array.from(asn1.result[\"tbsCertList.revokedCertificates\"], element => new RevokedCertificate({ schema: element }));\r\n\t\tif(\"tbsCertList.extensions\" in asn1.result)\r\n\t\t\tthis.crlExtensions = new Extensions({ schema: asn1.result[\"tbsCertList.extensions\"] });\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(this.version !== CertificateRevocationList.defaultValues(\"version\"))\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\toutputArray.push(this.signature.toSchema());\r\n\t\toutputArray.push(this.issuer.toSchema());\r\n\t\toutputArray.push(this.thisUpdate.toSchema());\r\n\t\t\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\toutputArray.push(this.nextUpdate.toSchema());\r\n\t\t\r\n\t\tif(\"revokedCertificates\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.revokedCertificates, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"crlExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tthis.crlExtensions.toSchema()\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\t\t\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.length === 0) // No stored TBS part\r\n\t\t\t\treturn CertificateRevocationList.schema();\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tsignature: this.signature.toJSON(),\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tthisUpdate: this.thisUpdate.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(this.version !== CertificateRevocationList.defaultValues(\"version\"))\r\n\t\t\tobject.version = this.version;\r\n\t\t\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\tobject.nextUpdate = this.nextUpdate.toJSON();\r\n\t\t\r\n\t\tif(\"revokedCertificates\" in this)\r\n\t\t\tobject.revokedCertificates = Array.from(this.revokedCertificates, element => element.toJSON());\r\n\t\t\r\n\t\tif(\"crlExtensions\" in this)\r\n\t\t\tobject.crlExtensions = this.crlExtensions.toJSON();\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\tisCertificateRevoked(certificate)\r\n\t{\r\n\t\t//region Check that issuer of the input certificate is the same with issuer of this CRL\r\n\t\tif(this.issuer.isEqual(certificate.issuer) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check that there are revoked certificates in this CRL\r\n\t\tif((\"revokedCertificates\" in this) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search for input certificate in revoked certificates array\r\n\t\tfor(const revokedCertificate of this.revokedCertificates)\r\n\t\t{\r\n\t\t\tif(revokedCertificate.userCertificate.isEqual(certificate.serialNumber))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for existing CRL data\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signature = result.signatureAlgorithm;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing signature\r\n\t * @param {{[issuerCertificate]: Object, [publicKeyInfo]: Object}} parameters\r\n\t * @returns {*}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet subjectPublicKeyInfo = -1;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get information about CRL issuer certificate\r\n\t\tif(\"issuerCertificate\" in parameters) // \"issuerCertificate\" must be of type \"Certificate\"\r\n\t\t{\r\n\t\t\tsubjectPublicKeyInfo = parameters.issuerCertificate.subjectPublicKeyInfo;\r\n\t\t\t\r\n\t\t\t// The CRL issuer name and \"issuerCertificate\" subject name are not equal\r\n\t\t\tif(this.issuer.isEqual(parameters.issuerCertificate.subject) === false)\r\n\t\t\t\treturn Promise.resolve(false);\r\n\t\t}\r\n\t\t\r\n\t\t//region In case if there is only public key during verification\r\n\t\tif(\"publicKeyInfo\" in parameters)\r\n\t\t\tsubjectPublicKeyInfo = parameters.publicKeyInfo; // Must be of type \"PublicKeyInfo\"\r\n\t\t//endregion\r\n\t\t\r\n\t\tif((\"subjectPublicKey\" in subjectPublicKeyInfo) === false)\r\n\t\t\treturn Promise.reject(\"Issuer's certificate must be provided as an input parameter\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the CRL for unknown critical extensions\r\n\t\tif(\"crlExtensions\" in this)\r\n\t\t{\r\n\t\t\tfor(const extension of this.crlExtensions.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.critical)\r\n\t\t\t\t{\r\n\t\t\t\t\t// We can not be sure that unknown extension has no value for CRL signature\r\n\t\t\t\t\tif((\"parsedValue\" in extension) === false)\r\n\t\t\t\t\t\treturn Promise.resolve(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\tsequence = sequence.then(() => engine.subtle.verifyWithPublicKey(this.tbs, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm));\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}