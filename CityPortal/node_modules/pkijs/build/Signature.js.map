{"version":3,"sources":["../src/Signature.js"],"names":["asn1js","Signature","parameters","signatureAlgorithm","defaultValues","signature","certs","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","Array","from","element","outputArray","push","toSchema","Constructed","optional","idBlock","tagClass","tagNumber","value","Sequence","_object","toJSON","memberName","BitString","memberValue","algorithmId","isEqual","length","name","Repeated"],"mappings":"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","file":"Signature.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Certificate from \"./Certificate.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class Signature\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Signature class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", Signature.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", Signature.defaultValues(\"signature\"));\r\n\r\n\t\tif(\"certs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate>}\r\n\t\t\t * @description certs\r\n\t\t\t */\r\n\t\t\tthis.certs = getParametersValue(parameters, \"certs\", Signature.defaultValues(\"certs\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Signature class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn (memberValue.isEqual(Signature.defaultValues(memberName)));\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Signature class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//Signature       ::=     SEQUENCE {\r\n\t\t//    signatureAlgorithm      AlgorithmIdentifier,\r\n\t\t//    signature               BIT STRING,\r\n\t\t//    certs               [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [certs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signature || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [new asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: (names.certs || \"\"),\r\n\t\t\t\t\t\t\t\tvalue: Certificate.schema(names.certs || {})\r\n\t\t\t\t\t\t\t})]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignature.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsignatureAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignature: \"signature\",\r\n\t\t\t\t\tcerts: \"certs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ocsp.Signature\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signature = asn1.result.signature;\r\n\r\n\t\tif(\"certs\" in asn1.result)\r\n\t\t\tthis.certs = Array.from(asn1.result.certs, element => new Certificate({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array of output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.certs, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t\t_object.certs = Array.from(this.certs, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}