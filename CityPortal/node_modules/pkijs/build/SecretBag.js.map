{"version":3,"sources":["../src/SecretBag.js"],"names":["asn1js","SecretBag","parameters","secretTypeId","defaultValues","secretValue","fromSchema","schema","asn1","compareSchema","names","id","value","verified","Error","result","valueBlock","toString","Sequence","ObjectIdentifier","Constructed","idBlock","tagClass","tagNumber","toSchema","toJSON","memberName","Any","memberValue","name","blockName"],"mappings":"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","file":"SecretBag.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class SecretBag\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SecretBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description secretTypeId\r\n\t\t */\r\n\t\tthis.secretTypeId = getParametersValue(parameters, \"secretTypeId\", SecretBag.defaultValues(\"secretTypeId\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @description secretValue\r\n\t\t */\r\n\t\tthis.secretValue = getParametersValue(parameters, \"secretValue\", SecretBag.defaultValues(\"secretValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"secretTypeId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"secretValue\":\r\n\t\t\t\treturn (new asn1js.Any());\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SecretBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"secretTypeId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"secretValue\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SecretBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//SecretBag ::= SEQUENCE {\r\n\t\t//    secretTypeId BAG-TYPE.&id ({SecretTypes}),\r\n\t\t//    secretValue  [0] EXPLICIT BAG-TYPE.&Type ({SecretTypes}{@secretTypeId})\r\n\t\t//}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [id]\r\n\t\t * @property {string} [value]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.value || \"value\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSecretBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tid: \"secretTypeId\",\r\n\t\t\t\t\tvalue: \"secretValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SecretBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.secretTypeId = asn1.result.secretTypeId.valueBlock.toString();\r\n\t\tthis.secretValue = asn1.result.secretValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.secretTypeId }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.secretValue.toSchema()]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tsecretTypeId: this.secretTypeId,\r\n\t\t\tsecretValue: this.secretValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}