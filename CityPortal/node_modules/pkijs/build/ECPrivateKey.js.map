{"version":3,"sources":["../src/ECPrivateKey.js"],"names":["asn1js","ECPrivateKey","parameters","version","defaultValues","privateKey","namedCurve","publicKey","fromSchema","schema","fromJSON","json","asn1","compareSchema","names","verified","Error","result","valueBlock","valueDec","toString","publicKeyData","valueHex","outputArray","Integer","value","push","Constructed","idBlock","tagClass","tagNumber","ObjectIdentifier","BitString","toSchema","toBER","Sequence","compareWithDefault","crvName","privateKeyJSON","crv","d","publicKeyJSON","toJSON","x","y","coodinateLength","toUpperCase","convertBuffer","byteLength","buffer","ArrayBuffer","view","Uint8Array","convertBufferView","set","OctetString","slice","memberName","memberValue","isEqual","name","blockName","optional"],"mappings":";;;;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;;;;;;;;;AACA;AACA;;;IAGqBC,Y;AAEpB;AACA;;;;;AAKA,yBACA;AAAA,MADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;AACA;;;;AAIA,OAAKC,OAAL,GAAe,iCAAmBD,UAAnB,EAA+B,SAA/B,EAA0CD,aAAaG,aAAb,CAA2B,SAA3B,CAA1C,CAAf;AACA;;;;AAIA,OAAKC,UAAL,GAAkB,iCAAmBH,UAAnB,EAA+B,YAA/B,EAA6CD,aAAaG,aAAb,CAA2B,YAA3B,CAA7C,CAAlB;;AAEA,MAAG,gBAAgBF,UAAnB;AACC;;;;AAIA,QAAKI,UAAL,GAAkB,iCAAmBJ,UAAnB,EAA+B,YAA/B,EAA6CD,aAAaG,aAAb,CAA2B,YAA3B,CAA7C,CAAlB;;AAED,MAAG,eAAeF,UAAlB;AACC;;;;AAIA,QAAKK,SAAL,GAAiB,iCAAmBL,UAAnB,EAA+B,WAA/B,EAA4CD,aAAaG,aAAb,CAA2B,WAA3B,CAA5C,CAAjB;AACD;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKM,UAAL,CAAgBN,WAAWO,MAA3B;AACD;AACA;AACA,MAAG,UAAUP,UAAb,EACC,KAAKQ,QAAL,CAAcR,WAAWS,IAAzB;AACD;AACA;AACD;AACA;;;;;;;;;AAiGA;AACA;;;;6BAIWF,M,EACX;AACC;AACA,OAAMG,OAAOZ,OAAOa,aAAP,CAAqBJ,MAArB,EACZA,MADY,EAEZR,aAAaQ,MAAb,CAAoB;AACnBK,WAAO;AACNX,cAAS,SADH;AAENE,iBAAY,YAFN;AAGNC,iBAAY,YAHN;AAINC,gBAAW;AAJL;AADY,IAApB,CAFY,CAAb;;AAYA,OAAGK,KAAKG,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,sEAAV,CAAN;AACD;;AAEA;AACA,QAAKb,OAAL,GAAeS,KAAKK,MAAL,CAAYd,OAAZ,CAAoBe,UAApB,CAA+BC,QAA9C;AACA,QAAKd,UAAL,GAAkBO,KAAKK,MAAL,CAAYZ,UAA9B;;AAEA,OAAG,gBAAgBO,KAAKK,MAAxB,EACC,KAAKX,UAAL,GAAkBM,KAAKK,MAAL,CAAYX,UAAZ,CAAuBY,UAAvB,CAAkCE,QAAlC,EAAlB;;AAED,OAAG,eAAeR,KAAKK,MAAvB,EACA;AACC,QAAMI,gBAAgB,EAAEZ,QAAQG,KAAKK,MAAL,CAAYV,SAAZ,CAAsBW,UAAtB,CAAiCI,QAA3C,EAAtB;AACA,QAAG,gBAAgB,IAAnB,EACCD,cAAcf,UAAd,GAA2B,KAAKA,UAAhC;;AAED,SAAKC,SAAL,GAAiB,0BAAgBc,aAAhB,CAAjB;AACA;AACD;AACA;AACD;AACA;;;;;;;6BAKA;AACC,OAAME,cAAc,CACnB,IAAIvB,OAAOwB,OAAX,CAAmB,EAAEC,OAAO,KAAKtB,OAAd,EAAnB,CADmB,EAEnB,KAAKE,UAFc,CAApB;;AAKA,OAAG,gBAAgB,IAAnB,EACA;AACCkB,gBAAYG,IAAZ,CAAiB,IAAI1B,OAAO2B,WAAX,CAAuB;AACvCC,cAAS;AACRC,gBAAU,CADF,EACK;AACbC,iBAAW,CAFH,CAEK;AAFL,MAD8B;AAKvCL,YAAO,CACN,IAAIzB,OAAO+B,gBAAX,CAA4B,EAAEN,OAAO,KAAKnB,UAAd,EAA5B,CADM;AALgC,KAAvB,CAAjB;AASA;;AAED,OAAG,eAAe,IAAlB,EACA;AACCiB,gBAAYG,IAAZ,CAAiB,IAAI1B,OAAO2B,WAAX,CAAuB;AACvCC,cAAS;AACRC,gBAAU,CADF,EACK;AACbC,iBAAW,CAFH,CAEK;AAFL,MAD8B;AAKvCL,YAAO,CACN,IAAIzB,OAAOgC,SAAX,CAAqB,EAAEV,UAAU,KAAKf,SAAL,CAAe0B,QAAf,GAA0BC,KAA1B,CAAgC,KAAhC,CAAZ,EAArB,CADM;AALgC,KAAvB,CAAjB;AASA;;AAED,UAAO,IAAIlC,OAAOmC,QAAX,CAAoB;AAC1BV,WAAOF;AADmB,IAApB,CAAP;AAGA;AACD;AACA;;;;;;;2BAKA;AACC,OAAK,gBAAgB,IAAjB,KAA2B,KAA5B,IAAuCtB,aAAamC,kBAAb,CAAgC,YAAhC,EAA8C,KAAK9B,UAAnD,CAA1C,EACC,MAAM,IAAIU,KAAJ,CAAU,qEAAV,CAAN;;AAED,OAAIqB,UAAU,EAAd;;AAEA,WAAO,KAAK/B,UAAZ;AAEC,SAAK,qBAAL;AAA4B;AAC3B+B,eAAU,OAAV;AACA;AACD,SAAK,cAAL;AAAqB;AACpBA,eAAU,OAAV;AACA;AACD,SAAK,cAAL;AAAqB;AACpBA,eAAU,OAAV;AACA;AACD;AAXD;;AAcA,OAAMC,iBAAiB;AACtBC,SAAKF,OADiB;AAEtBG,OAAG,uBAAS,kCAAoB,KAAKnC,UAAL,CAAgBa,UAAhB,CAA2BI,QAA/C,CAAT,EAAmE,IAAnE,EAAyE,IAAzE,EAA+E,KAA/E;AAFmB,IAAvB;;AAKA,OAAG,eAAe,IAAlB,EACA;AACC,QAAMmB,gBAAgB,KAAKlC,SAAL,CAAemC,MAAf,EAAtB;;AAEAJ,mBAAeK,CAAf,GAAmBF,cAAcE,CAAjC;AACAL,mBAAeM,CAAf,GAAmBH,cAAcG,CAAjC;AACA;;AAED,UAAON,cAAP;AACA;AACD;AACA;;;;;;;2BAIS3B,I,EACT;AACC,OAAIkC,kBAAkB,CAAtB;;AAEA,OAAG,SAASlC,IAAZ,EACA;AACC,YAAOA,KAAK4B,GAAL,CAASO,WAAT,EAAP;AAEC,UAAK,OAAL;AACC,WAAKxC,UAAL,GAAkB,qBAAlB;AACAuC,wBAAkB,EAAlB;AACA;AACD,UAAK,OAAL;AACC,WAAKvC,UAAL,GAAkB,cAAlB;AACAuC,wBAAkB,EAAlB;AACA;AACD,UAAK,OAAL;AACC,WAAKvC,UAAL,GAAkB,cAAlB;AACAuC,wBAAkB,EAAlB;AACA;AACD;AAdD;AAgBA,IAlBD,MAoBC,MAAM,IAAI7B,KAAJ,CAAU,oCAAV,CAAN;;AAED,OAAG,OAAOL,IAAV,EACA;AACC,QAAMoC,gBAAgB,kCAAoB,yBAAWpC,KAAK6B,CAAhB,EAAmB,IAAnB,CAApB,CAAtB;;AAEA,QAAGO,cAAcC,UAAd,GAA2BH,eAA9B,EACA;AACC,SAAMI,SAAS,IAAIC,WAAJ,CAAgBL,eAAhB,CAAf;AACA,SAAMM,OAAO,IAAIC,UAAJ,CAAeH,MAAf,CAAb;AACA,SAAMI,oBAAoB,IAAID,UAAJ,CAAeL,aAAf,CAA1B;AACAI,UAAKG,GAAL,CAAS,CAAT,EAAYD,iBAAZ;;AAEA,UAAKhD,UAAL,GAAkB,IAAIL,OAAOuD,WAAX,CAAuB,EAAEjC,UAAU2B,MAAZ,EAAvB,CAAlB;AACA,KARD,MAUC,KAAK5C,UAAL,GAAkB,IAAIL,OAAOuD,WAAX,CAAuB,EAAEjC,UAAUyB,cAAcS,KAAd,CAAoB,CAApB,EAAuBX,eAAvB,CAAZ,EAAvB,CAAlB;AACD,IAfD,MAiBC,MAAM,IAAI7B,KAAJ,CAAU,kCAAV,CAAN;;AAED,OAAI,OAAOL,IAAR,IAAkB,OAAOA,IAA5B,EACC,KAAKJ,SAAL,GAAiB,0BAAgB,EAAEI,UAAF,EAAhB,CAAjB;AACD;AACD;;;;gCA9QqB8C,U,EACrB;AACC,WAAOA,UAAP;AAEC,SAAK,SAAL;AACC,YAAO,CAAP;AACD,SAAK,YAAL;AACC,YAAO,IAAIzD,OAAOuD,WAAX,EAAP;AACD,SAAK,YAAL;AACC,YAAO,EAAP;AACD,SAAK,WAAL;AACC,YAAO,2BAAP;AACD;AACC,WAAM,IAAIvC,KAAJ,mDAA0DyC,UAA1D,CAAN;AAXF;AAaA;AACD;AACA;;;;;;;;qCAK0BA,U,EAAYC,W,EACtC;AACC,WAAOD,UAAP;AAEC,SAAK,SAAL;AACC,YAAQC,gBAAgBzD,aAAaG,aAAb,CAA2BqD,UAA3B,CAAxB;AACD,SAAK,YAAL;AACC,YAAQC,YAAYC,OAAZ,CAAoB1D,aAAaG,aAAb,CAA2BqD,UAA3B,CAApB,CAAR;AACD,SAAK,YAAL;AACC,YAAQC,gBAAgB,EAAxB;AACD,SAAK,WAAL;AACC,YAAS,sBAAYtB,kBAAZ,CAA+B,YAA/B,EAA6CsB,YAAYpD,UAAzD,CAAD,IACL,sBAAY8B,kBAAZ,CAA+B,GAA/B,EAAoCsB,YAAYf,CAAhD,CADK,IAEL,sBAAYP,kBAAZ,CAA+B,GAA/B,EAAoCsB,YAAYd,CAAhD,CAFH;AAGD;AACC,WAAM,IAAI5B,KAAJ,mDAA0DyC,UAA1D,CAAN;AAbF;AAeA;AACD;AACA;;;;;;;;2BAMA;AAAA,OADcvD,UACd,uEAD2B,EAC3B;;AACC;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AAQA,OAAMY,QAAQ,iCAAmBZ,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAIF,OAAOmC,QAAX,CAAoB;AAC3ByB,UAAO9C,MAAM+C,SAAN,IAAmB,EADC;AAE3BpC,WAAO,CACN,IAAIzB,OAAOwB,OAAX,CAAmB,EAAEoC,MAAO9C,MAAMX,OAAN,IAAiB,EAA1B,EAAnB,CADM,EAEN,IAAIH,OAAOuD,WAAX,CAAuB,EAAEK,MAAO9C,MAAMT,UAAN,IAAoB,EAA7B,EAAvB,CAFM,EAGN,IAAIL,OAAO2B,WAAX,CAAuB;AACtBmC,eAAU,IADY;AAEtBlC,cAAS;AACRC,gBAAU,CADF,EACK;AACbC,iBAAW,CAFH,CAEK;AAFL,MAFa;AAMtBL,YAAO,CACN,IAAIzB,OAAO+B,gBAAX,CAA4B,EAAE6B,MAAO9C,MAAMR,UAAN,IAAoB,EAA7B,EAA5B,CADM;AANe,KAAvB,CAHM,EAaN,IAAIN,OAAO2B,WAAX,CAAuB;AACtBmC,eAAU,IADY;AAEtBlC,cAAS;AACRC,gBAAU,CADF,EACK;AACbC,iBAAW,CAFH,CAEK;AAFL,MAFa;AAMtBL,YAAO,CACN,IAAIzB,OAAOgC,SAAX,CAAqB,EAAE4B,MAAO9C,MAAMP,SAAN,IAAmB,EAA5B,EAArB,CADM;AANe,KAAvB,CAbM;AAFoB,IAApB,CAAR;AA2BA;;;;;AAoLF;;;kBAnUqBN,Y","file":"ECPrivateKey.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64 } from \"pvutils\";\r\nimport ECPublicKey from \"./ECPublicKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5915\r\n */\r\nexport default class ECPrivateKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ECCPrivateKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", ECPrivateKey.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description privateKey\r\n\t\t */\r\n\t\tthis.privateKey = getParametersValue(parameters, \"privateKey\", ECPrivateKey.defaultValues(\"privateKey\"));\r\n\r\n\t\tif(\"namedCurve\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {string}\r\n\t\t\t * @description namedCurve\r\n\t\t\t */\r\n\t\t\tthis.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPrivateKey.defaultValues(\"namedCurve\"));\r\n\r\n\t\tif(\"publicKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPublicKey}\r\n\t\t\t * @description publicKey\r\n\t\t\t */\r\n\t\t\tthis.publicKey = getParametersValue(parameters, \"publicKey\", ECPrivateKey.defaultValues(\"publicKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 1;\r\n\t\t\tcase \"privateKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"publicKey\":\r\n\t\t\t\treturn new ECPublicKey();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === ECPrivateKey.defaultValues(memberName));\r\n\t\t\tcase \"privateKey\":\r\n\t\t\t\treturn (memberValue.isEqual(ECPrivateKey.defaultValues(memberName)));\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"publicKey\":\r\n\t\t\t\treturn ((ECPublicKey.compareWithDefault(\"namedCurve\", memberValue.namedCurve)) &&\r\n\t\t\t\t\t\t(ECPublicKey.compareWithDefault(\"x\", memberValue.x)) &&\r\n\t\t\t\t\t\t(ECPublicKey.compareWithDefault(\"y\", memberValue.y)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// ECPrivateKey ::= SEQUENCE {\r\n\t\t// version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),\r\n\t\t// privateKey     OCTET STRING,\r\n\t\t// parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,\r\n\t\t// publicKey  [1] BIT STRING OPTIONAL\r\n\t\t// }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [privateKey]\r\n\t\t * @property {string} [namedCurve]\r\n\t\t * @property {string} [publicKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.privateKey || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.namedCurve || \"\") })\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.BitString({ name: (names.publicKey || \"\") })\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tECPrivateKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tprivateKey: \"privateKey\",\r\n\t\t\t\t\tnamedCurve: \"namedCurve\",\r\n\t\t\t\t\tpublicKey: \"publicKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPrivateKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.privateKey = asn1.result.privateKey;\r\n\r\n\t\tif(\"namedCurve\" in asn1.result)\r\n\t\t\tthis.namedCurve = asn1.result.namedCurve.valueBlock.toString();\r\n\r\n\t\tif(\"publicKey\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst publicKeyData = { schema: asn1.result.publicKey.valueBlock.valueHex };\r\n\t\t\tif(\"namedCurve\" in this)\r\n\t\t\t\tpublicKeyData.namedCurve = this.namedCurve;\r\n\r\n\t\t\tthis.publicKey = new ECPublicKey(publicKeyData);\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.privateKey\r\n\t\t];\r\n\r\n\t\tif(\"namedCurve\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.namedCurve })\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"publicKey\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.BitString({ valueHex: this.publicKey.toSchema().toBER(false) })\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\treturn new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(((\"namedCurve\" in this) === false) || (ECPrivateKey.compareWithDefault(\"namedCurve\", this.namedCurve)))\r\n\t\t\tthrow new Error(\"Not enough information for making JSON: absent \\\"namedCurve\\\" value\");\r\n\r\n\t\tlet crvName = \"\";\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcrvName = \"P-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcrvName = \"P-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcrvName = \"P-521\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\tconst privateKeyJSON = {\r\n\t\t\tcrv: crvName,\r\n\t\t\td: toBase64(arrayBufferToString(this.privateKey.valueBlock.valueHex), true, true, false)\r\n\t\t};\r\n\r\n\t\tif(\"publicKey\" in this)\r\n\t\t{\r\n\t\t\tconst publicKeyJSON = this.publicKey.toJSON();\r\n\r\n\t\t\tprivateKeyJSON.x = publicKeyJSON.x;\r\n\t\t\tprivateKeyJSON.y = publicKeyJSON.y;\r\n\t\t}\r\n\r\n\t\treturn privateKeyJSON;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tlet coodinateLength = 0;\r\n\r\n\t\tif(\"crv\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.crv.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"P-256\":\r\n\t\t\t\t\tthis.namedCurve = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\t\tcoodinateLength = 32;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-384\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.34\";\r\n\t\t\t\t\tcoodinateLength = 48;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-521\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.35\";\r\n\t\t\t\t\tcoodinateLength = 66;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"crv\\\"\");\r\n\r\n\t\tif(\"d\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.d, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tconst buffer = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(buffer);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(1, convertBufferView);\r\n\t\t\t\t\r\n\t\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: buffer });\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: convertBuffer.slice(0, coodinateLength) });\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\r\n\r\n\t\tif((\"x\" in json) && (\"y\" in json))\r\n\t\t\tthis.publicKey = new ECPublicKey({ json });\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}