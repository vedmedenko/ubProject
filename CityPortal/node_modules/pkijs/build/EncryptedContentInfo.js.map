{"version":3,"sources":["../src/EncryptedContentInfo.js"],"names":["asn1js","EncryptedContentInfo","parameters","contentType","defaultValues","contentEncryptionAlgorithm","encryptedContent","idBlock","tagClass","tagNumber","isConstructed","constrString","OctetString","offset","length","valueBlock","valueHex","byteLength","pieceView","Uint8Array","_array","ArrayBuffer","_view","i","value","push","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","toString","sequenceLengthBlock","isIndefiniteForm","outputArray","ObjectIdentifier","toSchema","encryptedValue","lenBlock","Sequence","_object","toJSON","memberName","memberValue","algorithmId","isEqual","name","Choice","Constructed","Repeated","Primitive"],"mappings":"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","file":"EncryptedContentInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EncryptedContentInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncryptedContentInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description contentType\r\n\t\t */\r\n\t\tthis.contentType = getParametersValue(parameters, \"contentType\", EncryptedContentInfo.defaultValues(\"contentType\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description contentEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.contentEncryptionAlgorithm = getParametersValue(parameters, \"contentEncryptionAlgorithm\", EncryptedContentInfo.defaultValues(\"contentEncryptionAlgorithm\"));\r\n\r\n\t\tif(\"encryptedContent\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @description encryptedContent (!!!) could be contructive or primitive value (!!!)\r\n\t\t\t */\r\n\t\t\tthis.encryptedContent = parameters.encryptedContent;\r\n\t\t\t\r\n\t\t\tif((this.encryptedContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t(this.encryptedContent.idBlock.tagNumber === 4))\r\n\t\t\t{\r\n\t\t\t\t//region Divide OCTETSTRING value down to small pieces\r\n\t\t\t\tif(this.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst constrString = new asn1js.OctetString({\r\n\t\t\t\t\t\tidBlock: { isConstructed: true },\r\n\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet offset = 0;\r\n\t\t\t\t\tlet length = this.encryptedContent.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\twhile(length > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst pieceView = new Uint8Array(this.encryptedContent.valueBlock.valueHex, offset, ((offset + 1024) > this.encryptedContent.valueBlock.valueHex.byteLength) ? (this.encryptedContent.valueBlock.valueHex.byteLength - offset) : 1024);\r\n\t\t\t\t\t\tconst _array = new ArrayBuffer(pieceView.length);\r\n\t\t\t\t\t\tconst _view = new Uint8Array(_array);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(let i = 0; i < _view.length; i++)\r\n\t\t\t\t\t\t\t_view[i] = pieceView[i];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconstrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlength -= pieceView.length;\r\n\t\t\t\t\t\toffset += pieceView.length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.encryptedContent = constrString;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"contentEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedContent\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"contentEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedContent\":\r\n\t\t\t\treturn (memberValue.isEqual(EncryptedContentInfo.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//EncryptedContentInfo ::= SEQUENCE {\r\n\t\t//    contentType ContentType,\r\n\t\t//    contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,\r\n\t\t//    encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }\r\n\t\t//\r\n\t\t// Comment: Strange, but modern crypto engines create \"encryptedContent\" as \"[0] EXPLICIT EncryptedContent\"\r\n\t\t//\r\n\t\t//EncryptedContent ::= OCTET STRING\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentType]\r\n\t\t * @property {string} [contentEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedContent]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.contentType || \"\") }),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.contentEncryptionAlgorithm || {}),\r\n\t\t\t\t// The CHOICE we need because \"EncryptedContent\" could have either \"constructive\"\r\n\t\t\t\t// or \"primitive\" form of encoding and we need to handle both variants\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.encryptedContent || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\t\tvalue: new asn1js.OctetString()\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.encryptedContent || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncryptedContentInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcontentType: \"contentType\",\r\n\t\t\t\t\tcontentEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"contentEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedContent: \"encryptedContent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EncryptedContentInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.contentType = asn1.result.contentType.valueBlock.toString();\r\n\t\tthis.contentEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.contentEncryptionAlgorithm });\r\n\r\n\t\tif(\"encryptedContent\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.encryptedContent = asn1.result.encryptedContent;\r\n\r\n\t\t\tthis.encryptedContent.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\tthis.encryptedContent.idBlock.tagNumber = 4; // OCTETSTRING (!!!) The value still has instance of \"in_window.org.pkijs.asn1.ASN1_CONSTRUCTED / ASN1_PRIMITIVE\"\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst sequenceLengthBlock = {\r\n\t\t\tisIndefiniteForm: false\r\n\t\t};\r\n\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.contentType }));\r\n\t\toutputArray.push(this.contentEncryptionAlgorithm.toSchema());\r\n\r\n\t\tif(\"encryptedContent\" in this)\r\n\t\t{\r\n\t\t\tsequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\r\n\r\n\t\t\tconst encryptedValue = this.encryptedContent;\r\n\r\n\t\t\tencryptedValue.idBlock.tagClass = 3; // CONTEXT-SPECIFIC\r\n\t\t\tencryptedValue.idBlock.tagNumber = 0; // [0]\r\n\r\n\t\t\tencryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\r\n\r\n\t\t\toutputArray.push(encryptedValue);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tlenBlock: sequenceLengthBlock,\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tcontentType: this.contentType,\r\n\t\t\tcontentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"encryptedContent\" in this)\r\n\t\t\t_object.encryptedContent = this.encryptedContent.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}