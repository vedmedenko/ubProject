{"version":3,"sources":["../src/AuthenticatedSafe.js"],"names":["asn1js","AuthenticatedSafe","parameters","safeContents","defaultValues","parsedValue","fromSchema","schema","asn1","compareSchema","names","contentInfos","verified","Error","Array","from","result","element","Sequence","value","toSchema","toJSON","Object","Promise","reject","length","sequence","resolve","entries","index","content","contentType","OctetString","authSafeContent","ArrayBuffer","valueBlock","isConstructed","contentValue","valueHex","fromBER","offset","push","privacyMode","cmsEnveloped","recipientCertificate","recipientKey","then","decrypt","recipientPrivateKey","cmsEncrypted","password","error","contentBuffer","toBER","currentParameters","contentToEncrypt","encrypt","encryptionAlgorithm","name","toLowerCase","addRecipientByCertificate","encryptingCertificate","memberName","memberValue","keys","blockName","Repeated"],"mappings":"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","file":"AuthenticatedSafe.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf } from \"pvutils\";\r\nimport ContentInfo from \"./ContentInfo.js\";\r\nimport SafeContents from \"./SafeContents.js\";\r\nimport EnvelopedData from \"./EnvelopedData.js\";\r\nimport EncryptedData from \"./EncryptedData.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class AuthenticatedSafe\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AuthenticatedSafe class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<ContentInfo>}\r\n\t\t * @description safeContents\r\n\t\t */\r\n\t\tthis.safeContents = getParametersValue(parameters, \"safeContents\", AuthenticatedSafe.defaultValues(\"safeContents\"));\r\n\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @description parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", AuthenticatedSafe.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"safeContents\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AuthenticatedSafe class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"safeContents\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AuthenticatedSafe class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//AuthenticatedSafe ::= SEQUENCE OF ContentInfo\r\n\t\t//-- Data if unencrypted\r\n\t\t//-- EncryptedData if password-encrypted\r\n\t\t//-- EnvelopedData if public key-encrypted\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentInfos]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.contentInfos || \"\"),\r\n\t\t\t\t\tvalue: ContentInfo.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAuthenticatedSafe.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcontentInfos: \"contentInfos\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AuthenticatedSafe\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.safeContents = Array.from(asn1.result.contentInfos, element => new ContentInfo({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.safeContents, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tsafeContents: Array.from(this.safeContents, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Check input data from \"parameters\" \r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"safeContents\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"safeContents\\\"\");\r\n\t\t\r\n\t\tif((parameters.safeContents instanceof Array) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters.safeContents\\\" must has \\\"Array\\\" type\");\r\n\t\t\r\n\t\tif(parameters.safeContents.length !== this.safeContents.length)\r\n\t\t\treturn Promise.reject(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.safeContents.length\\\"\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create value for \"this.parsedValue.authenticatedSafe\" \r\n\t\tthis.parsedValue = {\r\n\t\t\tsafeContents: []\r\n\t\t};\r\n\t\t\r\n\t\tfor(const [index, content] of this.safeContents.entries())\r\n\t\t{\r\n\t\t\tswitch(content.contentType)\r\n\t\t\t{\r\n\t\t\t\t//region data \r\n\t\t\t\tcase \"1.2.840.113549.1.7.1\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\t\tif((content.content instanceof asn1js.OctetString) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"this.safeContents[j].content\\\"\");\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check we have \"constructive encoding\" for AuthSafe content\r\n\t\t\t\t\t\tlet authSafeContent = new ArrayBuffer(0);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(content.content.valueBlock.isConstructed)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(const contentValue of content.content.valueBlock.value)\r\n\t\t\t\t\t\t\t\tauthSafeContent = utilConcatBuf(authSafeContent, contentValue.valueBlock.valueHex);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tauthSafeContent = content.content.valueBlock.valueHex;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\t\tconst asn1 = asn1js.fromBER(authSafeContent);\r\n\t\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"content.content\\\"\");\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Finilly initialize initial values of \"SafeContents\" type\r\n\t\t\t\t\t\tthis.parsedValue.safeContents.push({\r\n\t\t\t\t\t\t\tprivacyMode: 0, // No privacy, clear data\r\n\t\t\t\t\t\t\tvalue: new SafeContents({ schema: asn1.result })\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region envelopedData \r\n\t\t\t\tcase \"1.2.840.113549.1.7.3\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst cmsEnveloped = new EnvelopedData({ schema: content.content });\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check mandatory parameters\r\n\t\t\t\t\t\tif((\"recipientCertificate\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"recipientCertificate\\\" in \\\"parameters.safeContents[j]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst recipientCertificate = parameters.safeContents[index].recipientCertificate;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((\"recipientKey\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"recipientKey\\\" in \\\"parameters.safeContents[j]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst recipientKey = parameters.safeContents[index].recipientKey;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Decrypt CMS EnvelopedData using first recipient information\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEnveloped.decrypt(0, {\r\n\t\t\t\t\t\t\t\trecipientCertificate,\r\n\t\t\t\t\t\t\t\trecipientPrivateKey: recipientKey\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconst asn1 = asn1js.fromBER(result);\r\n\t\t\t\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of decrypted data\");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tthis.parsedValue.safeContents.push({\r\n\t\t\t\t\t\t\t\t\tprivacyMode: 2, // Public-key privacy mode\r\n\t\t\t\t\t\t\t\t\tvalue: new SafeContents({ schema: asn1.result })\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion   \r\n\t\t\t\t//region encryptedData \r\n\t\t\t\tcase \"1.2.840.113549.1.7.6\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst cmsEncrypted = new EncryptedData({ schema: content.content });\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check mandatory parameters\r\n\t\t\t\t\t\tif((\"password\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\" in \\\"parameters.safeContents[j]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst password = parameters.safeContents[index].password;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Decrypt CMS EncryptedData using password\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEncrypted.decrypt({\r\n\t\t\t\t\t\t\t\tpassword\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initialize internal data\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconst asn1 = asn1js.fromBER(result);\r\n\t\t\t\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of decrypted data\");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tthis.parsedValue.safeContents.push({\r\n\t\t\t\t\t\t\t\t\tprivacyMode: 1, // Password-based privacy mode\r\n\t\t\t\t\t\t\t\t\tvalue: new SafeContents({ schema: asn1.result })\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion   \r\n\t\t\t\t//region default \r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Unknown \\\"contentType\\\" for AuthenticatedSafe: \" ${content.contentType}`);\r\n\t\t\t\t//endregion \r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tmakeInternalValues(parameters)\r\n\t{\r\n\t\t//region Check data in \"parsedValue\" \r\n\t\tif((\"parsedValue\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Please run \\\"parseValues\\\" first or add \\\"parsedValue\\\" manually\");\r\n\t\t\r\n\t\tif((this.parsedValue instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"this.parsedValue\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((this.parsedValue.safeContents instanceof Array) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"this.parsedValue.safeContents\\\" must has \\\"Array\\\" type\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Check input data from \"parameters\" \r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"safeContents\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"safeContents\\\"\");\r\n\t\t\r\n\t\tif((parameters.safeContents instanceof Array) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters.safeContents\\\" must has \\\"Array\\\" type\");\r\n\t\t\r\n\t\tif(parameters.safeContents.length !== this.parsedValue.safeContents.length)\r\n\t\t\treturn Promise.reject(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.parsedValue.safeContents\\\"\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create internal values from already parsed values \r\n\t\tthis.safeContents = [];\r\n\t\t\r\n\t\tfor(const [index, content] of this.parsedValue.safeContents.entries())\r\n\t\t{\r\n\t\t\t//region Check current \"content\" value\r\n\t\t\tif((\"privacyMode\" in content) === false)\r\n\t\t\t\treturn Promise.reject(\"The \\\"privacyMode\\\" is a mandatory parameter for \\\"content\\\"\");\r\n\t\t\t\r\n\t\t\tif((\"value\" in content) === false)\r\n\t\t\t\treturn Promise.reject(\"The \\\"value\\\" is a mandatory parameter for \\\"content\\\"\");\r\n\t\t\t\r\n\t\t\tif((content.value instanceof SafeContents) === false)\r\n\t\t\t\treturn Promise.reject(\"The \\\"content.value\\\" must has \\\"SafeContents\\\" type\");\r\n\t\t\t//endregion \r\n\t\t\t\r\n\t\t\tswitch(content.privacyMode)\r\n\t\t\t{\r\n\t\t\t\t//region No privacy \r\n\t\t\t\tcase 0:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst contentBuffer = content.value.toSchema().toBER(false);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.safeContents.push(new ContentInfo({\r\n\t\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\",\r\n\t\t\t\t\t\t\t\t\tcontent: new asn1js.OctetString({ valueHex: contentBuffer })\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region Privacy with password\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst cmsEncrypted = new EncryptedData();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst currentParameters = parameters.safeContents[index];\r\n\t\t\t\t\t\tcurrentParameters.contentToEncrypt = content.value.toSchema().toBER(false);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Encrypt CMS EncryptedData using password\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEncrypted.encrypt(currentParameters),\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Store result content in CMS_CONTENT_INFO type\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.safeContents.push(new ContentInfo({\r\n\t\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.6\",\r\n\t\t\t\t\t\t\t\t\tcontent: cmsEncrypted.toSchema()\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region Privacy with public key\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst cmsEnveloped = new EnvelopedData();\r\n\t\t\t\t\t\tconst contentToEncrypt = content.value.toSchema().toBER(false);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check mandatory parameters\r\n\t\t\t\t\t\tif((\"encryptingCertificate\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"encryptingCertificate\\\" in \\\"parameters.safeContents[i]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((\"encryptionAlgorithm\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"encryptionAlgorithm\\\" in \\\"parameters.safeContents[i]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tswitch(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.name.toLowerCase() === \"aes-cbc\"):\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.name.toLowerCase() === \"aes-gcm\"):\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect parameter \\\"encryptionAlgorithm\\\" in \\\"parameters.safeContents[i]\\\": ${parameters.safeContents[index].encryptionAlgorithm}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tswitch(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.length === 128):\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.length === 192):\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.length === 256):\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect parameter \\\"encryptionAlgorithm.length\\\" in \\\"parameters.safeContents[i]\\\": ${parameters.safeContents[index].encryptionAlgorithm.length}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Making correct \"encryptionAlgorithm\" variable\r\n\t\t\t\t\t\tconst encryptionAlgorithm = parameters.safeContents[index].encryptionAlgorithm;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Append recipient for enveloped data\r\n\t\t\t\t\t\tcmsEnveloped.addRecipientByCertificate(parameters.safeContents[index].encryptingCertificate);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Making encryption\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEnveloped.encrypt(encryptionAlgorithm, contentToEncrypt)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.safeContents.push(new ContentInfo({\r\n\t\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.3\",\r\n\t\t\t\t\t\t\t\t\tcontent: cmsEnveloped.toSchema()\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region default \r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn Promise.reject(`Incorrect value for \\\"content.privacyMode\\\": ${content.privacyMode}`);\r\n\t\t\t\t//endregion \r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Return result of the function \r\n\t\treturn sequence.then(\r\n\t\t\t() => this,\r\n\t\t\terror => Promise.reject(`Error during parsing: ${error}`)\r\n\t\t);\r\n\t\t//endregion   \r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}