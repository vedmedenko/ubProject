{"version":3,"sources":["../src/Extension.js"],"names":["asn1js","Extension","parameters","extnID","defaultValues","critical","extnValue","OctetString","valueHex","parsedValue","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","valueBlock","toString","value","fromBER","offset","outputArray","push","ObjectIdentifier","Boolean","Sequence","object","toJSON","memberName","name","blockName","optional"],"mappings":"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","file":"Extension.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport SubjectDirectoryAttributes from \"./SubjectDirectoryAttributes.js\";\r\nimport PrivateKeyUsagePeriod from \"./PrivateKeyUsagePeriod.js\";\r\nimport AltName from \"./AltName.js\";\r\nimport BasicConstraints from \"./BasicConstraints.js\";\r\nimport IssuingDistributionPoint from \"./IssuingDistributionPoint.js\";\r\nimport GeneralNames from \"./GeneralNames.js\";\r\nimport NameConstraints from \"./NameConstraints.js\";\r\nimport CRLDistributionPoints from \"./CRLDistributionPoints.js\";\r\nimport CertificatePolicies from \"./CertificatePolicies.js\";\r\nimport PolicyMappings from \"./PolicyMappings.js\";\r\nimport AuthorityKeyIdentifier from \"./AuthorityKeyIdentifier.js\";\r\nimport PolicyConstraints from \"./PolicyConstraints.js\";\r\nimport ExtKeyUsage from \"./ExtKeyUsage.js\";\r\nimport InfoAccess from \"./InfoAccess.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class Extension\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Extension class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description extnID\r\n\t\t */\r\n\t\tthis.extnID = getParametersValue(parameters, \"extnID\", Extension.defaultValues(\"extnID\"));\r\n\t\t/**\r\n\t\t * @type {boolean}\r\n\t\t * @description critical\r\n\t\t */\r\n\t\tthis.critical = getParametersValue(parameters, \"critical\", Extension.defaultValues(\"critical\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description extnValue\r\n\t\t */\r\n\t\tif(\"extnValue\" in parameters)\r\n\t\t\tthis.extnValue = new asn1js.OctetString({ valueHex: parameters.extnValue });\r\n\t\telse\r\n\t\t\tthis.extnValue = Extension.defaultValues(\"extnValue\");\r\n\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Object}\r\n\t\t\t * @description parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", Extension.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"extnID\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"critical\":\r\n\t\t\t\treturn false;\r\n\t\t\tcase \"extnValue\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Extension class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//Extension  ::=  SEQUENCE  {\r\n\t\t//    extnID      OBJECT IDENTIFIER,\r\n\t\t//    critical    BOOLEAN DEFAULT FALSE,\r\n\t\t//    extnValue   OCTET STRING\r\n\t\t//}\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [extnID]\r\n\t\t * @property {string} [critical]\r\n\t\t * @property {string} [extnValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.extnID || \"\") }),\r\n\t\t\t\tnew asn1js.Boolean({\r\n\t\t\t\t\tname: (names.critical || \"\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.extnValue || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tlet asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tExtension.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\textnID: \"extnID\",\r\n\t\t\t\t\tcritical: \"critical\",\r\n\t\t\t\t\textnValue: \"extnValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EXTENSION\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.extnID = asn1.result.extnID.valueBlock.toString();\r\n\t\tif(\"critical\" in asn1.result)\r\n\t\t\tthis.critical = asn1.result.critical.valueBlock.value;\r\n\t\tthis.extnValue = asn1.result.extnValue;\r\n\r\n\t\t//region Get \"parsedValue\" for well-known extensions\r\n\t\tasn1 = asn1js.fromBER(this.extnValue.valueBlock.valueHex);\r\n\t\tif(asn1.offset === (-1))\r\n\t\t\treturn;\r\n\r\n\t\tswitch(this.extnID)\r\n\t\t{\r\n\t\t\tcase \"2.5.29.9\": // SubjectDirectoryAttributes\r\n\t\t\t\tthis.parsedValue = new SubjectDirectoryAttributes({ schema: asn1.result });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.14\": // SubjectKeyIdentifier\r\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple OCTETSTRING\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.15\": // KeyUsage\r\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple BITSTRING\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.16\": // PrivateKeyUsagePeriod\r\n\t\t\t\tthis.parsedValue = new PrivateKeyUsagePeriod({ schema: asn1.result });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.17\": // SubjectAltName\r\n\t\t\tcase \"2.5.29.18\": // IssuerAltName\r\n\t\t\t\tthis.parsedValue = new AltName({ schema: asn1.result });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.19\": // BasicConstraints\r\n\t\t\t\tthis.parsedValue = new BasicConstraints({ schema: asn1.result });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.20\": // CRLNumber\r\n\t\t\tcase \"2.5.29.27\": // BaseCRLNumber (delta CRL indicator)\r\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple INTEGER\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.21\": // CRLReason\r\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple ENUMERATED\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.24\": // InvalidityDate\r\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple GeneralizedTime\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.28\": // IssuingDistributionPoint\r\n\t\t\t\tthis.parsedValue = new IssuingDistributionPoint({ schema: asn1.result });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.29\": // CertificateIssuer\r\n\t\t\t\tthis.parsedValue = new GeneralNames({ schema: asn1.result }); // Should be just a simple\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.30\": // NameConstraints\r\n\t\t\t\tthis.parsedValue = new NameConstraints({ schema: asn1.result });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.31\": // CRLDistributionPoints\r\n\t\t\tcase \"2.5.29.46\": // FreshestCRL\r\n\t\t\t\tthis.parsedValue = new CRLDistributionPoints({ schema: asn1.result });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.32\": // CertificatePolicies\r\n\t\t\t\tthis.parsedValue = new CertificatePolicies({ schema: asn1.result });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.33\": // PolicyMappings\r\n\t\t\t\tthis.parsedValue = new PolicyMappings({ schema: asn1.result });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.35\": // AuthorityKeyIdentifier\r\n\t\t\t\tthis.parsedValue = new AuthorityKeyIdentifier({ schema: asn1.result });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.36\": // PolicyConstraints\r\n\t\t\t\tthis.parsedValue = new PolicyConstraints({ schema: asn1.result });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.37\": // ExtKeyUsage\r\n\t\t\t\tthis.parsedValue = new ExtKeyUsage({ schema: asn1.result });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.54\": // InhibitAnyPolicy\r\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple INTEGER\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.6.1.5.5.7.1.1\": // AuthorityInfoAccess\r\n\t\t\tcase \"1.3.6.1.5.5.7.1.11\": // SubjectInfoAccess\r\n\t\t\t\tthis.parsedValue = new InfoAccess({ schema: asn1.result });\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.extnID }));\r\n\r\n\t\tif(this.critical !== Extension.defaultValues(\"critical\"))\r\n\t\t\toutputArray.push(new asn1js.Boolean({ value: this.critical }));\r\n\r\n\t\toutputArray.push(this.extnValue);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\textnID: this.extnID,\r\n\t\t\textnValue: this.extnValue.toJSON()\r\n\t\t};\r\n\r\n\t\tif(this.critical !== Extension.defaultValues(\"critical\"))\r\n\t\t\tobject.critical = this.critical;\r\n\r\n\t\tif(\"parsedValue\" in this)\r\n\t\t\tobject.parsedValue = this.parsedValue.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}