{"version":3,"sources":["../src/DigestInfo.js"],"names":["asn1js","DigestInfo","parameters","digestAlgorithm","defaultValues","digest","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","Sequence","value","toSchema","toJSON","memberName","OctetString","memberValue","compareWithDefault","algorithmId","isEqual","constructor","name"],"mappings":"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","file":"DigestInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class DigestInfo \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for DigestInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description digestAlgorithm\r\n\t\t */\r\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", DigestInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description digest\r\n\t\t */\r\n\t\tthis.digest = getParametersValue(parameters, \"digest\", DigestInfo.defaultValues(\"digest\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"digest\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for DigestInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\treturn ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\r\n\t\t\t\t((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"digest\":\r\n\t\t\t\treturn (memberValue.isEqual(this.constructor.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for DigestInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//DigestInfo ::= SEQUENCE {\r\n\t\t//    digestAlgorithm DigestAlgorithmIdentifier,\r\n\t\t//    digest Digest }\r\n\t\t\r\n\t\t//Digest ::= OCTET STRING\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"digestAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.digest || \"digest\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tDigestInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tdigestAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"digestAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdigest: \"digest\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for DigestInfo\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\r\n\t\tthis.digest = asn1.result.digest;\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.digestAlgorithm.toSchema(),\r\n\t\t\t\tthis.digest\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tdigestAlgorithm: this.digestAlgorithm.toJSON(),\r\n\t\t\tdigest: this.digest.toJSON()\r\n\t\t};\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}