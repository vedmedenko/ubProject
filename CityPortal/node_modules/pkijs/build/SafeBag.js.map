{"version":3,"sources":["../src/SafeBag.js"],"names":["asn1js","SafeBag","parameters","bagId","defaultValues","bagValue","bagAttributes","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","valueBlock","toString","Array","from","element","outputArray","ObjectIdentifier","value","Constructed","idBlock","tagClass","tagNumber","toSchema","push","Set","Sequence","output","toJSON","memberName","Any","memberValue","length","name","blockName","optional","Repeated"],"mappings":"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","file":"SafeBag.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\r\nimport PKCS8ShroudedKeyBag from \"./PKCS8ShroudedKeyBag.js\";\r\nimport CertBag from \"./CertBag.js\";\r\nimport CRLBag from \"./CRLBag.js\";\r\nimport SecretBag from \"./SecretBag.js\";\r\nimport SafeContents from \"./SafeContents.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class SafeBag\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SafeBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description bagId\r\n\t\t */\r\n\t\tthis.bagId = getParametersValue(parameters, \"bagId\", SafeBag.defaultValues(\"bagId\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @description bagValue\r\n\t\t */\r\n\t\tthis.bagValue = getParametersValue(parameters, \"bagValue\", SafeBag.defaultValues(\"bagValue\"));\r\n\t\t\r\n\t\tif(\"bagAttributes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @description bagAttributes\r\n\t\t\t */\r\n\t\t\tthis.bagAttributes = getParametersValue(parameters, \"bagAttributes\", SafeBag.defaultValues(\"bagAttributes\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"bagId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"bagValue\":\r\n\t\t\t\treturn (new asn1js.Any());\r\n\t\t\tcase \"bagAttributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SafeBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"bagId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"bagValue\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"bagAttributes\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SafeBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//SafeBag ::= SEQUENCE {\r\n\t\t//    bagId\t      \tBAG-TYPE.&id ({PKCS12BagSet}),\r\n\t\t//    bagValue      [0] EXPLICIT BAG-TYPE.&Type({PKCS12BagSet}{@bagId}),\r\n\t\t//    bagAttributes SET OF PKCS12Attribute OPTIONAL\r\n\t\t//}\r\n\t\t\r\n\t\t//rsadsi\tOBJECT IDENTIFIER ::= {iso(1) member-body(2) us(840) rsadsi(113549)}\r\n\t\t//pkcs    OBJECT IDENTIFIER ::= {rsadsi pkcs(1)}\r\n\t\t//pkcs-12\tOBJECT IDENTIFIER ::= {pkcs 12}\r\n\t\t\r\n\t\t//bagtypes\t\t\tOBJECT IDENTIFIER ::= {pkcs-12 10 1}\r\n\t\t\r\n\t\t//keyBag \t  BAG-TYPE ::=\r\n\t\t//{KeyBag IDENTIFIED BY {bagtypes 1}}\r\n\t\t//pkcs8ShroudedKeyBag BAG-TYPE ::=\r\n\t\t//{PKCS8ShroudedKeyBag IDENTIFIED BY {bagtypes 2}}\r\n\t\t//certBag BAG-TYPE ::=\r\n\t\t//{CertBag IDENTIFIED BY {bagtypes 3}}\r\n\t\t//crlBag BAG-TYPE ::=\r\n\t\t//{CRLBag IDENTIFIED BY {bagtypes 4}}\r\n\t\t//secretBag BAG-TYPE ::=\r\n\t\t//{SecretBag IDENTIFIED BY {bagtypes 5}}\r\n\t\t//safeContentsBag BAG-TYPE ::=\r\n\t\t//{SafeContents IDENTIFIED BY {bagtypes 6}}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [bagId]\r\n\t\t * @property {string} [bagValue]\r\n\t\t * @property {string} [bagAttributes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.bagId || \"bagId\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.bagValue || \"bagValue\") })] // EXPLICIT ANY value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.bagAttributes || \"bagAttributes\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSafeBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tbagId: \"bagId\",\r\n\t\t\t\t\tbagValue: \"bagValue\",\r\n\t\t\t\t\tbagAttributes: \"bagAttributes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SafeBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.bagId = asn1.result.bagId.valueBlock.toString();\r\n\t\t\r\n\t\tswitch(this.bagId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.12.10.1.1\": // keyBag\r\n\t\t\t\tthis.bagValue = new PrivateKeyInfo({ schema: asn1.result.bagValue });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.12.10.1.2\": // pkcs8ShroudedKeyBag\r\n\t\t\t\tthis.bagValue = new PKCS8ShroudedKeyBag({ schema: asn1.result.bagValue });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.12.10.1.3\": // certBag\r\n\t\t\t\tthis.bagValue = new CertBag({ schema: asn1.result.bagValue });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.12.10.1.4\": // crlBag\r\n\t\t\t\tthis.bagValue = new CRLBag({ schema: asn1.result.bagValue });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.12.10.1.5\": // secretBag\r\n\t\t\t\tthis.bagValue = new SecretBag({ schema: asn1.result.bagValue });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.12.10.1.6\": // safeContentsBag\r\n\t\t\t\tthis.bagValue = new SafeContents({ schema: asn1.result.bagValue });\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid \\\"bagId\\\" for SafeBag: ${this.bagId}`);\r\n\t\t}\r\n\t\t\r\n\t\tif(\"bagAttributes\" in asn1.result)\r\n\t\t\tthis.bagAttributes = Array.from(asn1.result.bagAttributes, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.ObjectIdentifier({ value: this.bagId }),\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.bagValue.toSchema()]\r\n\t\t\t})\r\n\t\t];\r\n\t\t\r\n\t\tif(\"bagAttributes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Set({\r\n\t\t\t\tvalue: Array.from(this.bagAttributes, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst output = {\r\n\t\t\tbagId: this.bagId,\r\n\t\t\tbagValue: this.bagValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"bagAttributes\" in this)\r\n\t\t\toutput.bagAttributes = Array.from(this.bagAttributes, element => element.toJSON());\r\n\t\t\r\n\t\treturn output;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}