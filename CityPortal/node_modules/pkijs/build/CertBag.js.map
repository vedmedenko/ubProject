{"version":3,"sources":["../src/CertBag.js"],"names":["asn1js","CertBag","parameters","certId","defaultValues","certValue","parsedValue","fromSchema","schema","asn1","compareSchema","names","id","value","verified","Error","result","valueBlock","toString","asn1Inner","fromBER","valueHex","ex","OctetString","toSchema","toBER","Sequence","ObjectIdentifier","Constructed","idBlock","tagClass","tagNumber","toJSON","memberName","Any","memberValue","Object","keys","length","name","blockName"],"mappings":"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","file":"CertBag.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class CertBag\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description certId\r\n\t\t */\r\n\t\tthis.certId = getParametersValue(parameters, \"certId\", CertBag.defaultValues(\"certId\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @description certValue\r\n\t\t */\r\n\t\tthis.certValue = getParametersValue(parameters, \"certValue\", CertBag.defaultValues(\"certValue\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @description parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", CertBag.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"certValue\":\r\n\t\t\t\treturn (new asn1js.Any());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"certValue\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//CertBag ::= SEQUENCE {\r\n\t\t//    certId    BAG-TYPE.&id   ({CertTypes}),\r\n\t\t//    certValue [0] EXPLICIT BAG-TYPE.&Type ({CertTypes}{@certId})\r\n\t\t//}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [id]\r\n\t\t * @property {string} [value]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.value || \"value\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid \r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tid: \"certId\",\r\n\t\t\t\t\tvalue: \"certValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertBag\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Get internal properties from parsed schema \r\n\t\tthis.certId = asn1.result.certId.valueBlock.toString();\r\n\t\tthis.certValue = asn1.result.certValue;\r\n\t\t\r\n\t\tswitch(this.certId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.9.22.1\": // x509Certificate\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.parsedValue = new Certificate({ schema: asn1Inner.result });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex) // In some realizations the same OID used for attribute certificates\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.parsedValue = new AttributeCertificateV2({ schema: asn1Inner.result });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.9.22.3\": // attributeCertificate - (!!!) THIS OID IS SUBJECT FOR CHANGE IN FUTURE (!!!)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);\r\n\t\t\t\t\tthis.parsedValue = new AttributeCertificateV2({ schema: asn1Inner.result });\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.9.22.2\": // sdsiCertificate\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect \\\"certId\\\" value in CertBag: ${this.certId}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tif(\"parsedValue\" in this)\r\n\t\t{\r\n\t\t\tif(\"acinfo\" in this.parsedValue) // attributeCertificate\r\n\t\t\t\tthis.certId = \"1.2.840.113549.1.9.22.3\";\r\n\t\t\telse // x509Certificate\r\n\t\t\t\tthis.certId = \"1.2.840.113549.1.9.22.1\";\r\n\r\n\t\t\tthis.certValue = new asn1js.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\r\n\t\t}\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.certId }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [((\"toSchema\" in this.certValue) ? this.certValue.toSchema() : this.certValue)]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcertId: this.certId,\r\n\t\t\tcertValue: this.certValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}