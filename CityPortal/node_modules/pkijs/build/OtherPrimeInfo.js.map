{"version":3,"sources":["../src/OtherPrimeInfo.js"],"names":["asn1js","OtherPrimeInfo","parameters","prime","defaultValues","exponent","coefficient","fromSchema","schema","fromJSON","json","asn1","compareSchema","names","verified","Error","result","convertFromDER","Sequence","value","convertToDER","r","valueBlock","valueHex","d","t","Integer","memberName","name","blockName"],"mappings":"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","file":"OtherPrimeInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64 } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class OtherPrimeInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherPrimeInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description prime\r\n\t\t */\r\n\t\tthis.prime = getParametersValue(parameters, \"prime\", OtherPrimeInfo.defaultValues(\"prime\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description exponent\r\n\t\t */\r\n\t\tthis.exponent = getParametersValue(parameters, \"exponent\", OtherPrimeInfo.defaultValues(\"exponent\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description coefficient\r\n\t\t */\r\n\t\tthis.coefficient = getParametersValue(parameters, \"coefficient\", OtherPrimeInfo.defaultValues(\"coefficient\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"prime\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"exponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"coefficient\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherPrimeInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//OtherPrimeInfo ::= Sequence {\r\n\t\t//    prime             Integer,  -- ri\r\n\t\t//    exponent          Integer,  -- di\r\n\t\t//    coefficient       Integer   -- ti\r\n\t\t//}\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} prime\r\n\t\t * @property {string} exponent\r\n\t\t * @property {string} coefficient\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.prime || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.exponent || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.coefficient || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherPrimeInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tprime: \"prime\",\r\n\t\t\t\t\texponent: \"exponent\",\r\n\t\t\t\t\tcoefficient: \"coefficient\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherPrimeInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.prime = asn1.result.prime.convertFromDER();\r\n\t\tthis.exponent = asn1.result.exponent.convertFromDER();\r\n\t\tthis.coefficient = asn1.result.coefficient.convertFromDER();\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.prime.convertToDER(),\r\n\t\t\t\tthis.exponent.convertToDER(),\r\n\t\t\t\tthis.coefficient.convertToDER()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tr: toBase64(arrayBufferToString(this.prime.valueBlock.valueHex), true, true),\r\n\t\t\td: toBase64(arrayBufferToString(this.exponent.valueBlock.valueHex), true, true),\r\n\t\t\tt: toBase64(arrayBufferToString(this.coefficient.valueBlock.valueHex), true, true)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"r\" in json)\r\n\t\t\tthis.prime = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.r, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"r\\\"\");\r\n\r\n\t\tif(\"d\" in json)\r\n\t\t\tthis.exponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.d, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\r\n\r\n\t\tif(\"t\" in json)\r\n\t\t\tthis.coefficient = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.t, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"t\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}