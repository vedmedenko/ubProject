{"version":3,"sources":["../src/AttributeTypeAndValue.js"],"names":["asn1js","AttributeTypeAndValue","parameters","type","defaultValues","value","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","valueBlock","toString","typeValue","Sequence","ObjectIdentifier","_object","Object","keys","length","toJSON","compareTo","Utf8String","BmpString","UniversalString","NumericString","PrintableString","TeletexString","VideotexString","IA5String","GraphicString","VisibleString","GeneralString","CharacterString","value1","value2","localeCompare","valueBeforeDecode","ArrayBuffer","memberName","name","blockName","Any"],"mappings":"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","file":"AttributeTypeAndValue.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer } from \"pvutils\";\r\nimport { stringPrep } from \"./common.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AttributeTypeAndValue\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeTypeAndValue class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description type\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", AttributeTypeAndValue.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @description Value of the AttributeTypeAndValue class\r\n\t\t */\r\n\t\tthis.value = getParametersValue(parameters, \"value\", AttributeTypeAndValue.defaultValues(\"value\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeTypeAndValue class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//AttributeTypeAndValue ::= Sequence {\r\n\t\t//    type     AttributeType,\r\n\t\t//    value    AttributeValue }\r\n\t\t//\r\n\t\t//AttributeType ::= OBJECT IDENTIFIER\r\n\t\t//\r\n\t\t//AttributeValue ::= ANY -- DEFINED BY AttributeType\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName] Name for entire block\r\n\t\t * @property {string} [type] Name for \"type\" element\r\n\t\t * @property {string} [value] Name for \"value\" element\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.type || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.value || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\t/**\r\n\t\t * @type {{verified: boolean}|{verified: boolean, result: {type: Object, typeValue: Object}}}\r\n\t\t */\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeTypeAndValue.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttype: \"type\",\r\n\t\t\t\t\tvalue: \"typeValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ATTR_TYPE_AND_VALUE\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.type.valueBlock.toString();\r\n\t\tthis.value = asn1.result.typeValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.type }),\r\n\t\t\t\tthis.value\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttype: this.type\r\n\t\t};\r\n\r\n\t\tif(Object.keys(this.value).length !== 0)\r\n\t\t\t_object.value = this.value.toJSON();\r\n\t\telse\r\n\t\t\t_object.value = this.value;\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare two AttributeTypeAndValue values, or AttributeTypeAndValue with ArrayBuffer value\r\n\t * @param {(AttributeTypeAndValue|ArrayBuffer)} compareTo The value compare to current\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(compareTo)\r\n\t{\r\n\t\tif(compareTo instanceof AttributeTypeAndValue)\r\n\t\t{\r\n\t\t\tif(this.type !== compareTo.type)\r\n\t\t\t\treturn false;\r\n\t\t\t\r\n\t\t\tif(((this.value instanceof asn1js.Utf8String) && (compareTo.value instanceof asn1js.Utf8String)) ||\r\n\t\t\t\t((this.value instanceof asn1js.BmpString) && (compareTo.value instanceof asn1js.BmpString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.UniversalString) && (compareTo.value instanceof asn1js.UniversalString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.NumericString) && (compareTo.value instanceof asn1js.NumericString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.PrintableString) && (compareTo.value instanceof asn1js.PrintableString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.TeletexString) && (compareTo.value instanceof asn1js.TeletexString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.VideotexString) && (compareTo.value instanceof asn1js.VideotexString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.IA5String) && (compareTo.value instanceof asn1js.IA5String)) ||\r\n\t\t\t\t((this.value instanceof asn1js.GraphicString) && (compareTo.value instanceof asn1js.GraphicString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.VisibleString) && (compareTo.value instanceof asn1js.VisibleString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.GeneralString) && (compareTo.value instanceof asn1js.GeneralString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.CharacterString) && (compareTo.value instanceof asn1js.CharacterString)))\r\n\t\t\t{\r\n\t\t\t\tconst value1 = stringPrep(this.value.valueBlock.value);\r\n\t\t\t\tconst value2 = stringPrep(compareTo.value.valueBlock.value);\r\n\t\t\t\t\r\n\t\t\t\tif(value1.localeCompare(value2) !== 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse // Comparing as two ArrayBuffers\r\n\t\t\t{\r\n\t\t\t\tif(isEqualBuffer(this.value.valueBeforeDecode, compareTo.value.valueBeforeDecode) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tif(compareTo instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.value.valueBeforeDecode, compareTo);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}