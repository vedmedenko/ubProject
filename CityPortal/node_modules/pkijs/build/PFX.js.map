{"version":3,"sources":["../src/PFX.js"],"names":["asn1js","PFX","parameters","version","defaultValues","authSafe","macData","parsedValue","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","outputArray","Integer","value","toSchema","push","Sequence","output","toJSON","Object","Promise","reject","sequence","resolve","crypto","integrityMode","saltBuffer","ArrayBuffer","saltView","Uint8Array","data","authenticatedSafe","toBER","view","contentType","content","OctetString","valueHex","engine","subtle","name","then","stampDataWithPassword","password","hashAlgorithm","hmacHashAlgorithm","salt","iterationCount","iterations","contentToStamp","mac","digestAlgorithm","algorithmId","digest","macSalt","error","toBeSigned","cmsSigned","encapContentInfo","eContentType","eContent","certificates","signingCertificate","signedAttr","type","values","ObjectIdentifier","UTCTime","valueDate","Date","signerInfos","sid","issuer","serialNumber","signedAttrs","attributes","sign","privateKey","checkIntegrity","authSafeContent","isConstructed","contentValue","fromBER","offset","verifyDataStampedWithPassword","contentToVerify","signatureToVerify","idBlock","i","length","verify","signer","checkChain","memberName","memberValue","compareWithDefault","keys","optional"],"mappings":"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","file":"PFX.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf } from \"pvutils\";\r\nimport { getCrypto, getEngine, getRandomValues, getOIDByAlgorithm, getAlgorithmByOID } from \"./common.js\";\r\nimport ContentInfo from \"./ContentInfo.js\";\r\nimport MacData from \"./MacData.js\";\r\nimport DigestInfo from \"./DigestInfo.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport SignedData from \"./SignedData.js\";\r\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport SignerInfo from \"./SignerInfo.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport SignedAndUnsignedAttributes from \"./SignedAndUnsignedAttributes.js\";\r\nimport AuthenticatedSafe from \"./AuthenticatedSafe.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class PFX \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PFX class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PFX.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {ContentInfo}\r\n\t\t * @description authSafe\r\n\t\t */\r\n\t\tthis.authSafe = getParametersValue(parameters, \"authSafe\", PFX.defaultValues(\"authSafe\"));\r\n\t\t\r\n\t\tif(\"macData\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {MacData}\r\n\t\t\t * @description macData\r\n\t\t\t */\r\n\t\t\tthis.macData = getParametersValue(parameters, \"macData\", PFX.defaultValues(\"macData\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @description parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", PFX.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 3;\r\n\t\t\tcase \"authSafe\":\r\n\t\t\t\treturn (new ContentInfo());\r\n\t\t\tcase \"macData\":\r\n\t\t\t\treturn (new MacData());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PFX class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === PFX.defaultValues(memberName));\r\n\t\t\tcase \"authSafe\":\r\n\t\t\t\treturn ((ContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(ContentInfo.compareWithDefault(\"content\", memberValue.content)));\r\n\t\t\tcase \"macData\":\r\n\t\t\t\treturn ((MacData.compareWithDefault(\"mac\", memberValue.mac)) &&\r\n\t\t\t\t(MacData.compareWithDefault(\"macSalt\", memberValue.macSalt)) &&\r\n\t\t\t\t(MacData.compareWithDefault(\"iterations\", memberValue.iterations)));\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PFX class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//PFX ::= SEQUENCE {\r\n\t\t//    version\t\tINTEGER {v3(3)}(v3,...),\r\n\t\t//    authSafe\tContentInfo,\r\n\t\t//    macData    \tMacData OPTIONAL\r\n\t\t//}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [authSafe]\r\n\t\t * @property {string} [macData]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"version\") }),\r\n\t\t\t\tContentInfo.schema(names.authSafe || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"authSafe\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tMacData.schema(names.macData || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"macData\",\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPFX.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tauthSafe: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"authSafe\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmacData: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"macData\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PFX\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.authSafe = new ContentInfo({ schema: asn1.result.authSafe });\r\n\t\t\r\n\t\tif(\"macData\" in asn1.result)\r\n\t\t\tthis.macData = new MacData({ schema: asn1.result.macData });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.authSafe.toSchema()\r\n\t\t];\r\n\t\t\r\n\t\tif(\"macData\" in this)\r\n\t\t\toutputArray.push(this.macData.toSchema());\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst output = {\r\n\t\t\tversion: this.version,\r\n\t\t\tauthSafe: this.authSafe.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"macData\" in this)\r\n\t\t\toutput.macData = this.macData.toJSON();\r\n\t\t\r\n\t\treturn output;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making ContentInfo from \"parsedValue\" object\r\n\t * @param {Object} parameters Parameters, specific to each \"integrity mode\"\r\n\t */\r\n\tmakeInternalValues(parameters = {})\r\n\t{\r\n\t\t//region Check mandatory parameter\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"parsedValue\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Please call \\\"parseValues\\\" function first in order to make \\\"parsedValue\\\" data\");\r\n\t\t\r\n\t\tif((\"integrityMode\" in this.parsedValue) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"integrityMode\\\" inside \\\"parsedValue\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Makes values for each particular integrity mode\r\n\t\t//region Check that we do have neccessary fields in \"parsedValue\" object\r\n\t\tif((\"authenticatedSafe\" in this.parsedValue) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"authenticatedSafe\\\" in \\\"parsedValue\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(this.parsedValue.integrityMode)\r\n\t\t{\r\n\t\t\t//region HMAC-based integrity\r\n\t\t\tcase 0:\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"iterations\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterations\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"pbkdf2HashAlgorithm\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"pbkdf2HashAlgorithm\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"hmacHashAlgorithm\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"password\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\t\t\r\n\t\t\t\t\tgetRandomValues(saltView);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst data = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\r\n\t\t\t\t\tconst view = new Uint8Array(data);\r\n\r\n\t\t\t\t\tthis.authSafe = new ContentInfo({\r\n\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\",\r\n\t\t\t\t\t\tcontent: new asn1js.OctetString({ valueHex: data })\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Call current crypto engine for making HMAC-based data stamp\r\n\t\t\t\t\tconst engine = getEngine();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"stampDataWithPassword\" in engine.subtle) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`No support for \\\"stampDataWithPassword\\\" in current engine \\\"${engine.name}\\\"`);\r\n\t\t\t\t\t\r\n\t\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t\t\tengine.subtle.stampDataWithPassword({\r\n\t\t\t\t\t\t\tpassword: parameters.password,\r\n\t\t\t\t\t\t\thashAlgorithm: parameters.hmacHashAlgorithm,\r\n\t\t\t\t\t\t\tsalt: saltBuffer,\r\n\t\t\t\t\t\t\titerationCount: parameters.iterations,\r\n\t\t\t\t\t\t\tcontentToStamp: data\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Make \"MacData\" values\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.macData = new MacData({\r\n\t\t\t\t\t\t\t\tmac: new DigestInfo({\r\n\t\t\t\t\t\t\t\t\tdigestAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\t\t\t\talgorithmId: getOIDByAlgorithm({ name: parameters.hmacHashAlgorithm })\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t\tdigest: new asn1js.OctetString({ valueHex: result })\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tmacSalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\t\t\t\t\t\titerations: parameters.iterations\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\t//region publicKey-based integrity\r\n\t\t\tcase 1:\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"signingCertificate\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"signingCertificate\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"privateKey\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"privateKey\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Making data to be signed\r\n\t\t\t\t\t// NOTE: all internal data for \"authenticatedSafe\" must be already prepared.\r\n\t\t\t\t\t// Thus user must call \"makeValues\" for all internal \"SafeContent\" value with appropriate parameters.\r\n\t\t\t\t\t// Or user can choose to use values from initial parsing of existing PKCS#12 data.\r\n\t\t\t\t\r\n\t\t\t\t\tconst toBeSigned = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tconst cmsSigned = new SignedData({\r\n\t\t\t\t\t\tversion: 1,\r\n\t\t\t\t\t\tencapContentInfo: new EncapsulatedContentInfo({\r\n\t\t\t\t\t\t\teContentType: \"1.2.840.113549.1.7.1\", // \"data\" content type\r\n\t\t\t\t\t\t\teContent: new asn1js.OctetString({ valueHex: toBeSigned })\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tcertificates: [parameters.signingCertificate]\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Making additional attributes for CMS Signed Data\r\n\t\t\t\t\t//region Create a message digest\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => crypto.digest({ name: parameters.hashAlgorithm }, new Uint8Array(toBeSigned))\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Combine all signed extensions\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\tconst signedAttr = [];\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region contentType\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.3\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.ObjectIdentifier({ value: \"1.2.840.113549.1.7.1\" })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region signingTime\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.5\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.UTCTime({ valueDate: new Date() })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region messageDigest\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.4\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.OctetString({ valueHex: result })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region Making final value for \"SignerInfo\" type\r\n\t\t\t\t\t\t\tcmsSigned.signerInfos.push(new SignerInfo({\r\n\t\t\t\t\t\t\t\tversion: 1,\r\n\t\t\t\t\t\t\t\tsid: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\t\t\tissuer: parameters.signingCertificate.issuer,\r\n\t\t\t\t\t\t\t\t\tserialNumber: parameters.signingCertificate.serialNumber\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tsignedAttrs: new SignedAndUnsignedAttributes({\r\n\t\t\t\t\t\t\t\t\ttype: 0,\r\n\t\t\t\t\t\t\t\t\tattributes: signedAttr\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during making digest for message: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Signing CMS Signed Data\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => cmsSigned.sign(parameters.privateKey, 0, parameters.hashAlgorithm)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Making final CMS_CONTENT_INFO type\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.authSafe = new ContentInfo({\r\n\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.2\",\r\n\t\t\t\t\t\t\t\tcontent: cmsSigned.toSchema(true)\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during making signature: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\t//region default\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Parameter \\\"integrityMode\\\" has unknown value: ${parameters.integrityMode}`);\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Check input data from \"parameters\" \r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"checkIntegrity\" in parameters) === false)\r\n\t\t\tparameters.checkIntegrity = true;\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Get a \"crypto\" extension \r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Create value for \"this.parsedValue.authenticatedSafe\" and check integrity \r\n\t\tthis.parsedValue = {};\r\n\t\t\r\n\t\tswitch(this.authSafe.contentType)\r\n\t\t{\r\n\t\t\t//region data \r\n\t\t\tcase \"1.2.840.113549.1.7.1\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"password\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Integrity based on HMAC\r\n\t\t\t\t\tthis.parsedValue.integrityMode = 0;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\tif((this.authSafe.content instanceof asn1js.OctetString) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check we have \"constructive encoding\" for AuthSafe content\r\n\t\t\t\t\tlet authSafeContent = new ArrayBuffer(0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(this.authSafe.content.valueBlock.isConstructed)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(const contentValue of this.authSafe.content.valueBlock.value)\r\n\t\t\t\t\t\t\tauthSafeContent = utilConcatBuf(authSafeContent, contentValue.valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tauthSafeContent = this.authSafe.content.valueBlock.valueHex;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(authSafeContent);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Set \"authenticatedSafe\" value\r\n\t\t\t\t\tthis.parsedValue.authenticatedSafe = new AuthenticatedSafe({ schema: asn1.result });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check integrity\r\n\t\t\t\t\tif(parameters.checkIntegrity)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that \"MacData\" exists\r\n\t\t\t\t\t\tif((\"macData\" in this) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent \\\"macData\\\" value, can not check PKCS#12 data integrity\");\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(this.macData.mac.digestAlgorithm.algorithmId);\r\n\t\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported digest algorithm: ${this.macData.mac.digestAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Call current crypto engine for verifying HMAC-based data stamp\r\n\t\t\t\t\t\tconst engine = getEngine();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t\t\t\tengine.subtle.verifyDataStampedWithPassword({\r\n\t\t\t\t\t\t\t\tpassword: parameters.password,\r\n\t\t\t\t\t\t\t\thashAlgorithm: hashAlgorithm.name,\r\n\t\t\t\t\t\t\t\tsalt: this.macData.macSalt.valueBlock.valueHex,\r\n\t\t\t\t\t\t\t\titerationCount: this.macData.iterations,\r\n\t\t\t\t\t\t\t\tcontentToVerify: authSafeContent,\r\n\t\t\t\t\t\t\t\tsignatureToVerify: this.macData.mac.digest.valueBlock.valueHex\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t//region Verify HMAC signature\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(result === false)\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(\"Integrity for the PKCS#12 data is broken!\");\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion \r\n\t\t\t//region signedData \r\n\t\t\tcase \"1.2.840.113549.1.7.2\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Integrity based on signature using public key\r\n\t\t\t\t\tthis.parsedValue.integrityMode = 1;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Parse CMS Signed Data\r\n\t\t\t\t\tconst cmsSigned = new SignedData({ schema: this.authSafe.content });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\tif((\"eContent\" in cmsSigned.encapContentInfo) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent of attached data in \\\"cmsSigned.encapContentInfo\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((cmsSigned.encapContentInfo.eContent instanceof asn1js.OctetString) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"cmsSigned.encapContentInfo.eContent\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Create correct data block for verification\r\n\t\t\t\t\tlet data = new ArrayBuffer(0);\r\n\t\t\t\t\r\n\t\t\t\t\tif(cmsSigned.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\tdata = cmsSigned.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(let i = 0; i < cmsSigned.encapContentInfo.eContent.valueBlock.value.length; i++)\r\n\t\t\t\t\t\t\tdata = utilConcatBuf(data, cmsSigned.encapContentInfo.eContent.valueBlock.value[i].valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(data);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Set \"authenticatedSafe\" value\r\n\t\t\t\t\tthis.parsedValue.authenticatedSafe = new AuthenticatedSafe({ schema: asn1.result });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check integrity\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => cmsSigned.verify({ signer: 0, checkChain: false })\r\n\t\t\t\t\t).then(\r\n\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(result === false)\r\n\t\t\t\t\t\t\t\treturn Promise.reject(\"Integrity for the PKCS#12 data is broken!\");\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during integrity verification: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion   \r\n\t\t\t//region default \r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect value for \\\"this.authSafe.contentType\\\": ${this.authSafe.contentType}`);\r\n\t\t\t//endregion \r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Return result of the function \r\n\t\treturn sequence.then(\r\n\t\t\t() => this,\r\n\t\t\terror => Promise.reject(`Error during parsing: ${error}`)\r\n\t\t);\r\n\t\t//endregion   \r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}