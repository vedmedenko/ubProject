{"version":3,"sources":["../src/AlgorithmIdentifier.js"],"names":["asn1js","AlgorithmIdentifier","parameters","algorithmId","defaultValues","algorithmParams","fromSchema","schema","asn1","compareSchema","names","algorithmIdentifier","verified","Error","result","algorithm","valueBlock","toString","params","outputArray","push","ObjectIdentifier","value","Any","Sequence","object","toJSON","JSON","stringify","memberName","memberValue","name","blockName","optional"],"mappings":"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","file":"AlgorithmIdentifier.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AlgorithmIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AlgorithmIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t * @property {string} [algorithmId] ObjectIdentifier for algorithm (string representation)\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description ObjectIdentifier for algorithm (string representation)\r\n\t\t */\r\n\t\tthis.algorithmId = getParametersValue(parameters, \"algorithmId\", AlgorithmIdentifier.defaultValues(\"algorithmId\"));\r\n\r\n\t\tif(\"algorithmParams\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Object}\r\n\t\t\t * @description Any algorithm parameters\r\n\t\t\t */\r\n\t\t\tthis.algorithmParams = getParametersValue(parameters, \"algorithmParams\", AlgorithmIdentifier.defaultValues(\"algorithmParams\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithmId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"algorithmParams\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AlgorithmIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithmId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"algorithmParams\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AlgorithmIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//AlgorithmIdentifier  ::=  Sequence  {\r\n\t\t//    algorithm               OBJECT IDENTIFIER,\r\n\t\t//    parameters              ANY DEFINED BY algorithm OPTIONAL  }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} algorithmIdentifier ObjectIdentifier for the algorithm\r\n\t\t * @property {string} algorithmParams Any algorithm parameters\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || false),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.algorithmIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.algorithmParams || \"\"), optional: true })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\t/**\r\n\t\t * @type {{verified: boolean}|{verified: boolean, result: {algorithm: Object, params: Object}}}\r\n\t\t */\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAlgorithmIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\talgorithmIdentifier: \"algorithm\",\r\n\t\t\t\t\talgorithmParams: \"params\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AlgorithmIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.algorithmId = asn1.result.algorithm.valueBlock.toString();\r\n\t\tif(\"params\" in asn1.result)\r\n\t\t\tthis.algorithmParams = asn1.result.params;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.algorithmId }));\r\n\t\tif((\"algorithmParams\" in this) && ((this.algorithmParams instanceof asn1js.Any) === false))\r\n\t\t\toutputArray.push(this.algorithmParams);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\talgorithmId: this.algorithmId\r\n\t\t};\r\n\r\n\t\tif((\"algorithmParams\" in this) && ((this.algorithmParams instanceof asn1js.Any) === false))\r\n\t\t\tobject.algorithmParams = this.algorithmParams.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Check that two \"AlgorithmIdentifiers\" are equal\r\n\t * @param {AlgorithmIdentifier} algorithmIdentifier\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(algorithmIdentifier)\r\n\t{\r\n\t\t//region Check input type\r\n\t\tif((algorithmIdentifier instanceof AlgorithmIdentifier) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Check \"algorithm_id\"\r\n\t\tif(this.algorithmId !== algorithmIdentifier.algorithmId)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Check \"algorithm_params\"\r\n\t\tif(\"algorithmParams\" in this)\r\n\t\t{\r\n\t\t\tif(\"algorithmParams\" in algorithmIdentifier)\r\n\t\t\t\treturn JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif(\"algorithmParams\" in algorithmIdentifier)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}