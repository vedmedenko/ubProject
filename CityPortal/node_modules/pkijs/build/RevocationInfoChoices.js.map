{"version":3,"sources":["../src/RevocationInfoChoices.js"],"names":["asn1js","RevocationInfoChoices","parameters","crls","defaultValues","otherRevocationInfos","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","element","idBlock","tagClass","push","outputArray","Array","from","toSchema","tagNumber","Set","value","toJSON","memberName","name","blockName","Repeated","Choice","Constructed","ObjectIdentifier","Any"],"mappings":"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","file":"RevocationInfoChoices.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\r\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class RevocationInfoChoices \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RevocationInfoChoices class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<CertificateRevocationList>}\r\n\t\t * @description crls\r\n\t\t */\r\n\t\tthis.crls = getParametersValue(parameters, \"crls\", RevocationInfoChoices.defaultValues(\"crls\"));\r\n\t\t/**\r\n\t\t * @type {Array.<OtherRevocationInfoFormat>}\r\n\t\t * @description otherRevocationInfos\r\n\t\t */\r\n\t\tthis.otherRevocationInfos = getParametersValue(parameters, \"otherRevocationInfos\", RevocationInfoChoices.defaultValues(\"otherRevocationInfos\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"otherRevocationInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RevocationInfoChoices class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//RevocationInfoChoices ::= SET OF RevocationInfoChoice\r\n\t\t\r\n\t\t//RevocationInfoChoice ::= CHOICE {\r\n\t\t//    crl CertificateList,\r\n\t\t//    other [1] IMPLICIT OtherRevocationInfoFormat }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [crls]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.crls || \"\"),\r\n\t\t\t\t\tvalue: new asn1js.Choice({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tCertificateRevocationList.schema(),\r\n\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.ObjectIdentifier(),\r\n\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRevocationInfoChoices.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcrls: \"crls\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CSM_REVOCATION_INFO_CHOICES\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tfor(const element of asn1.result.crls)\r\n\t\t{\r\n\t\t\tif(element.idBlock.tagClass === 1)\r\n\t\t\t\tthis.crls.push(new CertificateRevocationList({ schema: element }));\r\n\t\t\telse\r\n\t\t\t\tthis.otherRevocationInfos.push(new OtherRevocationInfoFormat({ schema: element }));\r\n\t\t}\r\n\t\t\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output set\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(...Array.from(this.crls, element => element.toSchema()));\r\n\t\t\r\n\t\toutputArray.push(...Array.from(this.otherRevocationInfos, element =>\r\n\t\t{\r\n\t\t\tconst schema = element.toSchema();\r\n\t\t\t\r\n\t\t\tschema.idBlock.tagClass = 3;\r\n\t\t\tschema.idBlock.tagNumber = 1;\r\n\t\t\t\r\n\t\t\treturn schema;\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcrls: Array.from(this.crls, element => element.toJSON()),\r\n\t\t\totherRevocationInfos: Array.from(this.otherRevocationInfos, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}