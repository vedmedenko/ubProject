{"version":3,"sources":["../src/RevokedCertificate.js"],"names":["asn1js","RevokedCertificate","parameters","userCertificate","defaultValues","revocationDate","crlEntryExtensions","fromSchema","schema","asn1","compareSchema","verified","Error","result","outputArray","toSchema","push","Sequence","value","object","toJSON","memberName","Integer","names","name","blockName","utcTimeName","generalTimeName"],"mappings":"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","file":"RevokedCertificate.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport Time from \"./Time.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class RevokedCertificate\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RevokedCertificate class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description userCertificate\r\n\t\t */\r\n\t\tthis.userCertificate = getParametersValue(parameters, \"userCertificate\", RevokedCertificate.defaultValues(\"userCertificate\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @description revocationDate\r\n\t\t */\r\n\t\tthis.revocationDate = getParametersValue(parameters, \"revocationDate\", RevokedCertificate.defaultValues(\"revocationDate\"));\r\n\r\n\t\tif(\"crlEntryExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Extensions}\r\n\t\t\t * @description crlEntryExtensions\r\n\t\t\t */\r\n\t\t\tthis.crlEntryExtensions = getParametersValue(parameters, \"crlEntryExtensions\", RevokedCertificate.defaultValues(\"crlEntryExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"userCertificate\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"revocationDate\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"crlEntryExtensions\":\r\n\t\t\t\treturn new Extensions();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RevokedCertificate class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [userCertificate]\r\n\t\t * @property {string} [revocationDate]\r\n\t\t * @property {string} [crlEntryExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.userCertificate || \"userCertificate\") }),\r\n\t\t\t\tTime.schema({\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tutcTimeName: (names.revocationDate || \"revocationDate\"),\r\n\t\t\t\t\t\tgeneralTimeName: (names.revocationDate || \"revocationDate\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tExtensions.schema({\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.crlEntryExtensions || \"crlEntryExtensions\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}, true)\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRevokedCertificate.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for REV_CERT\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.userCertificate = asn1.result.userCertificate;\r\n\t\tthis.revocationDate = new Time({ schema: asn1.result.revocationDate });\r\n\r\n\t\tif(\"crlEntryExtensions\" in asn1.result)\r\n\t\t\tthis.crlEntryExtensions = new Extensions({ schema: asn1.result.crlEntryExtensions });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tthis.userCertificate,\r\n\t\t\tthis.revocationDate.toSchema()\r\n\t\t];\r\n\r\n\t\tif(\"crlEntryExtensions\" in this)\r\n\t\t\toutputArray.push(this.crlEntryExtensions.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tuserCertificate: this.userCertificate.toJSON(),\r\n\t\t\trevocationDate: this.revocationDate.toJSON\r\n\t\t};\r\n\r\n\t\tif(\"crlEntryExtensions\" in this)\r\n\t\t\tobject.crlEntryExtensions = this.crlEntryExtensions.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}