{"version":3,"sources":["../src/AltName.js"],"names":["asn1js","AltName","parameters","altNames","defaultValues","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","Array","from","element","Sequence","value","toSchema","toJSON","memberName","name","blockName","Repeated"],"mappings":";;;;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;;;;;;;;;AACA;AACA;;;IAGqBC,O;AAEpB;AACA;;;;;AAKA,oBACA;AAAA,MADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;AACA;;;;AAIA,OAAKC,QAAL,GAAgB,iCAAmBD,UAAnB,EAA+B,UAA/B,EAA2CD,QAAQG,aAAR,CAAsB,UAAtB,CAA3C,CAAhB;AACA;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKG,UAAL,CAAgBH,WAAWI,MAA3B;AACD;AACA;AACD;AACA;;;;;;;;;AA4CA;AACA;;;;6BAIWA,M,EACX;AACC;AACA,OAAMC,OAAOP,OAAOQ,aAAP,CAAqBF,MAArB,EACZA,MADY,EAEZL,QAAQK,MAAR,CAAe;AACdG,WAAO;AACNN,eAAU;AADJ;AADO,IAAf,CAFY,CAAb;;AASA,OAAGI,KAAKG,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,iEAAV,CAAN;AACD;;AAEA;AACA,OAAG,cAAcJ,KAAKK,MAAtB,EACC,KAAKT,QAAL,GAAgBU,MAAMC,IAAN,CAAWP,KAAKK,MAAL,CAAYT,QAAvB,EAAiC;AAAA,WAAW,0BAAgB,EAAEG,QAAQS,OAAV,EAAhB,CAAX;AAAA,IAAjC,CAAhB;AACD;AACA;AACD;AACA;;;;;;;6BAKA;AACC;AACA,UAAQ,IAAIf,OAAOgB,QAAX,CAAoB;AAC3BC,WAAOJ,MAAMC,IAAN,CAAW,KAAKX,QAAhB,EAA0B;AAAA,YAAWY,QAAQG,QAAR,EAAX;AAAA,KAA1B;AADoB,IAApB,CAAR;AAGA;AACA;AACD;AACA;;;;;;;2BAKA;AACC,UAAO;AACNf,cAAUU,MAAMC,IAAN,CAAW,KAAKX,QAAhB,EAA0B;AAAA,YAAWY,QAAQI,MAAR,EAAX;AAAA,KAA1B;AADJ,IAAP;AAGA;AACD;;;;gCA1FqBC,U,EACrB;AACC,WAAOA,UAAP;AAEC,SAAK,UAAL;AACC,YAAO,EAAP;AACD;AACC,WAAM,IAAIT,KAAJ,6CAAoDS,UAApD,CAAN;AALF;AAOA;AACD;AACA;;;;;;;;2BAMA;AAAA,OADclB,UACd,uEAD2B,EAC3B;;AACC;AACA;AACA;AACA;;AAEA;;;;;AAKA,OAAMO,QAAQ,iCAAmBP,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAIF,OAAOgB,QAAX,CAAoB;AAC3BK,UAAOZ,MAAMa,SAAN,IAAmB,EADC;AAE3BL,WAAO,CACN,IAAIjB,OAAOuB,QAAX,CAAoB;AACnBF,WAAOZ,MAAMN,QAAN,IAAkB,EADN;AAEnBc,YAAO,sBAAYX,MAAZ;AAFY,KAApB,CADM;AAFoB,IAApB,CAAR;AASA;;;;;AAqDF;;;kBAxHqBL,O","file":"AltName.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AltName\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AltName class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<GeneralName>}\r\n\t\t * @description type\r\n\t\t */\r\n\t\tthis.altNames = getParametersValue(parameters, \"altNames\", AltName.defaultValues(\"altNames\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"altNames\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AltName class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// SubjectAltName OID ::= 2.5.29.17\r\n\t\t// IssuerAltName OID ::= 2.5.29.18\r\n\t\t//\r\n\t\t// AltName ::= GeneralNames\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [altNames]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.altNames || \"\"),\r\n\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAltName.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\taltNames: \"altNames\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AltName\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"altNames\" in asn1.result)\r\n\t\t\tthis.altNames = Array.from(asn1.result.altNames, element => new GeneralName({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.altNames, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\taltNames: Array.from(this.altNames, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}