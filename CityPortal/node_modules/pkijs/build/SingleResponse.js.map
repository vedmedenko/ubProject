{"version":3,"sources":["../src/SingleResponse.js"],"names":["asn1js","SingleResponse","parameters","certID","defaultValues","certStatus","thisUpdate","nextUpdate","singleExtensions","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","toDate","Array","from","valueBlock","value","element","outputArray","push","toSchema","GeneralizedTime","valueDate","Sequence","_object","toJSON","memberName","Date","memberValue","compareWithDefault","hashAlgorithm","issuerNameHash","issuerKeyHash","serialNumber","Object","keys","length","name","Choice","Primitive","idBlock","tagClass","tagNumber","lenBlockLength","Constructed","optional","Enumerated","lenBlock"],"mappings":"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","file":"SingleResponse.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport CertID from \"./CertID.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class SingleResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SingleResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {CertID}\r\n\t\t * @description certID\r\n\t\t */\r\n\t\tthis.certID = getParametersValue(parameters, \"certID\", SingleResponse.defaultValues(\"certID\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @description certStatus\r\n\t\t */\r\n\t\tthis.certStatus = getParametersValue(parameters, \"certStatus\", SingleResponse.defaultValues(\"certStatus\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @description thisUpdate\r\n\t\t */\r\n\t\tthis.thisUpdate = getParametersValue(parameters, \"thisUpdate\", SingleResponse.defaultValues(\"thisUpdate\"));\r\n\r\n\t\tif(\"nextUpdate\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Date}\r\n\t\t\t * @description nextUpdate\r\n\t\t\t */\r\n\t\t\tthis.nextUpdate = getParametersValue(parameters, \"nextUpdate\", SingleResponse.defaultValues(\"nextUpdate\"));\r\n\r\n\t\tif(\"singleExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @description singleExtensions\r\n\t\t\t */\r\n\t\t\tthis.singleExtensions = getParametersValue(parameters, \"singleExtensions\", SingleResponse.defaultValues(\"singleExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certID\":\r\n\t\t\t\treturn new CertID();\r\n\t\t\tcase \"certStatus\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tcase \"singleExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SingleResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certID\":\r\n\t\t\t\treturn ((CertID.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"issuerNameHash\", memberValue.issuerNameHash)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"issuerKeyHash\", memberValue.issuerKeyHash)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"serialNumber\", memberValue.serialNumber)));\r\n\t\t\tcase \"certStatus\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn (memberValue === SingleResponse.defaultValues(memberName));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SingleResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//SingleResponse ::= SEQUENCE {\r\n\t\t//    certID                       CertID,\r\n\t\t//    certStatus                   CertStatus,\r\n\t\t//    thisUpdate                   GeneralizedTime,\r\n\t\t//    nextUpdate         [0]       EXPLICIT GeneralizedTime OPTIONAL,\r\n\t\t//    singleExtensions   [1]       EXPLICIT Extensions OPTIONAL }\r\n\t\t//\r\n\t\t//CertStatus ::= CHOICE {\r\n\t\t//    good        [0]     IMPLICIT NULL,\r\n\t\t//    revoked     [1]     IMPLICIT RevokedInfo,\r\n\t\t//    unknown     [2]     IMPLICIT UnknownInfo }\r\n\t\t//\r\n\t\t//RevokedInfo ::= SEQUENCE {\r\n\t\t//    revocationTime              GeneralizedTime,\r\n\t\t//    revocationReason    [0]     EXPLICIT CRLReason OPTIONAL }\r\n\t\t//\r\n\t\t//UnknownInfo ::= NULL\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certID]\r\n\t\t * @property {string} [certStatus]\r\n\t\t * @property {string} [thisUpdate]\r\n\t\t * @property {string} [nextUpdate]\r\n\t\t * @property {string} [singleExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tCertID.schema(names.certID || {}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tlenBlockLength: 1 // The length contains one byte 0x00\r\n\t\t\t\t\t\t}), // IMPLICIT NULL (no \"value_block\")\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.GeneralizedTime(),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [new asn1js.Enumerated()]\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tlenBlock: { length: 1 }\r\n\t\t\t\t\t\t}) // IMPLICIT NULL (no \"value_block\")\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.thisUpdate || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.GeneralizedTime({ name: (names.nextUpdate || \"\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extensions.schema(names.singleExtensions || {})]\r\n\t\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSingleResponse.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcertID: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"certID\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcertStatus: \"certStatus\",\r\n\t\t\t\t\tthisUpdate: \"thisUpdate\",\r\n\t\t\t\t\tnextUpdate: \"nextUpdate\",\r\n\t\t\t\t\tsingleExtensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName:\r\n\t\t\t\t\t\t\t\t\"singleExtensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SingleResponse\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certID = new CertID({ schema: asn1.result.certID });\r\n\t\tthis.certStatus = asn1.result.certStatus;\r\n\t\tthis.thisUpdate = asn1.result.thisUpdate.toDate();\r\n\t\tif(\"nextUpdate\" in asn1.result)\r\n\t\t\tthis.nextUpdate = asn1.result.nextUpdate.toDate();\r\n\r\n\t\tif(\"singleExtensions\" in asn1.result)\r\n\t\t\tthis.singleExtensions = Array.from(asn1.result.singleExtensions.valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create value array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.certID.toSchema());\r\n\t\toutputArray.push(this.certStatus);\r\n\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.thisUpdate }));\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.nextUpdate }));\r\n\r\n\t\tif(\"singleExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.singleExtensions, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tcertID: this.certID.toJSON(),\r\n\t\t\tcertStatus: this.certStatus.toJSON(),\r\n\t\t\tthisUpdate: this.thisUpdate\r\n\t\t};\r\n\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\t_object.nextUpdate = this.nextUpdate;\r\n\r\n\t\tif(\"singleExtensions\" in this)\r\n\t\t\t_object.singleExtensions = Array.from(this.singleExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}