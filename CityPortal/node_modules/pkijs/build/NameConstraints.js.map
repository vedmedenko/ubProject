{"version":3,"sources":["../src/NameConstraints.js"],"names":["asn1js","NameConstraints","parameters","permittedSubtrees","defaultValues","excludedSubtrees","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","Array","from","element","outputArray","push","Constructed","optional","idBlock","tagClass","tagNumber","value","Sequence","toSchema","object","toJSON","memberName","name","blockName","Repeated"],"mappings":"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","file":"NameConstraints.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport GeneralSubtree from \"./GeneralSubtree.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class NameConstraints\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for NameConstraints class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"permittedSubtrees\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralSubtree>}\r\n\t\t\t * @description permittedSubtrees\r\n\t\t\t */\r\n\t\t\tthis.permittedSubtrees = getParametersValue(parameters, \"permittedSubtrees\", NameConstraints.defaultValues(\"permittedSubtrees\"));\r\n\r\n\t\tif(\"excludedSubtrees\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralSubtree>}\r\n\t\t\t * @description excludedSubtrees\r\n\t\t\t */\r\n\t\t\tthis.excludedSubtrees = getParametersValue(parameters, \"excludedSubtrees\", NameConstraints.defaultValues(\"excludedSubtrees\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"permittedSubtrees\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"excludedSubtrees\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for NameConstraints class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// NameConstraints OID ::= 2.5.29.30\r\n\t\t//\r\n\t\t//NameConstraints ::= SEQUENCE {\r\n\t\t//    permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\r\n\t\t//    excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [permittedSubtrees]\r\n\t\t * @property {string} [excludedSubtrees]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.permittedSubtrees || \"\"),\r\n\t\t\t\t\t\t\tvalue: GeneralSubtree.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.excludedSubtrees || \"\"),\r\n\t\t\t\t\t\t\tvalue: GeneralSubtree.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tNameConstraints.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tpermittedSubtrees: \"permittedSubtrees\",\r\n\t\t\t\t\texcludedSubtrees: \"excludedSubtrees\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for NameConstraints\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"permittedSubtrees\" in asn1.result)\r\n\t\t\tthis.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, element => new GeneralSubtree({ schema: element }));\r\n\r\n\t\tif(\"excludedSubtrees\" in asn1.result)\r\n\t\t\tthis.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, element => new GeneralSubtree({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"permittedSubtrees\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.permittedSubtrees, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"excludedSubtrees\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.excludedSubtrees, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\t\t\r\n\t\tif(\"permittedSubtrees\" in this)\r\n\t\t\tobject.permittedSubtrees = Array.from(this.permittedSubtrees, element => element.toJSON());\r\n\r\n\t\tif(\"excludedSubtrees\" in this)\r\n\t\t\tobject.excludedSubtrees = Array.from(this.excludedSubtrees, element => element.toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}