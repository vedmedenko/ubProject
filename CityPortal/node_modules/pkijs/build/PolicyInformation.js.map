{"version":3,"sources":["../src/PolicyInformation.js"],"names":["asn1js","PolicyInformation","parameters","policyIdentifier","defaultValues","policyQualifiers","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","valueBlock","toString","Array","from","element","outputArray","push","ObjectIdentifier","value","Sequence","toSchema","object","toJSON","memberName","name","blockName","optional","Repeated"],"mappings":"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","file":"PolicyInformation.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport PolicyQualifierInfo from \"./PolicyQualifierInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PolicyInformation\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PolicyInformation class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description policyIdentifier\r\n\t\t */\r\n\t\tthis.policyIdentifier = getParametersValue(parameters, \"policyIdentifier\", PolicyInformation.defaultValues(\"policyIdentifier\"));\r\n\r\n\t\tif(\"policyQualifiers\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<PolicyQualifierInfo>}\r\n\t\t\t * @description Value of the TIME class\r\n\t\t\t */\r\n\t\t\tthis.policyQualifiers = getParametersValue(parameters, \"policyQualifiers\", PolicyInformation.defaultValues(\"policyQualifiers\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"policyIdentifier\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"policyQualifiers\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PolicyInformation class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//PolicyInformation ::= SEQUENCE {\r\n\t\t//    policyIdentifier   CertPolicyId,\r\n\t\t//    policyQualifiers   SEQUENCE SIZE (1..MAX) OF\r\n\t\t//    PolicyQualifierInfo OPTIONAL }\r\n\t\t//\r\n\t\t//CertPolicyId ::= OBJECT IDENTIFIER\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [policyIdentifier]\r\n\t\t * @property {string} [policyQualifiers]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.policyIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.policyQualifiers || \"\"),\r\n\t\t\t\t\t\t\tvalue: PolicyQualifierInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPolicyInformation.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tpolicyIdentifier: \"policyIdentifier\",\r\n\t\t\t\t\tpolicyQualifiers: \"policyQualifiers\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PolicyInformation\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();\r\n\r\n\t\tif(\"policyQualifiers\" in asn1.result)\r\n\t\t\tthis.policyQualifiers = Array.from(asn1.result.policyQualifiers, element => new PolicyQualifierInfo({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.policyIdentifier }));\r\n\t\t\r\n\t\tif(\"policyQualifiers\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.policyQualifiers, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tpolicyIdentifier: this.policyIdentifier\r\n\t\t};\r\n\r\n\t\tif(\"policyQualifiers\" in this)\r\n\t\t\tobject.policyQualifiers = Array.from(this.policyQualifiers, element => element.toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}