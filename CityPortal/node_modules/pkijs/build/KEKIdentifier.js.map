{"version":3,"sources":["../src/KEKIdentifier.js"],"names":["asn1js","KEKIdentifier","parameters","keyIdentifier","defaultValues","date","other","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","outputArray","push","toSchema","Sequence","value","_object","toJSON","memberName","OctetString","GeneralizedTime","memberValue","isEqual","year","month","day","hour","minute","second","millisecond","compareWithDefault","keyAttrId","name","optional"],"mappings":";;;;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;;;;;;;;;AACA;AACA;;;IAGqBC,a;AAEpB;AACA;;;;;AAKA,0BACA;AAAA,MADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;AACA;;;;AAIA,OAAKC,aAAL,GAAqB,iCAAmBD,UAAnB,EAA+B,eAA/B,EAAgDD,cAAcG,aAAd,CAA4B,eAA5B,CAAhD,CAArB;;AAEA,MAAG,UAAUF,UAAb;AACC;;;;AAIA,QAAKG,IAAL,GAAY,iCAAmBH,UAAnB,EAA+B,MAA/B,EAAuCD,cAAcG,aAAd,CAA4B,MAA5B,CAAvC,CAAZ;AACD,MAAG,WAAWF,UAAd;AACC;;;;AAIA,QAAKI,KAAL,GAAa,iCAAmBJ,UAAnB,EAA+B,OAA/B,EAAwCD,cAAcG,aAAd,CAA4B,OAA5B,CAAxC,CAAb;AACD;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKK,UAAL,CAAgBL,WAAWM,MAA3B;AACD;AACA;AACD;AACA;;;;;;;;;AA+EA;AACA;;;;6BAIWA,M,EACX;AACC;AACA,OAAMC,OAAOT,OAAOU,aAAP,CAAqBF,MAArB,EACZA,MADY,EAEZP,cAAcO,MAAd,CAAqB;AACpBG,WAAO;AACNR,oBAAe,eADT;AAENE,WAAM,MAFA;AAGNC,YAAO;AACNK,aAAO;AACNC,kBAAW;AADL;AADD;AAHD;AADa,IAArB,CAFY,CAAb;;AAeA,OAAGH,KAAKI,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,uEAAV,CAAN;AACD;;AAEA;AACA,QAAKX,aAAL,GAAqBM,KAAKM,MAAL,CAAYZ,aAAjC;;AAEA,OAAG,UAAUM,KAAKM,MAAlB,EACC,KAAKV,IAAL,GAAYI,KAAKM,MAAL,CAAYV,IAAxB;;AAED,OAAG,WAAWI,KAAKM,MAAnB,EACC,KAAKT,KAAL,GAAa,gCAAsB,EAAEE,QAAQC,KAAKM,MAAL,CAAYT,KAAtB,EAAtB,CAAb;AACD;AACA;AACD;AACA;;;;;;;6BAKA;AACC;AACA,OAAMU,cAAc,EAApB;;AAEAA,eAAYC,IAAZ,CAAiB,KAAKd,aAAtB;;AAEA,OAAG,UAAU,IAAb,EACCa,YAAYC,IAAZ,CAAiB,KAAKZ,IAAtB;;AAED,OAAG,WAAW,IAAd,EACCW,YAAYC,IAAZ,CAAiB,KAAKX,KAAL,CAAWY,QAAX,EAAjB;AACD;;AAEA;AACA,UAAQ,IAAIlB,OAAOmB,QAAX,CAAoB;AAC3BC,WAAOJ;AADoB,IAApB,CAAR;AAGA;AACA;AACD;AACA;;;;;;;2BAKA;AACC,OAAMK,UAAU;AACflB,mBAAe,KAAKA,aAAL,CAAmBmB,MAAnB;AADA,IAAhB;;AAIA,OAAG,UAAU,IAAb,EACCD,QAAQhB,IAAR,GAAe,KAAKA,IAApB;;AAED,OAAG,WAAW,IAAd,EACCgB,QAAQf,KAAR,GAAgB,KAAKA,KAAL,CAAWgB,MAAX,EAAhB;;AAED,UAAOD,OAAP;AACA;AACD;;;;gCA5JqBE,U,EACrB;AACC,WAAOA,UAAP;AAEC,SAAK,eAAL;AACC,YAAO,IAAIvB,OAAOwB,WAAX,EAAP;AACD,SAAK,MAAL;AACC,YAAO,IAAIxB,OAAOyB,eAAX,EAAP;AACD,SAAK,OAAL;AACC,YAAO,iCAAP;AACD;AACC,WAAM,IAAIX,KAAJ,mDAA0DS,UAA1D,CAAN;AATF;AAWA;AACD;AACA;;;;;;;;qCAK0BA,U,EAAYG,W,EACtC;AACC,WAAOH,UAAP;AAEC,SAAK,eAAL;AACC,YAAQG,YAAYC,OAAZ,CAAoB1B,cAAcG,aAAd,CAA4B,eAA5B,CAApB,CAAR;AACD,SAAK,MAAL;AACC,YAASsB,YAAYE,IAAZ,KAAqB,CAAtB,IACLF,YAAYG,KAAZ,KAAsB,CADjB,IAELH,YAAYI,GAAZ,KAAoB,CAFf,IAGLJ,YAAYK,IAAZ,KAAqB,CAHhB,IAILL,YAAYM,MAAZ,KAAuB,CAJlB,IAKLN,YAAYO,MAAZ,KAAuB,CALlB,IAMLP,YAAYQ,WAAZ,KAA4B,CAN/B;AAOD,SAAK,OAAL;AACC,YAASR,YAAYS,kBAAZ,CAA+B,WAA/B,EAA4CT,YAAYU,SAAxD,CAAD,IACJ,aAAaV,WAAd,KAA+B,KADlC;AAED;AACC,WAAM,IAAIZ,KAAJ,mDAA0DS,UAA1D,CAAN;AAhBF;AAkBA;AACD;AACA;;;;;;;;2BAMA;AAAA,OADcrB,UACd,uEAD2B,EAC3B;;AACC;AACA;AACA;AACA;;AAEA;;;;;;;AAOA,OAAMS,QAAQ,iCAAmBT,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAIF,OAAOmB,QAAX,CAAoB;AAC3BkB,UAAO1B,MAAMC,SAAN,IAAmB,EADC;AAE3BQ,WAAO,CACN,IAAIpB,OAAOwB,WAAX,CAAuB,EAAEa,MAAO1B,MAAMR,aAAN,IAAuB,EAAhC,EAAvB,CADM,EAEN,IAAIH,OAAOyB,eAAX,CAA2B;AAC1Ba,eAAU,IADgB;AAE1BD,WAAO1B,MAAMN,IAAN,IAAc;AAFK,KAA3B,CAFM,EAMN,4BAAkBG,MAAlB,CAAyBG,MAAML,KAAN,IAAe,EAAxC,CANM;AAFoB,IAApB,CAAR;AAWA;;;;;AAoFF;;;kBAvMqBL,a","file":"KEKIdentifier.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport OtherKeyAttribute from \"./OtherKeyAttribute.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class KEKIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KEKIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description keyIdentifier\r\n\t\t */\r\n\t\tthis.keyIdentifier = getParametersValue(parameters, \"keyIdentifier\", KEKIdentifier.defaultValues(\"keyIdentifier\"));\r\n\r\n\t\tif(\"date\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralizedTime}\r\n\t\t\t * @description date\r\n\t\t\t */\r\n\t\t\tthis.date = getParametersValue(parameters, \"date\", KEKIdentifier.defaultValues(\"date\"));\r\n\t\tif(\"other\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OtherKeyAttribute}\r\n\t\t\t * @description other\r\n\t\t\t */\r\n\t\t\tthis.other = getParametersValue(parameters, \"other\", KEKIdentifier.defaultValues(\"other\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyIdentifier\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"date\":\r\n\t\t\t\treturn new asn1js.GeneralizedTime();\r\n\t\t\tcase \"other\":\r\n\t\t\t\treturn new OtherKeyAttribute();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyIdentifier\":\r\n\t\t\t\treturn (memberValue.isEqual(KEKIdentifier.defaultValues(\"keyIdentifier\")));\r\n\t\t\tcase \"date\":\r\n\t\t\t\treturn ((memberValue.year === 0) &&\r\n\t\t\t\t\t\t(memberValue.month === 0) &&\r\n\t\t\t\t\t\t(memberValue.day === 0) &&\r\n\t\t\t\t\t\t(memberValue.hour === 0) &&\r\n\t\t\t\t\t\t(memberValue.minute === 0) &&\r\n\t\t\t\t\t\t(memberValue.second === 0) &&\r\n\t\t\t\t\t\t(memberValue.millisecond === 0));\r\n\t\t\tcase \"other\":\r\n\t\t\t\treturn ((memberValue.compareWithDefault(\"keyAttrId\", memberValue.keyAttrId)) &&\r\n\t\t\t\t\t\t((\"keyAttr\" in memberValue) === false));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//KEKIdentifier ::= SEQUENCE {\r\n\t\t//    keyIdentifier OCTET STRING,\r\n\t\t//    date GeneralizedTime OPTIONAL,\r\n\t\t//    other OtherKeyAttribute OPTIONAL }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyIdentifier]\r\n\t\t * @property {string} [date]\r\n\t\t * @property {string} [other]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.keyIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.date || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tOtherKeyAttribute.schema(names.other || {})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKEKIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyIdentifier: \"keyIdentifier\",\r\n\t\t\t\t\tdate: \"date\",\r\n\t\t\t\t\tother: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"other\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KEKIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.keyIdentifier = asn1.result.keyIdentifier;\r\n\r\n\t\tif(\"date\" in asn1.result)\r\n\t\t\tthis.date = asn1.result.date;\r\n\r\n\t\tif(\"other\" in asn1.result)\r\n\t\t\tthis.other = new OtherKeyAttribute({ schema: asn1.result.other });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.keyIdentifier);\r\n\r\n\t\tif(\"date\" in this)\r\n\t\t\toutputArray.push(this.date);\r\n\r\n\t\tif(\"other\" in this)\r\n\t\t\toutputArray.push(this.other.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tkeyIdentifier: this.keyIdentifier.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"date\" in this)\r\n\t\t\t_object.date = this.date;\r\n\r\n\t\tif(\"other\" in this)\r\n\t\t\t_object.other = this.other.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}