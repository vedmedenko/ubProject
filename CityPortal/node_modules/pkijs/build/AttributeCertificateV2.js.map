{"version":3,"sources":["../src/AttributeCertificateV2.js"],"names":["asn1js","ObjectDigestInfo","parameters","digestedObjectType","defaultValues","otherObjectTypeID","digestAlgorithm","objectDigest","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","Sequence","value","push","toSchema","toJSON","memberName","Enumerated","ObjectIdentifier","BitString","name","optional","V2Form","issuerName","baseCertificateID","objectDigestInfo","idBlock","tagClass","tagNumber","valueBlock","Constructed","Holder","entityName","AttributeCertificateInfoV2","version","holder","issuer","signature","serialNumber","attrCertValidityPeriod","attributes","issuerUniqueID","extensions","valueDec","Array","from","element","Integer","Choice","Repeated","AttributeCertificateV2","acinfo","signatureAlgorithm","signatureValue"],"mappings":"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","file":"AttributeCertificateV2.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport GeneralNames from \"./GeneralNames.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport Extensions from \"./Extensions.js\";\r\nimport { AttCertValidityPeriod, IssuerSerial } from \"./AttributeCertificateV1.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class ObjectDigestInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ObjectDigestInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Enumerated}\r\n\t\t * @description digestedObjectType\r\n\t\t */\r\n\t\tthis.digestedObjectType = getParametersValue(parameters, \"digestedObjectType\", ObjectDigestInfo.defaultValues(\"digestedObjectType\"));\r\n\t\t\r\n\t\tif(\"otherObjectTypeID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ObjectIdentifier}\r\n\t\t\t * @description otherObjectTypeID\r\n\t\t\t */\r\n\t\t\tthis.otherObjectTypeID = getParametersValue(parameters, \"otherObjectTypeID\", ObjectDigestInfo.defaultValues(\"otherObjectTypeID\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description digestAlgorithm\r\n\t\t */\r\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", ObjectDigestInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description objectDigest\r\n\t\t */\r\n\t\tthis.objectDigest = getParametersValue(parameters, \"objectDigest\", ObjectDigestInfo.defaultValues(\"objectDigest\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"digestedObjectType\":\r\n\t\t\t\treturn new asn1js.Enumerated();\r\n\t\t\tcase \"otherObjectTypeID\":\r\n\t\t\t\treturn new asn1js.ObjectIdentifier();\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"objectDigest\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ObjectDigestInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// ObjectDigestInfo ::= SEQUENCE {\r\n\t\t//   digestedObjectType  ENUMERATED {\r\n\t\t//     publicKey            (0),\r\n\t\t//     publicKeyCert        (1),\r\n\t\t//     otherObjectTypes     (2) },\r\n\t\t//   -- otherObjectTypes MUST NOT\r\n\t\t//   -- be used in this profile\r\n\t\t//   otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,\r\n\t\t//   digestAlgorithm     AlgorithmIdentifier,\r\n\t\t//   objectDigest        BIT STRING\r\n\t\t// }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [digestedObjectType]\r\n\t\t * @property {string} [otherObjectTypeID]\r\n\t\t * @property {string} [digestAlgorithm]\r\n\t\t * @property {string} [objectDigest]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Enumerated({ name: (names.digestedObjectType || \"\") }),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.otherObjectTypeID || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.objectDigest || \"\") }),\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tObjectDigestInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tdigestedObjectType: \"digestedObjectType\",\r\n\t\t\t\t\totherObjectTypeID: \"otherObjectTypeID\",\r\n\t\t\t\t\tdigestAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"digestAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tobjectDigest: \"objectDigest\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ObjectDigestInfo\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.digestedObjectType = asn1.result.digestedObjectType;\r\n\t\t\r\n\t\tif(\"otherObjectTypeID\" in asn1.result)\r\n\t\t\tthis.otherObjectTypeID = asn1.result.otherObjectTypeID;\r\n\t\t\r\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\r\n\t\tthis.objectDigest = asn1.result.objectDigest;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence({\r\n\t\t\tvalue: [this.digestedObjectType]\r\n\t\t});\r\n\t\t\r\n\t\tif(\"otherObjectTypeID\" in this)\r\n\t\t\tresult.value.push(this.otherObjectTypeID);\r\n\t\t\r\n\t\tresult.value.push(this.digestAlgorithm.toSchema());\r\n\t\tresult.value.push(this.objectDigest);\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {\r\n\t\t\tdigestedObjectType: this.digestedObjectType.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"otherObjectTypeID\" in this)\r\n\t\t\tresult.otherObjectTypeID = this.otherObjectTypeID.toJSON()\r\n\t\t\r\n\t\tresult.digestAlgorithm = this.digestAlgorithm.toJSON();\r\n\t\tresult.objectDigest = this.objectDigest.toJSON();\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class V2Form\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for V2Form class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"issuerName\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralNames}\r\n\t\t\t * @description issuerName\r\n\t\t\t */\r\n\t\t\tthis.issuerName = getParametersValue(parameters, \"issuerName\", V2Form.defaultValues(\"issuerName\"));\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {IssuerSerial}\r\n\t\t\t * @description baseCertificateID\r\n\t\t\t */\r\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", V2Form.defaultValues(\"baseCertificateID\"));\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ObjectDigestInfo}\r\n\t\t\t * @description objectDigestInfo\r\n\t\t\t */\r\n\t\t\tthis.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", V2Form.defaultValues(\"objectDigestInfo\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"issuerName\":\r\n\t\t\t\treturn new GeneralNames();\r\n\t\t\tcase \"baseCertificateID\":\r\n\t\t\t\treturn new IssuerSerial();\r\n\t\t\tcase \"objectDigestInfo\":\r\n\t\t\t\treturn new ObjectDigestInfo();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for V2Form class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// V2Form ::= SEQUENCE {\r\n\t\t//   issuerName            GeneralNames  OPTIONAL,\r\n\t\t//   baseCertificateID     [0] IssuerSerial  OPTIONAL,\r\n\t\t//   objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL\r\n\t\t//     -- issuerName MUST be present in this profile\r\n\t\t//     -- baseCertificateID and objectDigestInfo MUST NOT\r\n\t\t//     -- be present in this profile\r\n\t\t// }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuerName]\r\n\t\t * @property {string} [baseCertificateID]\r\n\t\t * @property {string} [objectDigestInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tGeneralNames.schema({\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: names.issuerName\r\n\t\t\t\t\t}\r\n\t\t\t\t}, true),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.baseCertificateID || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.objectDigestInfo || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: ObjectDigestInfo.schema().valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tV2Form.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tissuerName: \"issuerName\",\r\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\r\n\t\t\t\t\tobjectDigestInfo: \"objectDigestInfo\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for V2Form\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"issuerName\" in asn1.result)\r\n\t\t\tthis.issuerName = new GeneralNames({ schema: asn1.result.issuerName });\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in asn1.result)\r\n\t\t{\r\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\r\n\t\t\tasn1.result.baseCertificateID.idBlock.tagClass = 1;\r\n\t\t\tasn1.result.baseCertificateID.idBlock.tagNumber = 16;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tthis.baseCertificateID = new IssuerSerial({ schema: asn1.result.baseCertificateID });\r\n\t\t}\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in asn1.result)\r\n\t\t{\r\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\r\n\t\t\tasn1.result.objectDigestInfo.idBlock.tagClass = 1;\r\n\t\t\tasn1.result.objectDigestInfo.idBlock.tagNumber = 16;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tthis.objectDigestInfo = new ObjectDigestInfo({ schema: asn1.result.objectDigestInfo });\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence();\r\n\t\t\r\n\t\tif(\"issuerName\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.issuerName.toSchema());\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.objectDigestInfo.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {};\r\n\t\t\r\n\t\tif(\"issuerName\" in this)\r\n\t\t\tresult.issuerName = this.issuerName.toJSON();\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in this)\r\n\t\t\tresult.objectDigestInfo = this.objectDigestInfo.toJSON();\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class Holder\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Holder class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"baseCertificateID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {IssuerSerial}\r\n\t\t\t * @description baseCertificateID\r\n\t\t\t */\r\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", Holder.defaultValues(\"baseCertificateID\"));\r\n\t\t\r\n\t\tif(\"entityName\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralNames}\r\n\t\t\t * @description entityName\r\n\t\t\t */\r\n\t\t\tthis.entityName = getParametersValue(parameters, \"entityName\", Holder.defaultValues(\"entityName\"));\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ObjectDigestInfo}\r\n\t\t\t * @description objectDigestInfo\r\n\t\t\t */\r\n\t\t\tthis.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", Holder.defaultValues(\"objectDigestInfo\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"baseCertificateID\":\r\n\t\t\t\treturn new IssuerSerial();\r\n\t\t\tcase \"entityName\":\r\n\t\t\t\treturn new GeneralNames();\r\n\t\t\tcase \"objectDigestInfo\":\r\n\t\t\t\treturn new ObjectDigestInfo();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Holder class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// Holder ::= SEQUENCE {\r\n\t\t//   baseCertificateID   [0] IssuerSerial OPTIONAL,\r\n\t\t//       -- the issuer and serial number of\r\n\t\t//       -- the holder's Public Key Certificate\r\n\t\t//   entityName          [1] GeneralNames OPTIONAL,\r\n\t\t//       -- the name of the claimant or role\r\n\t\t//   objectDigestInfo    [2] ObjectDigestInfo OPTIONAL\r\n\t\t//       -- used to directly authenticate the holder,\r\n\t\t//       -- for example, an executable\r\n\t\t// }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [baseCertificateID]\r\n\t\t * @property {string} [entityName]\r\n\t\t * @property {string} [objectDigestInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.baseCertificateID || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.entityName || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\ttagNumber: 1 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: GeneralNames.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.objectDigestInfo || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: ObjectDigestInfo.schema().valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tHolder.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\r\n\t\t\t\t\tentityName: \"entityName\",\r\n\t\t\t\t\tobjectDigestInfo: \"objectDigestInfo\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Holder\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"baseCertificateID\" in asn1.result)\r\n\t\t{\r\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\r\n\t\t\tasn1.result.baseCertificateID.idBlock.tagClass = 1;\r\n\t\t\tasn1.result.baseCertificateID.idBlock.tagNumber = 16;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tthis.baseCertificateID = new IssuerSerial({ schema: asn1.result.baseCertificateID });\r\n\t\t}\r\n\t\t\r\n\t\tif(\"entityName\" in asn1.result)\r\n\t\t{\r\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\r\n\t\t\tasn1.result.entityName.idBlock.tagClass = 1;\r\n\t\t\tasn1.result.entityName.idBlock.tagNumber = 16;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tthis.entityName = new GeneralNames({ schema: asn1.result.entityName });\r\n\t\t}\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in asn1.result)\r\n\t\t{\r\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\r\n\t\t\tasn1.result.objectDigestInfo.idBlock.tagClass = 1;\r\n\t\t\tasn1.result.objectDigestInfo.idBlock.tagNumber = 16;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tthis.objectDigestInfo = new ObjectDigestInfo({ schema: asn1.result.objectDigestInfo });\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence();\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"entityName\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.entityName.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.objectDigestInfo.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {};\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\r\n\t\t\r\n\t\tif(\"entityName\" in this)\r\n\t\t\tresult.entityName = this.entityName.toJSON();\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in this)\r\n\t\t\tresult.objectDigestInfo = this.objectDigestInfo.toJSON();\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class AttributeCertificateInfoV2\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeCertificateInfoV2 class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV2.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Holder}\r\n\t\t * @description holder\r\n\t\t */\r\n\t\tthis.holder = getParametersValue(parameters, \"holder\", AttributeCertificateInfoV2.defaultValues(\"holder\"));\r\n\t\t/**\r\n\t\t * @type {GeneralNames|V2Form}\r\n\t\t * @description issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV2.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV2.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV2.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {AttCertValidityPeriod}\r\n\t\t * @description attrCertValidityPeriod\r\n\t\t */\r\n\t\tthis.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV2.defaultValues(\"attrCertValidityPeriod\"));\r\n\t\t/**\r\n\t\t * @type {Array.<Attribute>}\r\n\t\t * @description attributes\r\n\t\t */\r\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV2.defaultValues(\"attributes\"));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @description issuerUniqueID\r\n\t\t\t */\r\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV2.defaultValues(\"issuerUniqueID\"));\r\n\t\t\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Extensions}\r\n\t\t\t * @description extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV2.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 1;\r\n\t\t\tcase \"holder\":\r\n\t\t\t\treturn new Holder();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"attrCertValidityPeriod\":\r\n\t\t\t\treturn new AttCertValidityPeriod();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"issuerUniqueID\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn new Extensions();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateInfoV2 class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// AttributeCertificateInfoV2 ::= SEQUENCE {\r\n\t\t//   version                 AttCertVersion, -- version is v2\r\n\t\t//   holder                  Holder,\r\n\t\t//   issuer                  AttCertIssuer,\r\n\t\t//   signature               AlgorithmIdentifier,\r\n\t\t//   serialNumber            CertificateSerialNumber,\r\n\t\t//   attrCertValidityPeriod  AttCertValidityPeriod,\r\n\t\t//   attributes              SEQUENCE OF Attribute,\r\n\t\t//   issuerUniqueID          UniqueIdentifier OPTIONAL,\r\n\t\t//   extensions              Extensions OPTIONAL\r\n\t\t// }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuer]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tHolder.schema(names.holder || {}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tGeneralNames.schema({\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: (names.issuer || \"\")\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.issuer || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: V2Form.schema().valueBlock.value\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signature || {}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\r\n\t\t\t\tAttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.issuerUniqueID || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tExtensions.schema(names.extensions || {}, true)\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeCertificateInfoV2.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tholder: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"holder\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tissuer: \"issuer\",\r\n\t\t\t\t\tsignature: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signature\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tserialNumber: \"serialNumber\",\r\n\t\t\t\t\tattrCertValidityPeriod: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"attrCertValidityPeriod\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tattributes: \"attributes\",\r\n\t\t\t\t\tissuerUniqueID: \"issuerUniqueID\",\r\n\t\t\t\t\textensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"extensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV2\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.holder = new Holder({ schema: asn1.result.holder });\r\n\t\t\r\n\t\tswitch(asn1.result.issuer.idBlock.tagClass)\r\n\t\t{\r\n\t\t\tcase 3: // V2Form\r\n\t\t\t\t//region Change type to \"Sequence\"\r\n\t\t\t\tasn1.result.issuer.idBlock.tagClass = 1;\r\n\t\t\t\tasn1.result.issuer.idBlock.tagNumber = 16;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tthis.issuer = new V2Form({ schema: asn1.result.issuer });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1: // GeneralNames (should not be used)\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Incorect value for 'issuer' in AttributeCertificateInfoV2\");\r\n\t\t}\r\n\t\t\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\tthis.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\r\n\t\tthis.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in asn1.result)\r\n\t\t\tthis.issuerUniqueID = asn1.result.issuerUniqueID;\r\n\t\t\r\n\t\tif(\"extensions\" in asn1.result)\r\n\t\t\tthis.extensions = new Extensions({ schema: asn1.result.extensions });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\t\tthis.holder.toSchema(),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: this.issuer.toSchema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tthis.signature.toSchema(),\r\n\t\t\t\tthis.serialNumber,\r\n\t\t\t\tthis.attrCertValidityPeriod.toSchema(),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t});\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.issuerUniqueID);\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.extensions.toSchema());\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {\r\n\t\t\tversion: this.version,\r\n\t\t\tholder: this.holder.toJSON(),\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON(),\r\n\t\t\tattrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),\r\n\t\t\tattributes: Array.from(this.attributes, element => element.toJSON())\r\n\t\t};\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tresult.issuerUniqueID = this.issuerUniqueID.toJSON();\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tresult.extensions = this.extensions.toJSON();\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport default class AttributeCertificateV2\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeCertificateV2 class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AttributeCertificateInfoV2}\r\n\t\t * @description acinfo\r\n\t\t */\r\n\t\tthis.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV2.defaultValues(\"acinfo\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV2.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description signatureValue\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV2.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"acinfo\":\r\n\t\t\t\treturn new AttributeCertificateInfoV2();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateV2 class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// AttributeCertificate ::= SEQUENCE {\r\n\t\t//   acinfo               AttributeCertificateInfoV2,\r\n\t\t//   signatureAlgorithm   AlgorithmIdentifier,\r\n\t\t//   signatureValue       BIT STRING\r\n\t\t// }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {Object} [acinfo]\r\n\t\t * @property {Object} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAttributeCertificateInfoV2.schema(names.acinfo || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeCertificateV2.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tacinfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"acinfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignatureAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignatureValue: \"signatureValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateV2\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.acinfo = new AttributeCertificateInfoV2({ schema: asn1.result.acinfo });\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.acinfo.toSchema(),\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tacinfo: this.acinfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}