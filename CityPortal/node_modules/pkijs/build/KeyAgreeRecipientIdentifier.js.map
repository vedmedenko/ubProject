{"version":3,"sources":["../src/KeyAgreeRecipientIdentifier.js"],"names":["asn1js","KeyAgreeRecipientIdentifier","parameters","variant","defaultValues","value","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","idBlock","tagClass","tagNumber","toSchema","Constructed","valueBlock","Any","_object","toJSON","memberName","memberValue","Object","keys","length","Choice","issuerAndSerialNumber","name","rKeyId"],"mappings":"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","file":"KeyAgreeRecipientIdentifier.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport RecipientKeyIdentifier from \"./RecipientKeyIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class KeyAgreeRecipientIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KeyAgreeRecipientIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description variant\r\n\t\t */\r\n\t\tthis.variant = getParametersValue(parameters, \"variant\", KeyAgreeRecipientIdentifier.defaultValues(\"variant\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @description values\r\n\t\t */\r\n\t\tthis.value = getParametersValue(parameters, \"value\", KeyAgreeRecipientIdentifier.defaultValues(\"value\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"variant\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyAgreeRecipientIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"variant\":\r\n\t\t\t\treturn (memberValue === (-1));\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyAgreeRecipientIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//KeyAgreeRecipientIdentifier ::= CHOICE {\r\n\t\t//    issuerAndSerialNumber IssuerAndSerialNumber,\r\n\t\t//    rKeyId [0] IMPLICIT RecipientKeyIdentifier }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuerAndSerialNumber]\r\n\t\t * @property {string} [rKeyId]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Choice({\r\n\t\t\tvalue: [\r\n\t\t\t\tIssuerAndSerialNumber.schema(names.issuerAndSerialNumber || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.blockName || \"\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.blockName || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: RecipientKeyIdentifier.schema(names.rKeyId || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: (names.blockName || \"\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKeyAgreeRecipientIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"blockName\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KeyAgreeRecipientIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(asn1.result.blockName.idBlock.tagClass === 1)\r\n\t\t{\r\n\t\t\tthis.variant = 1;\r\n\t\t\tthis.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.variant = 2;\r\n\r\n\t\t\tasn1.result.blockName.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\tasn1.result.blockName.idBlock.tagNumber = 16; // SEQUENCE\r\n\r\n\t\t\tthis.value = new RecipientKeyIdentifier({ schema: asn1.result.blockName });\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tswitch(this.variant)\r\n\t\t{\r\n\t\t\tcase 1:\r\n\t\t\t\treturn this.value.toSchema();\r\n\t\t\tcase 2:\r\n\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: this.value.toSchema().valueBlock.value\r\n\t\t\t\t});\r\n\t\t\tdefault:\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tvariant: this.variant\r\n\t\t};\r\n\r\n\t\tif((this.variant === 1) || (this.variant === 2))\r\n\t\t\t_object.value = this.value.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}